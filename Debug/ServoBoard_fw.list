
ServoBoard_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003df8  08003df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e2c  08003e2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e2c  08003e2c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e2c  08003e2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000000c  08003e44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08003e44  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3d8  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025de  00000000  00000000  0002f450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  00031a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab2  00000000  00000000  000327e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019fa0  00000000  00000000  0003329a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f514  00000000  00000000  0004d23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e5be  00000000  00000000  0005c74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000395c  00000000  00000000  000ead0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ee668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003de0 	.word	0x08003de0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003de0 	.word	0x08003de0

0800014c <_ZN7CanCtrlC1Ev>:
#include <CanCtrl.hpp>

CanCtrl::CanCtrl(/*uint32_t baseID*/){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f44f 7240 	mov.w	r2, #768	; 0x300
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2200      	movs	r2, #0
 8000160:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2200      	movs	r2, #0
 8000168:	66da      	str	r2, [r3, #108]	; 0x6c
	txHeader_.RTR = CAN_RTR_DATA;            // フレームタイプはデータフレーム
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2200      	movs	r2, #0
 800016e:	619a      	str	r2, [r3, #24]
	txHeader_.IDE = CAN_ID_STD;              // 標準ID(11ﾋﾞｯﾄ)
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	2200      	movs	r2, #0
 8000174:	615a      	str	r2, [r3, #20]
	txHeader_.DLC = 8;                       // データ長は8バイトに
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	2208      	movs	r2, #8
 800017a:	61da      	str	r2, [r3, #28]
	txHeader_.TransmitGlobalTime = DISABLE;  // ???
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2200      	movs	r2, #0
 8000180:	f883 2020 	strb.w	r2, [r3, #32]
	filter_.FilterIdHigh         = 0x300/*baseID*/ << 5;              // フィルターIDの上位16ビット
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800018a:	641a      	str	r2, [r3, #64]	; 0x40
	filter_.FilterIdLow          = 0;                        // フィルターIDの下位16ビット
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2200      	movs	r2, #0
 8000190:	645a      	str	r2, [r3, #68]	; 0x44
	filter_.FilterMaskIdHigh     = 0x7f8 << 5;               // フィルターマスクの上位16ビット
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000198:	649a      	str	r2, [r3, #72]	; 0x48
	filter_.FilterMaskIdLow      = 0b110;                    // フィルターマスクの下位16ビット
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2206      	movs	r2, #6
 800019e:	64da      	str	r2, [r3, #76]	; 0x4c
	//フィルターマスクは1が確定させたいところで0が無視したいところ
	filter_.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2201      	movs	r2, #1
 80001a4:	65da      	str	r2, [r3, #92]	; 0x5c
	filter_.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2200      	movs	r2, #0
 80001aa:	651a      	str	r2, [r3, #80]	; 0x50
	filter_.FilterBank           = 0;                        // フィルターバンクNo
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2200      	movs	r2, #0
 80001b0:	655a      	str	r2, [r3, #84]	; 0x54
	filter_.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモード
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2200      	movs	r2, #0
 80001b6:	659a      	str	r2, [r3, #88]	; 0x58
	filter_.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	220e      	movs	r2, #14
 80001bc:	665a      	str	r2, [r3, #100]	; 0x64
	filter_.FilterActivation     = ENABLE;                   // フィルター無効／有効
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2201      	movs	r2, #1
 80001c2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	4618      	mov	r0, r3
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr

080001d0 <_ZN7CanCtrl4initER19__CAN_HandleTypeDefm>:

void CanCtrl::init(CAN_HandleTypeDef &hcan, uint32_t baseID){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
	setBaseID(baseID);
 80001dc:	6879      	ldr	r1, [r7, #4]
 80001de:	68f8      	ldr	r0, [r7, #12]
 80001e0:	f000 f816 	bl	8000210 <_ZN7CanCtrl9setBaseIDEm>
	filter_.FilterIdHigh = this->baseID_ << 5;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	015a      	lsls	r2, r3, #5
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_CAN_ConfigFilter(&hcan, &filter_);
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	3340      	adds	r3, #64	; 0x40
 80001f2:	4619      	mov	r1, r3
 80001f4:	68b8      	ldr	r0, [r7, #8]
 80001f6:	f001 fa4c 	bl	8001692 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan);
 80001fa:	68b8      	ldr	r0, [r7, #8]
 80001fc:	f001 fb12 	bl	8001824 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000200:	2102      	movs	r1, #2
 8000202:	68b8      	ldr	r0, [r7, #8]
 8000204:	f001 fd76 	bl	8001cf4 <HAL_CAN_ActivateNotification>
}
 8000208:	bf00      	nop
 800020a:	3710      	adds	r7, #16
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <_ZN7CanCtrl9setBaseIDEm>:

bool CanCtrl::setBaseID(uint32_t baseID){
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
	this->baseID_ = baseID;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	683a      	ldr	r2, [r7, #0]
 800021e:	601a      	str	r2, [r3, #0]
	return true;
 8000220:	2301      	movs	r3, #1
}
 8000222:	4618      	mov	r0, r3
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <_ZN7CanCtrl9getBaseIDEv>:

uint32_t CanCtrl::getBaseID(){
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
	return baseID_;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	681b      	ldr	r3, [r3, #0]
}
 8000238:	4618      	mov	r0, r3
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr

08000242 <_ZN7CanCtrl7receiveER19__CAN_HandleTypeDefRmRA8_h>:

bool CanCtrl::receive(CAN_HandleTypeDef &hcan ,uint32_t& RID,uint8_t (&data)[8]){
 8000242:	b580      	push	{r7, lr}
 8000244:	b086      	sub	sp, #24
 8000246:	af00      	add	r7, sp, #0
 8000248:	60f8      	str	r0, [r7, #12]
 800024a:	60b9      	str	r1, [r7, #8]
 800024c:	607a      	str	r2, [r7, #4]
 800024e:	603b      	str	r3, [r7, #0]
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rxHeader_, data) == HAL_OK){
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	2100      	movs	r1, #0
 800025a:	68b8      	ldr	r0, [r7, #8]
 800025c:	f001 fc29 	bl	8001ab2 <HAL_CAN_GetRxMessage>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	bf0c      	ite	eq
 8000266:	2301      	moveq	r3, #1
 8000268:	2300      	movne	r3, #0
 800026a:	b2db      	uxtb	r3, r3
 800026c:	2b00      	cmp	r3, #0
 800026e:	d01a      	beq.n	80002a6 <_ZN7CanCtrl7receiveER19__CAN_HandleTypeDefRmRA8_h+0x64>
		RID = rxHeader_.StdId;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0;i<8;i++){
 8000278:	2300      	movs	r3, #0
 800027a:	75fb      	strb	r3, [r7, #23]
 800027c:	e00a      	b.n	8000294 <_ZN7CanCtrl7receiveER19__CAN_HandleTypeDefRmRA8_h+0x52>
			rxData_[i] = data[i];
 800027e:	7dfa      	ldrb	r2, [r7, #23]
 8000280:	7dfb      	ldrb	r3, [r7, #23]
 8000282:	6839      	ldr	r1, [r7, #0]
 8000284:	5c89      	ldrb	r1, [r1, r2]
 8000286:	68fa      	ldr	r2, [r7, #12]
 8000288:	4413      	add	r3, r2
 800028a:	460a      	mov	r2, r1
 800028c:	711a      	strb	r2, [r3, #4]
		for(uint8_t i = 0;i<8;i++){
 800028e:	7dfb      	ldrb	r3, [r7, #23]
 8000290:	3301      	adds	r3, #1
 8000292:	75fb      	strb	r3, [r7, #23]
 8000294:	7dfb      	ldrb	r3, [r7, #23]
 8000296:	2b07      	cmp	r3, #7
 8000298:	d9f1      	bls.n	800027e <_ZN7CanCtrl7receiveER19__CAN_HandleTypeDefRmRA8_h+0x3c>
		}
		canFlug_ = CanLed::received;
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	2201      	movs	r2, #1
 800029e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return true;
 80002a2:	2301      	movs	r3, #1
 80002a4:	e000      	b.n	80002a8 <_ZN7CanCtrl7receiveER19__CAN_HandleTypeDefRmRA8_h+0x66>
	}
	else{
		return false;
 80002a6:	2300      	movs	r3, #0
	}
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3718      	adds	r7, #24
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh>:

bool CanCtrl::send(CAN_HandleTypeDef &hcan ,uint32_t TID/*送信用ID*/,uint8_t (&data)[8]/*送信内容*/,uint8_t dlc){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]
 80002bc:	603b      	str	r3, [r7, #0]
	txHeader_.StdId = TID;
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	60da      	str	r2, [r3, #12]
	txHeader_.DLC = dlc;
 80002c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	61da      	str	r2, [r3, #28]
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80002cc:	68b8      	ldr	r0, [r7, #8]
 80002ce:	f001 fbbc 	bl	8001a4a <HAL_CAN_GetTxMailboxesFreeLevel>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	bf14      	ite	ne
 80002d8:	2301      	movne	r3, #1
 80002da:	2300      	moveq	r3, #0
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d018      	beq.n	8000314 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh+0x64>
		uint32_t TxMailbox;//ボックス番号(ここに返ってくる)
		if (HAL_CAN_AddTxMessage(&hcan,&txHeader_,data,&TxMailbox) == HAL_OK){
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	f103 010c 	add.w	r1, r3, #12
 80002e8:	f107 0314 	add.w	r3, r7, #20
 80002ec:	683a      	ldr	r2, [r7, #0]
 80002ee:	68b8      	ldr	r0, [r7, #8]
 80002f0:	f001 fadc 	bl	80018ac <HAL_CAN_AddTxMessage>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	bf0c      	ite	eq
 80002fa:	2301      	moveq	r3, #1
 80002fc:	2300      	movne	r3, #0
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	2b00      	cmp	r3, #0
 8000302:	d005      	beq.n	8000310 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh+0x60>
			canFlug_ = CanLed::sended;
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	2202      	movs	r2, #2
 8000308:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			return true;
 800030c:	2301      	movs	r3, #1
 800030e:	e002      	b.n	8000316 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh+0x66>
		}
		else{
			return false;
 8000310:	2300      	movs	r3, #0
 8000312:	e000      	b.n	8000316 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh+0x66>
		}
	}
	else{
		return false;
 8000314:	2300      	movs	r3, #0
	}
}
 8000316:	4618      	mov	r0, r3
 8000318:	3718      	adds	r7, #24
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <_ZN7CanCtrl9updateLedEv>:

void CanCtrl::updateLed(){
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	if(canFlug_ == CanLed::received){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800032e:	2b01      	cmp	r3, #1
 8000330:	d10f      	bne.n	8000352 <_ZN7CanCtrl9updateLedEv+0x32>
		HAL_GPIO_WritePin(LED_CAN_GPIO_Port,LED_CAN_Pin,GPIO_PIN_SET);
 8000332:	2201      	movs	r2, #1
 8000334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000338:	481c      	ldr	r0, [pc, #112]	; (80003ac <_ZN7CanCtrl9updateLedEv+0x8c>)
 800033a:	f002 f9cc 	bl	80026d6 <HAL_GPIO_WritePin>
		canTick_ = HAL_GetTick();
 800033e:	f001 f87f 	bl	8001440 <HAL_GetTick>
 8000342:	4602      	mov	r2, r0
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	66da      	str	r2, [r3, #108]	; 0x6c
		canFlug_ = CanLed::none;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2200      	movs	r2, #0
 800034c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		canFlug_ = CanLed::none;
	}
	else if(HAL_GetTick() > canTick_+150){
		HAL_GPIO_WritePin(LED_CAN_GPIO_Port,LED_CAN_Pin,GPIO_PIN_RESET);
	}
}
 8000350:	e027      	b.n	80003a2 <_ZN7CanCtrl9updateLedEv+0x82>
	}else if(canFlug_ == CanLed::sended){
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000358:	2b02      	cmp	r3, #2
 800035a:	d10f      	bne.n	800037c <_ZN7CanCtrl9updateLedEv+0x5c>
		HAL_GPIO_WritePin(LED_CAN_GPIO_Port,LED_CAN_Pin,GPIO_PIN_SET);
 800035c:	2201      	movs	r2, #1
 800035e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000362:	4812      	ldr	r0, [pc, #72]	; (80003ac <_ZN7CanCtrl9updateLedEv+0x8c>)
 8000364:	f002 f9b7 	bl	80026d6 <HAL_GPIO_WritePin>
		canTick_ = HAL_GetTick();
 8000368:	f001 f86a 	bl	8001440 <HAL_GetTick>
 800036c:	4602      	mov	r2, r0
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	66da      	str	r2, [r3, #108]	; 0x6c
		canFlug_ = CanLed::none;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2200      	movs	r2, #0
 8000376:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 800037a:	e012      	b.n	80003a2 <_ZN7CanCtrl9updateLedEv+0x82>
	else if(HAL_GetTick() > canTick_+150){
 800037c:	f001 f860 	bl	8001440 <HAL_GetTick>
 8000380:	4602      	mov	r2, r0
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000386:	3396      	adds	r3, #150	; 0x96
 8000388:	429a      	cmp	r2, r3
 800038a:	bf8c      	ite	hi
 800038c:	2301      	movhi	r3, #1
 800038e:	2300      	movls	r3, #0
 8000390:	b2db      	uxtb	r3, r3
 8000392:	2b00      	cmp	r3, #0
 8000394:	d005      	beq.n	80003a2 <_ZN7CanCtrl9updateLedEv+0x82>
		HAL_GPIO_WritePin(LED_CAN_GPIO_Port,LED_CAN_Pin,GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039c:	4803      	ldr	r0, [pc, #12]	; (80003ac <_ZN7CanCtrl9updateLedEv+0x8c>)
 800039e:	f002 f99a 	bl	80026d6 <HAL_GPIO_WritePin>
}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40010800 	.word	0x40010800

080003b0 <_ZN9ServoCtrl7setDutyER17TIM_HandleTypeDefPh>:

//ServoCtrl::ServoCtrl(){
//
//}

bool ServoCtrl::setDuty(TIM_HandleTypeDef &htim, uint8_t data[8]){
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]
	if (htim.Instance == TIM2){
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003c4:	d130      	bne.n	8000428 <_ZN9ServoCtrl7setDutyER17TIM_HandleTypeDefPh+0x78>
		std::memcpy(&duty[0],data + 0,sizeof(uint16_t));
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3304      	adds	r3, #4
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	8812      	ldrh	r2, [r2, #0]
 80003ce:	b292      	uxth	r2, r2
 80003d0:	801a      	strh	r2, [r3, #0]
		std::memcpy(&duty[1],data + 2,sizeof(uint16_t));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	3306      	adds	r3, #6
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	3202      	adds	r2, #2
 80003da:	8812      	ldrh	r2, [r2, #0]
 80003dc:	b292      	uxth	r2, r2
 80003de:	801a      	strh	r2, [r3, #0]
		std::memcpy(&duty[2],data + 4,sizeof(uint16_t));
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	3308      	adds	r3, #8
 80003e4:	687a      	ldr	r2, [r7, #4]
 80003e6:	3204      	adds	r2, #4
 80003e8:	8812      	ldrh	r2, [r2, #0]
 80003ea:	b292      	uxth	r2, r2
 80003ec:	801a      	strh	r2, [r3, #0]
		std::memcpy(&duty[3],data + 6,sizeof(uint16_t));
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	330a      	adds	r3, #10
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	3206      	adds	r2, #6
 80003f6:	8812      	ldrh	r2, [r2, #0]
 80003f8:	b292      	uxth	r2, r2
 80003fa:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_1, duty[0]);
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	889a      	ldrh	r2, [r3, #4]
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_2, duty[1]);
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	88da      	ldrh	r2, [r3, #6]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_3, duty[2]);
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	891a      	ldrh	r2, [r3, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_4, duty[3]);
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	895a      	ldrh	r2, [r3, #10]
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	641a      	str	r2, [r3, #64]	; 0x40
		return true;
 8000424:	2301      	movs	r3, #1
 8000426:	e036      	b.n	8000496 <_ZN9ServoCtrl7setDutyER17TIM_HandleTypeDefPh+0xe6>
	}else if(htim.Instance == TIM3){
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a1c      	ldr	r2, [pc, #112]	; (80004a0 <_ZN9ServoCtrl7setDutyER17TIM_HandleTypeDefPh+0xf0>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d130      	bne.n	8000494 <_ZN9ServoCtrl7setDutyER17TIM_HandleTypeDefPh+0xe4>
		std::memcpy(&duty[4],data + 0,sizeof(uint16_t));
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	330c      	adds	r3, #12
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	8812      	ldrh	r2, [r2, #0]
 800043a:	b292      	uxth	r2, r2
 800043c:	801a      	strh	r2, [r3, #0]
		std::memcpy(&duty[5],data + 2,sizeof(uint16_t));
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	330e      	adds	r3, #14
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	3202      	adds	r2, #2
 8000446:	8812      	ldrh	r2, [r2, #0]
 8000448:	b292      	uxth	r2, r2
 800044a:	801a      	strh	r2, [r3, #0]
		std::memcpy(&duty[6],data + 4,sizeof(uint16_t));
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3310      	adds	r3, #16
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	3204      	adds	r2, #4
 8000454:	8812      	ldrh	r2, [r2, #0]
 8000456:	b292      	uxth	r2, r2
 8000458:	801a      	strh	r2, [r3, #0]
		std::memcpy(&duty[7],data + 6,sizeof(uint16_t));
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	3312      	adds	r3, #18
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	3206      	adds	r2, #6
 8000462:	8812      	ldrh	r2, [r2, #0]
 8000464:	b292      	uxth	r2, r2
 8000466:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_1, duty[4]);
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	899a      	ldrh	r2, [r3, #12]
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_2, duty[5]);
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	89da      	ldrh	r2, [r3, #14]
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_3, duty[6]);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	8a1a      	ldrh	r2, [r3, #16]
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_4, duty[7]);
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	8a5a      	ldrh	r2, [r3, #18]
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	641a      	str	r2, [r3, #64]	; 0x40
		return true;
 8000490:	2301      	movs	r3, #1
 8000492:	e000      	b.n	8000496 <_ZN9ServoCtrl7setDutyER17TIM_HandleTypeDefPh+0xe6>
	}else{
		return false;
 8000494:	2300      	movs	r3, #0
	}
}
 8000496:	4618      	mov	r0, r3
 8000498:	3714      	adds	r7, #20
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	40000400 	.word	0x40000400

080004a4 <_Z9TIM_ERRORv>:
//	}
//	uint8_t &b = a;
//	return b;
//}

uint8_t TIM_ERROR(/*TIM_HandleTypeDef &htim, uint32_t Channel*/){
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
	return 0;
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <_ZN9ServoCtrl7setModeE4Mode>:

void ServoCtrl::setMode(Mode mode){
 80004b2:	b480      	push	{r7}
 80004b4:	b083      	sub	sp, #12
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
 80004ba:	6039      	str	r1, [r7, #0]
	ServoCtrl::mode = mode;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	683a      	ldr	r2, [r7, #0]
 80004c0:	601a      	str	r2, [r3, #0]
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <_ZN9ServoCtrl5resetER17TIM_HandleTypeDefS1_>:

Mode ServoCtrl::getMode(){
	return mode;
}

bool ServoCtrl::reset(TIM_HandleTypeDef &htim2, TIM_HandleTypeDef &htim3){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80004d8:	2100      	movs	r1, #0
 80004da:	68b8      	ldr	r0, [r7, #8]
 80004dc:	f002 fe86 	bl	80031ec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80004e0:	2104      	movs	r1, #4
 80004e2:	68b8      	ldr	r0, [r7, #8]
 80004e4:	f002 fe82 	bl	80031ec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80004e8:	2108      	movs	r1, #8
 80004ea:	68b8      	ldr	r0, [r7, #8]
 80004ec:	f002 fe7e 	bl	80031ec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80004f0:	210c      	movs	r1, #12
 80004f2:	68b8      	ldr	r0, [r7, #8]
 80004f4:	f002 fe7a 	bl	80031ec <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80004f8:	2100      	movs	r1, #0
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f002 fe76 	bl	80031ec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000500:	2104      	movs	r1, #4
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f002 fe72 	bl	80031ec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000508:	2108      	movs	r1, #8
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f002 fe6e 	bl	80031ec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8000510:	210c      	movs	r1, #12
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f002 fe6a 	bl	80031ec <HAL_TIM_PWM_Stop>
	mode = Mode::dis;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000524:	4806      	ldr	r0, [pc, #24]	; (8000540 <_ZN9ServoCtrl5resetER17TIM_HandleTypeDefS1_+0x74>)
 8000526:	f002 f8d6 	bl	80026d6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <_ZN9ServoCtrl5resetER17TIM_HandleTypeDefS1_+0x74>)
 8000532:	f002 f8d0 	bl	80026d6 <HAL_GPIO_WritePin>
	return true;
 8000536:	2301      	movs	r3, #1
}
 8000538:	4618      	mov	r0, r3
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40010c00 	.word	0x40010c00

08000544 <_ZN9ServoCtrl9_startPWMER17TIM_HandleTypeDefm>:

void ServoCtrl::_startPWM(TIM_HandleTypeDef &htim, uint32_t Channel){
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
	if(htim.ChannelState[Channel/4] == HAL_TIM_CHANNEL_STATE_READY){
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	089b      	lsrs	r3, r3, #2
 8000554:	68ba      	ldr	r2, [r7, #8]
 8000556:	4413      	add	r3, r2
 8000558:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b01      	cmp	r3, #1
 8000560:	bf0c      	ite	eq
 8000562:	2301      	moveq	r3, #1
 8000564:	2300      	movne	r3, #0
 8000566:	b2db      	uxtb	r3, r3
 8000568:	2b00      	cmp	r3, #0
 800056a:	d00d      	beq.n	8000588 <_ZN9ServoCtrl9_startPWMER17TIM_HandleTypeDefm+0x44>
		if(HAL_TIM_PWM_Start(&htim, Channel) == HAL_ERROR){
 800056c:	6879      	ldr	r1, [r7, #4]
 800056e:	68b8      	ldr	r0, [r7, #8]
 8000570:	f002 fd9a 	bl	80030a8 <HAL_TIM_PWM_Start>
 8000574:	4603      	mov	r3, r0
 8000576:	2b01      	cmp	r3, #1
 8000578:	bf0c      	ite	eq
 800057a:	2301      	moveq	r3, #1
 800057c:	2300      	movne	r3, #0
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <_ZN9ServoCtrl9_startPWMER17TIM_HandleTypeDefm+0x44>
			TIM_ERROR(/*htim, Channel*/);
 8000584:	f7ff ff8e 	bl	80004a4 <_Z9TIM_ERRORv>
		}
	}
}
 8000588:	bf00      	nop
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <_ZN9ServoCtrl8_stopPWMER17TIM_HandleTypeDefm>:

void ServoCtrl::_stopPWM(TIM_HandleTypeDef &htim, uint32_t Channel){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
	if(htim.ChannelState[Channel/4] == HAL_TIM_CHANNEL_STATE_BUSY){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	089b      	lsrs	r3, r3, #2
 80005a0:	68ba      	ldr	r2, [r7, #8]
 80005a2:	4413      	add	r3, r2
 80005a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	bf0c      	ite	eq
 80005ae:	2301      	moveq	r3, #1
 80005b0:	2300      	movne	r3, #0
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00d      	beq.n	80005d4 <_ZN9ServoCtrl8_stopPWMER17TIM_HandleTypeDefm+0x44>
		if(HAL_TIM_PWM_Stop(&htim, Channel) == HAL_ERROR){
 80005b8:	6879      	ldr	r1, [r7, #4]
 80005ba:	68b8      	ldr	r0, [r7, #8]
 80005bc:	f002 fe16 	bl	80031ec <HAL_TIM_PWM_Stop>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	bf0c      	ite	eq
 80005c6:	2301      	moveq	r3, #1
 80005c8:	2300      	movne	r3, #0
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <_ZN9ServoCtrl8_stopPWMER17TIM_HandleTypeDefm+0x44>
			TIM_ERROR(/*htim, Channel*/);
 80005d0:	f7ff ff68 	bl	80004a4 <_Z9TIM_ERRORv>
		}
	}
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <_ZN9ServoCtrl9updateEMSEv>:

void ServoCtrl::updateEMS(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(EMS_GPIO_Port,EMS_Pin) == GPIO_PIN_RESET){
 80005e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e8:	480a      	ldr	r0, [pc, #40]	; (8000614 <_ZN9ServoCtrl9updateEMSEv+0x38>)
 80005ea:	f002 f85d 	bl	80026a8 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	bf0c      	ite	eq
 80005f4:	2301      	moveq	r3, #1
 80005f6:	2300      	movne	r3, #0
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d006      	beq.n	800060c <_ZN9ServoCtrl9updateEMSEv+0x30>
		if(mode != Mode::dis){
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <_ZN9ServoCtrl9updateEMSEv+0x30>
			mode = Mode::dis;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
		}

	}
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40010c00 	.word	0x40010c00

08000618 <_ZN9ServoCtrl9updatePWMER17TIM_HandleTypeDefS1_>:

void ServoCtrl::updatePWM(TIM_HandleTypeDef &htim2, TIM_HandleTypeDef &htim3){
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
	switch(mode){
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <_ZN9ServoCtrl9updatePWMER17TIM_HandleTypeDefS1_+0x1a>
 800062c:	2b01      	cmp	r3, #1
 800062e:	d035      	beq.n	800069c <_ZN9ServoCtrl9updatePWMER17TIM_HandleTypeDefS1_+0x84>

		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_RESET);
		break;
	default:
		break;
 8000630:	e069      	b.n	8000706 <_ZN9ServoCtrl9updatePWMER17TIM_HandleTypeDefS1_+0xee>
		_stopPWM(htim2, TIM_CHANNEL_1);
 8000632:	2200      	movs	r2, #0
 8000634:	68b9      	ldr	r1, [r7, #8]
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f7ff ffaa 	bl	8000590 <_ZN9ServoCtrl8_stopPWMER17TIM_HandleTypeDefm>
		_stopPWM(htim2, TIM_CHANNEL_2);
 800063c:	2204      	movs	r2, #4
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff ffa5 	bl	8000590 <_ZN9ServoCtrl8_stopPWMER17TIM_HandleTypeDefm>
		_stopPWM(htim2, TIM_CHANNEL_3);
 8000646:	2208      	movs	r2, #8
 8000648:	68b9      	ldr	r1, [r7, #8]
 800064a:	68f8      	ldr	r0, [r7, #12]
 800064c:	f7ff ffa0 	bl	8000590 <_ZN9ServoCtrl8_stopPWMER17TIM_HandleTypeDefm>
		_stopPWM(htim2, TIM_CHANNEL_4);
 8000650:	220c      	movs	r2, #12
 8000652:	68b9      	ldr	r1, [r7, #8]
 8000654:	68f8      	ldr	r0, [r7, #12]
 8000656:	f7ff ff9b 	bl	8000590 <_ZN9ServoCtrl8_stopPWMER17TIM_HandleTypeDefm>
		_stopPWM(htim3, TIM_CHANNEL_1);
 800065a:	2200      	movs	r2, #0
 800065c:	6879      	ldr	r1, [r7, #4]
 800065e:	68f8      	ldr	r0, [r7, #12]
 8000660:	f7ff ff96 	bl	8000590 <_ZN9ServoCtrl8_stopPWMER17TIM_HandleTypeDefm>
		_stopPWM(htim3, TIM_CHANNEL_2);
 8000664:	2204      	movs	r2, #4
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	68f8      	ldr	r0, [r7, #12]
 800066a:	f7ff ff91 	bl	8000590 <_ZN9ServoCtrl8_stopPWMER17TIM_HandleTypeDefm>
		_stopPWM(htim3, TIM_CHANNEL_3);
 800066e:	2208      	movs	r2, #8
 8000670:	6879      	ldr	r1, [r7, #4]
 8000672:	68f8      	ldr	r0, [r7, #12]
 8000674:	f7ff ff8c 	bl	8000590 <_ZN9ServoCtrl8_stopPWMER17TIM_HandleTypeDefm>
		_stopPWM(htim3, TIM_CHANNEL_4);
 8000678:	220c      	movs	r2, #12
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f7ff ff87 	bl	8000590 <_ZN9ServoCtrl8_stopPWMER17TIM_HandleTypeDefm>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000688:	4821      	ldr	r0, [pc, #132]	; (8000710 <_ZN9ServoCtrl9updatePWMER17TIM_HandleTypeDefS1_+0xf8>)
 800068a:	f002 f824 	bl	80026d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000694:	481e      	ldr	r0, [pc, #120]	; (8000710 <_ZN9ServoCtrl9updatePWMER17TIM_HandleTypeDefS1_+0xf8>)
 8000696:	f002 f81e 	bl	80026d6 <HAL_GPIO_WritePin>
		break;
 800069a:	e034      	b.n	8000706 <_ZN9ServoCtrl9updatePWMER17TIM_HandleTypeDefS1_+0xee>
		_startPWM(htim2,TIM_CHANNEL_1);
 800069c:	2200      	movs	r2, #0
 800069e:	68b9      	ldr	r1, [r7, #8]
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f7ff ff4f 	bl	8000544 <_ZN9ServoCtrl9_startPWMER17TIM_HandleTypeDefm>
		_startPWM(htim2,TIM_CHANNEL_2);
 80006a6:	2204      	movs	r2, #4
 80006a8:	68b9      	ldr	r1, [r7, #8]
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f7ff ff4a 	bl	8000544 <_ZN9ServoCtrl9_startPWMER17TIM_HandleTypeDefm>
		_startPWM(htim2,TIM_CHANNEL_3);
 80006b0:	2208      	movs	r2, #8
 80006b2:	68b9      	ldr	r1, [r7, #8]
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff ff45 	bl	8000544 <_ZN9ServoCtrl9_startPWMER17TIM_HandleTypeDefm>
		_startPWM(htim2,TIM_CHANNEL_4);
 80006ba:	220c      	movs	r2, #12
 80006bc:	68b9      	ldr	r1, [r7, #8]
 80006be:	68f8      	ldr	r0, [r7, #12]
 80006c0:	f7ff ff40 	bl	8000544 <_ZN9ServoCtrl9_startPWMER17TIM_HandleTypeDefm>
		_startPWM(htim3,TIM_CHANNEL_1);
 80006c4:	2200      	movs	r2, #0
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	68f8      	ldr	r0, [r7, #12]
 80006ca:	f7ff ff3b 	bl	8000544 <_ZN9ServoCtrl9_startPWMER17TIM_HandleTypeDefm>
		_startPWM(htim3,TIM_CHANNEL_2);
 80006ce:	2204      	movs	r2, #4
 80006d0:	6879      	ldr	r1, [r7, #4]
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	f7ff ff36 	bl	8000544 <_ZN9ServoCtrl9_startPWMER17TIM_HandleTypeDefm>
		_startPWM(htim3,TIM_CHANNEL_3);
 80006d8:	2208      	movs	r2, #8
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	f7ff ff31 	bl	8000544 <_ZN9ServoCtrl9_startPWMER17TIM_HandleTypeDefm>
		_startPWM(htim3,TIM_CHANNEL_4);
 80006e2:	220c      	movs	r2, #12
 80006e4:	6879      	ldr	r1, [r7, #4]
 80006e6:	68f8      	ldr	r0, [r7, #12]
 80006e8:	f7ff ff2c 	bl	8000544 <_ZN9ServoCtrl9_startPWMER17TIM_HandleTypeDefm>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f2:	4807      	ldr	r0, [pc, #28]	; (8000710 <_ZN9ServoCtrl9updatePWMER17TIM_HandleTypeDefS1_+0xf8>)
 80006f4:	f001 ffef 	bl	80026d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <_ZN9ServoCtrl9updatePWMER17TIM_HandleTypeDefS1_+0xf8>)
 8000700:	f001 ffe9 	bl	80026d6 <HAL_GPIO_WritePin>
		break;
 8000704:	bf00      	nop
	}
}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40010c00 	.word	0x40010c00

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000718:	f000 fe3a 	bl	8001390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071c:	f000 f80f 	bl	800073e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000720:	f000 f9e0 	bl	8000ae4 <MX_GPIO_Init>
  MX_CAN_Init();
 8000724:	f000 f850 	bl	80007c8 <MX_CAN_Init>
  MX_TIM2_Init();
 8000728:	f000 f884 	bl	8000834 <MX_TIM2_Init>
  MX_TIM3_Init();
 800072c:	f000 f918 	bl	8000960 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000730:	f000 f9ae 	bl	8000a90 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
main_cpp();
 8000734:	f000 fdc0 	bl	80012b8 <main_cpp>
 8000738:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  }
  /* USER CODE END 3 */
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}

0800073e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b090      	sub	sp, #64	; 0x40
 8000742:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000744:	f107 0318 	add.w	r3, r7, #24
 8000748:	2228      	movs	r2, #40	; 0x28
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f003 fb1b 	bl	8003d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2301      	movs	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000768:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076e:	2301      	movs	r3, #1
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800077c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000780:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0318 	add.w	r3, r7, #24
 8000786:	4618      	mov	r0, r3
 8000788:	f001 ffd6 	bl	8002738 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000792:	f000 fa21 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2102      	movs	r1, #2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fa43 	bl	8002c3c <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007bc:	f000 fa0c 	bl	8000bd8 <Error_Handler>
  }
}
 80007c0:	bf00      	nop
 80007c2:	3740      	adds	r7, #64	; 0x40
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_CAN_Init+0x64>)
 80007ce:	4a18      	ldr	r2, [pc, #96]	; (8000830 <MX_CAN_Init+0x68>)
 80007d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_CAN_Init+0x64>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_CAN_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_CAN_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_CAN_Init+0x64>)
 80007e6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80007ea:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_CAN_Init+0x64>)
 80007ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007f2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <MX_CAN_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_CAN_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_CAN_Init+0x64>)
 8000802:	2201      	movs	r2, #1
 8000804:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_CAN_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <MX_CAN_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_CAN_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_CAN_Init+0x64>)
 800081a:	f000 fe3f 	bl	800149c <HAL_CAN_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000824:	f000 f9d8 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000028 	.word	0x20000028
 8000830:	40006400 	.word	0x40006400

08000834 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08e      	sub	sp, #56	; 0x38
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000864:	4b3d      	ldr	r3, [pc, #244]	; (800095c <MX_TIM2_Init+0x128>)
 8000866:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 800086c:	4b3b      	ldr	r3, [pc, #236]	; (800095c <MX_TIM2_Init+0x128>)
 800086e:	2202      	movs	r2, #2
 8000870:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000872:	4b3a      	ldr	r3, [pc, #232]	; (800095c <MX_TIM2_Init+0x128>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999;
 8000878:	4b38      	ldr	r3, [pc, #224]	; (800095c <MX_TIM2_Init+0x128>)
 800087a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800087e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000880:	4b36      	ldr	r3, [pc, #216]	; (800095c <MX_TIM2_Init+0x128>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b35      	ldr	r3, [pc, #212]	; (800095c <MX_TIM2_Init+0x128>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800088c:	4833      	ldr	r0, [pc, #204]	; (800095c <MX_TIM2_Init+0x128>)
 800088e:	f002 fb63 	bl	8002f58 <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000898:	f000 f99e 	bl	8000bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a6:	4619      	mov	r1, r3
 80008a8:	482c      	ldr	r0, [pc, #176]	; (800095c <MX_TIM2_Init+0x128>)
 80008aa:	f002 fdc5 	bl	8003438 <HAL_TIM_ConfigClockSource>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008b4:	f000 f990 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008b8:	4828      	ldr	r0, [pc, #160]	; (800095c <MX_TIM2_Init+0x128>)
 80008ba:	f002 fb9c 	bl	8002ff6 <HAL_TIM_PWM_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80008c4:	f000 f988 	bl	8000bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d0:	f107 0320 	add.w	r3, r7, #32
 80008d4:	4619      	mov	r1, r3
 80008d6:	4821      	ldr	r0, [pc, #132]	; (800095c <MX_TIM2_Init+0x128>)
 80008d8:	f003 f91a 	bl	8003b10 <HAL_TIMEx_MasterConfigSynchronization>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80008e2:	f000 f979 	bl	8000bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e6:	2360      	movs	r3, #96	; 0x60
 80008e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	4619      	mov	r1, r3
 80008fc:	4817      	ldr	r0, [pc, #92]	; (800095c <MX_TIM2_Init+0x128>)
 80008fe:	f002 fcd9 	bl	80032b4 <HAL_TIM_PWM_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000908:	f000 f966 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2204      	movs	r2, #4
 8000910:	4619      	mov	r1, r3
 8000912:	4812      	ldr	r0, [pc, #72]	; (800095c <MX_TIM2_Init+0x128>)
 8000914:	f002 fcce 	bl	80032b4 <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800091e:	f000 f95b 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2208      	movs	r2, #8
 8000926:	4619      	mov	r1, r3
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_TIM2_Init+0x128>)
 800092a:	f002 fcc3 	bl	80032b4 <HAL_TIM_PWM_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000934:	f000 f950 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	220c      	movs	r2, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4807      	ldr	r0, [pc, #28]	; (800095c <MX_TIM2_Init+0x128>)
 8000940:	f002 fcb8 	bl	80032b4 <HAL_TIM_PWM_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800094a:	f000 f945 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800094e:	4803      	ldr	r0, [pc, #12]	; (800095c <MX_TIM2_Init+0x128>)
 8000950:	f000 fa12 	bl	8000d78 <HAL_TIM_MspPostInit>

}
 8000954:	bf00      	nop
 8000956:	3738      	adds	r7, #56	; 0x38
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000050 	.word	0x20000050

08000960 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	; 0x38
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
 800098c:	615a      	str	r2, [r3, #20]
 800098e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000990:	4b3d      	ldr	r3, [pc, #244]	; (8000a88 <MX_TIM3_Init+0x128>)
 8000992:	4a3e      	ldr	r2, [pc, #248]	; (8000a8c <MX_TIM3_Init+0x12c>)
 8000994:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 8000996:	4b3c      	ldr	r3, [pc, #240]	; (8000a88 <MX_TIM3_Init+0x128>)
 8000998:	2202      	movs	r2, #2
 800099a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <MX_TIM3_Init+0x128>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80009a2:	4b39      	ldr	r3, [pc, #228]	; (8000a88 <MX_TIM3_Init+0x128>)
 80009a4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80009a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009aa:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <MX_TIM3_Init+0x128>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <MX_TIM3_Init+0x128>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009b6:	4834      	ldr	r0, [pc, #208]	; (8000a88 <MX_TIM3_Init+0x128>)
 80009b8:	f002 face 	bl	8002f58 <HAL_TIM_Base_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80009c2:	f000 f909 	bl	8000bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d0:	4619      	mov	r1, r3
 80009d2:	482d      	ldr	r0, [pc, #180]	; (8000a88 <MX_TIM3_Init+0x128>)
 80009d4:	f002 fd30 	bl	8003438 <HAL_TIM_ConfigClockSource>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80009de:	f000 f8fb 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009e2:	4829      	ldr	r0, [pc, #164]	; (8000a88 <MX_TIM3_Init+0x128>)
 80009e4:	f002 fb07 	bl	8002ff6 <HAL_TIM_PWM_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80009ee:	f000 f8f3 	bl	8000bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	4619      	mov	r1, r3
 8000a00:	4821      	ldr	r0, [pc, #132]	; (8000a88 <MX_TIM3_Init+0x128>)
 8000a02:	f003 f885 	bl	8003b10 <HAL_TIMEx_MasterConfigSynchronization>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a0c:	f000 f8e4 	bl	8000bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a10:	2360      	movs	r3, #96	; 0x60
 8000a12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2200      	movs	r2, #0
 8000a24:	4619      	mov	r1, r3
 8000a26:	4818      	ldr	r0, [pc, #96]	; (8000a88 <MX_TIM3_Init+0x128>)
 8000a28:	f002 fc44 	bl	80032b4 <HAL_TIM_PWM_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a32:	f000 f8d1 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2204      	movs	r2, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4812      	ldr	r0, [pc, #72]	; (8000a88 <MX_TIM3_Init+0x128>)
 8000a3e:	f002 fc39 	bl	80032b4 <HAL_TIM_PWM_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000a48:	f000 f8c6 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2208      	movs	r2, #8
 8000a50:	4619      	mov	r1, r3
 8000a52:	480d      	ldr	r0, [pc, #52]	; (8000a88 <MX_TIM3_Init+0x128>)
 8000a54:	f002 fc2e 	bl	80032b4 <HAL_TIM_PWM_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000a5e:	f000 f8bb 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	220c      	movs	r2, #12
 8000a66:	4619      	mov	r1, r3
 8000a68:	4807      	ldr	r0, [pc, #28]	; (8000a88 <MX_TIM3_Init+0x128>)
 8000a6a:	f002 fc23 	bl	80032b4 <HAL_TIM_PWM_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000a74:	f000 f8b0 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <MX_TIM3_Init+0x128>)
 8000a7a:	f000 f97d 	bl	8000d78 <HAL_TIM_MspPostInit>

}
 8000a7e:	bf00      	nop
 8000a80:	3738      	adds	r7, #56	; 0x38
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000098 	.word	0x20000098
 8000a8c:	40000400 	.word	0x40000400

08000a90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_USART1_UART_Init+0x50>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ac8:	f003 f880 	bl	8003bcc <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ad2:	f000 f881 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000e0 	.word	0x200000e0
 8000ae0:	40013800 	.word	0x40013800

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af8:	4b33      	ldr	r3, [pc, #204]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a32      	ldr	r2, [pc, #200]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000afe:	f043 0320 	orr.w	r3, r3, #32
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0320 	and.w	r3, r3, #32
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a2c      	ldr	r2, [pc, #176]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0304 	and.w	r3, r3, #4
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a26      	ldr	r2, [pc, #152]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b2e:	f043 0308 	orr.w	r3, r3, #8
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0308 	and.w	r3, r3, #8
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000b46:	4821      	ldr	r0, [pc, #132]	; (8000bcc <MX_GPIO_Init+0xe8>)
 8000b48:	f001 fdc5 	bl	80026d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b52:	481f      	ldr	r0, [pc, #124]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000b54:	f001 fdbf 	bl	80026d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 8000b58:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4816      	ldr	r0, [pc, #88]	; (8000bcc <MX_GPIO_Init+0xe8>)
 8000b72:	f001 fc15 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMS_Pin */
  GPIO_InitStruct.Pin = EMS_Pin;
 8000b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_GPIO_Init+0xf0>)
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4810      	ldr	r0, [pc, #64]	; (8000bcc <MX_GPIO_Init+0xe8>)
 8000b8c:	f001 fc08 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_CAN_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin;
 8000b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_CAN_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <MX_GPIO_Init+0xec>)
 8000baa:	f001 fbf9 	bl	80023a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2028      	movs	r0, #40	; 0x28
 8000bb4:	f001 fbbd 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bb8:	2028      	movs	r0, #40	; 0x28
 8000bba:	f001 fbd6 	bl	800236a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010c00 	.word	0x40010c00
 8000bd0:	40010800 	.word	0x40010800
 8000bd4:	10310000 	.word	0x10310000

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <Error_Handler+0x8>
	...

08000be4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6193      	str	r3, [r2, #24]
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_MspInit+0x5c>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	61d3      	str	r3, [r2, #28]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x5c>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_MspInit+0x60>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_MspInit+0x60>)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010000 	.word	0x40010000

08000c48 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a29      	ldr	r2, [pc, #164]	; (8000d08 <HAL_CAN_MspInit+0xc0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d14b      	bne.n	8000d00 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c68:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <HAL_CAN_MspInit+0xc4>)
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	4a27      	ldr	r2, [pc, #156]	; (8000d0c <HAL_CAN_MspInit+0xc4>)
 8000c6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c72:	61d3      	str	r3, [r2, #28]
 8000c74:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <HAL_CAN_MspInit+0xc4>)
 8000c76:	69db      	ldr	r3, [r3, #28]
 8000c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c80:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <HAL_CAN_MspInit+0xc4>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a21      	ldr	r2, [pc, #132]	; (8000d0c <HAL_CAN_MspInit+0xc4>)
 8000c86:	f043 0308 	orr.w	r3, r3, #8
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_CAN_MspInit+0xc4>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0308 	and.w	r3, r3, #8
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	4818      	ldr	r0, [pc, #96]	; (8000d10 <HAL_CAN_MspInit+0xc8>)
 8000cae:	f001 fb77 	bl	80023a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4812      	ldr	r0, [pc, #72]	; (8000d10 <HAL_CAN_MspInit+0xc8>)
 8000cc8:	f001 fb6a 	bl	80023a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_CAN_MspInit+0xcc>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_CAN_MspInit+0xcc>)
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cee:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	2014      	movs	r0, #20
 8000cf6:	f001 fb1c 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000cfa:	2014      	movs	r0, #20
 8000cfc:	f001 fb35 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40006400 	.word	0x40006400
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	40010000 	.word	0x40010000

08000d18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d28:	d10c      	bne.n	8000d44 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_TIM_Base_MspInit+0x58>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <HAL_TIM_Base_MspInit+0x58>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	61d3      	str	r3, [r2, #28]
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_TIM_Base_MspInit+0x58>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d42:	e010      	b.n	8000d66 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_TIM_Base_MspInit+0x5c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d10b      	bne.n	8000d66 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_TIM_Base_MspInit+0x58>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_TIM_Base_MspInit+0x58>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_TIM_Base_MspInit+0x58>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40000400 	.word	0x40000400

08000d78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0318 	add.w	r3, r7, #24
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d96:	d118      	bne.n	8000dca <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <HAL_TIM_MspPostInit+0xc4>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <HAL_TIM_MspPostInit+0xc4>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <HAL_TIM_MspPostInit+0xc4>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f003 0304 	and.w	r3, r3, #4
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000db0:	230f      	movs	r3, #15
 8000db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2302      	movs	r3, #2
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0318 	add.w	r3, r7, #24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	481f      	ldr	r0, [pc, #124]	; (8000e40 <HAL_TIM_MspPostInit+0xc8>)
 8000dc4:	f001 faec 	bl	80023a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000dc8:	e034      	b.n	8000e34 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <HAL_TIM_MspPostInit+0xcc>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d12f      	bne.n	8000e34 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_TIM_MspPostInit+0xc4>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <HAL_TIM_MspPostInit+0xc4>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_TIM_MspPostInit+0xc4>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <HAL_TIM_MspPostInit+0xc4>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <HAL_TIM_MspPostInit+0xc4>)
 8000df2:	f043 0308 	orr.w	r3, r3, #8
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <HAL_TIM_MspPostInit+0xc4>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f003 0308 	and.w	r3, r3, #8
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e04:	23c0      	movs	r3, #192	; 0xc0
 8000e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0318 	add.w	r3, r7, #24
 8000e14:	4619      	mov	r1, r3
 8000e16:	480a      	ldr	r0, [pc, #40]	; (8000e40 <HAL_TIM_MspPostInit+0xc8>)
 8000e18:	f001 fac2 	bl	80023a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2302      	movs	r3, #2
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 0318 	add.w	r3, r7, #24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <HAL_TIM_MspPostInit+0xd0>)
 8000e30:	f001 fab6 	bl	80023a0 <HAL_GPIO_Init>
}
 8000e34:	bf00      	nop
 8000e36:	3728      	adds	r7, #40	; 0x28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010800 	.word	0x40010800
 8000e44:	40000400 	.word	0x40000400
 8000e48:	40010c00 	.word	0x40010c00

08000e4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <HAL_UART_MspInit+0xa4>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d13d      	bne.n	8000ee8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <HAL_UART_MspInit+0xa8>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a20      	ldr	r2, [pc, #128]	; (8000ef4 <HAL_UART_MspInit+0xa8>)
 8000e72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <HAL_UART_MspInit+0xa8>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <HAL_UART_MspInit+0xa8>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a1a      	ldr	r2, [pc, #104]	; (8000ef4 <HAL_UART_MspInit+0xa8>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_UART_MspInit+0xa8>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e9c:	2340      	movs	r3, #64	; 0x40
 8000e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <HAL_UART_MspInit+0xac>)
 8000eb0:	f001 fa76 	bl	80023a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <HAL_UART_MspInit+0xac>)
 8000ec8:	f001 fa6a 	bl	80023a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_UART_MspInit+0xb0>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee2:	4a06      	ldr	r2, [pc, #24]	; (8000efc <HAL_UART_MspInit+0xb0>)
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3728      	adds	r7, #40	; 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40013800 	.word	0x40013800
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010c00 	.word	0x40010c00
 8000efc:	40010000 	.word	0x40010000

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f46:	f000 fa69 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f56:	f000 fef2 	bl	8001d3e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000028 	.word	0x20000028

08000f64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMS_Pin);
 8000f68:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f6c:	f001 fbcc 	bl	8002708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <_ZN3led4initEv>:
#include <main.h>

namespace led{
inline void init(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<3;i++){
 8000f86:	2300      	movs	r3, #0
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	e02f      	b.n	8000fec <_ZN3led4initEv+0x6c>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f92:	481d      	ldr	r0, [pc, #116]	; (8001008 <_ZN3led4initEv+0x88>)
 8000f94:	f001 fb9f 	bl	80026d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9e:	481a      	ldr	r0, [pc, #104]	; (8001008 <_ZN3led4initEv+0x88>)
 8000fa0:	f001 fb99 	bl	80026d6 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000fa4:	2064      	movs	r0, #100	; 0x64
 8000fa6:	f000 fa55 	bl	8001454 <HAL_Delay>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fb0:	4815      	ldr	r0, [pc, #84]	; (8001008 <_ZN3led4initEv+0x88>)
 8000fb2:	f001 fb90 	bl	80026d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbc:	4812      	ldr	r0, [pc, #72]	; (8001008 <_ZN3led4initEv+0x88>)
 8000fbe:	f001 fb8a 	bl	80026d6 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f000 fa46 	bl	8001454 <HAL_Delay>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fce:	480e      	ldr	r0, [pc, #56]	; (8001008 <_ZN3led4initEv+0x88>)
 8000fd0:	f001 fb81 	bl	80026d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <_ZN3led4initEv+0x88>)
 8000fdc:	f001 fb7b 	bl	80026d6 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000fe0:	2064      	movs	r0, #100	; 0x64
 8000fe2:	f000 fa37 	bl	8001454 <HAL_Delay>
	for(uint8_t i=0;i<3;i++){
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d9cc      	bls.n	8000f8c <_ZN3led4initEv+0xc>
	}
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <_ZN3led4initEv+0x88>)
 8000ffa:	f001 fb6c 	bl	80026d6 <HAL_GPIO_WritePin>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40010c00 	.word	0x40010c00

0800100c <_ZN3led6updateERt>:

inline void update(uint16_t &tick){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	tick = HAL_GetTick()%2000;
 8001014:	f000 fa14 	bl	8001440 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <_ZN3led6updateERt+0x50>)
 800101c:	fba3 1302 	umull	r1, r3, r3, r2
 8001020:	09db      	lsrs	r3, r3, #7
 8001022:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001026:	fb01 f303 	mul.w	r3, r1, r3
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b29a      	uxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	801a      	strh	r2, [r3, #0]
	if(tick < 100) HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	2b63      	cmp	r3, #99	; 0x63
 8001038:	d806      	bhi.n	8001048 <_ZN3led6updateERt+0x3c>
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001040:	4807      	ldr	r0, [pc, #28]	; (8001060 <_ZN3led6updateERt+0x54>)
 8001042:	f001 fb48 	bl	80026d6 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
}
 8001046:	e005      	b.n	8001054 <_ZN3led6updateERt+0x48>
	else HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <_ZN3led6updateERt+0x54>)
 8001050:	f001 fb41 	bl	80026d6 <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	10624dd3 	.word	0x10624dd3
 8001060:	40010c00 	.word	0x40010c00

08001064 <setMode>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;
extern CAN_HandleTypeDef hcan;

//volatile int debug_code = 0;
	bool setMode(uint8_t mode){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
			switch(mode){
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <setMode+0x16>
 8001074:	2b01      	cmp	r3, #1
 8001076:	d006      	beq.n	8001086 <setMode+0x22>
 8001078:	e00b      	b.n	8001092 <setMode+0x2e>
			case 0:
				servo.setMode(Mode::dis);
 800107a:	2100      	movs	r1, #0
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <setMode+0x38>)
 800107e:	f7ff fa18 	bl	80004b2 <_ZN9ServoCtrl7setModeE4Mode>
				return true;
 8001082:	2301      	movs	r3, #1
 8001084:	e006      	b.n	8001094 <setMode+0x30>
			case 1:
				servo.setMode(Mode::pos);
 8001086:	2101      	movs	r1, #1
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <setMode+0x38>)
 800108a:	f7ff fa12 	bl	80004b2 <_ZN9ServoCtrl7setModeE4Mode>
				return true;
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <setMode+0x30>
			default:
				return false;
 8001092:	2300      	movs	r3, #0
			}
	}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000128 	.word	0x20000128

080010a0 <HAL_CAN_RxFifo0MsgPendingCallback>:

	void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b094      	sub	sp, #80	; 0x50
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	6078      	str	r0, [r7, #4]
		uint32_t receiveID = 0x110;
 80010a8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80010ac:	647b      	str	r3, [r7, #68]	; 0x44
		uint8_t receiveData[8] = {0,0,0,0,0,0,0,0};
 80010ae:	4a65      	ldr	r2, [pc, #404]	; (8001244 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80010b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010b8:	e883 0003 	stmia.w	r3, {r0, r1}
		if (can.receive(*hcan ,receiveID,receiveData) == false)return;
 80010bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010c0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	4860      	ldr	r0, [pc, #384]	; (8001248 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80010c8:	f7ff f8bb 	bl	8000242 <_ZN7CanCtrl7receiveER19__CAN_HandleTypeDefRmRA8_h>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf0c      	ite	eq
 80010d2:	2301      	moveq	r3, #1
 80010d4:	2300      	movne	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f040 80ad 	bne.w	8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>
		switch(receiveID-= can.getBaseID()){
 80010de:	485a      	ldr	r0, [pc, #360]	; (8001248 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80010e0:	f7ff f8a4 	bl	800022c <_ZN7CanCtrl9getBaseIDEv>
 80010e4:	4602      	mov	r2, r0
 80010e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010e8:	1a9b      	subs	r3, r3, r2
 80010ea:	647b      	str	r3, [r7, #68]	; 0x44
 80010ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d066      	beq.n	80011c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	f200 8093 	bhi.w	800121e <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d02f      	beq.n	8001160 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>
 8001100:	e08d      	b.n	800121e <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
			case 0x0:
				if(setMode(receiveData[0]) == true){
 8001102:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ffac 	bl	8001064 <setMode>
 800110c:	4603      	mov	r3, r0
 800110e:	2b01      	cmp	r3, #1
 8001110:	bf0c      	ite	eq
 8001112:	2301      	moveq	r3, #1
 8001114:	2300      	movne	r3, #0
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d010      	beq.n	800113e <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
//					debug_code = 1;
					uint8_t data[8];
					data[0] = 1;
 800111c:	2301      	movs	r3, #1
 800111e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					can.send(*hcan, can.getBaseID()+3, data, 1);
 8001122:	4849      	ldr	r0, [pc, #292]	; (8001248 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8001124:	f7ff f882 	bl	800022c <_ZN7CanCtrl9getBaseIDEv>
 8001128:	4603      	mov	r3, r0
 800112a:	1cda      	adds	r2, r3, #3
 800112c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001130:	2101      	movs	r1, #1
 8001132:	9100      	str	r1, [sp, #0]
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	4844      	ldr	r0, [pc, #272]	; (8001248 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8001138:	f7ff f8ba 	bl	80002b0 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh>
				}else{
					uint8_t data[8];
					data[0] = 0;
					can.send(*hcan, can.getBaseID()+3, data, 1);
				}
				break;
 800113c:	e07f      	b.n	800123e <HAL_CAN_RxFifo0MsgPendingCallback+0x19e>
					data[0] = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					can.send(*hcan, can.getBaseID()+3, data, 1);
 8001144:	4840      	ldr	r0, [pc, #256]	; (8001248 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8001146:	f7ff f871 	bl	800022c <_ZN7CanCtrl9getBaseIDEv>
 800114a:	4603      	mov	r3, r0
 800114c:	1cda      	adds	r2, r3, #3
 800114e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001152:	2101      	movs	r1, #1
 8001154:	9100      	str	r1, [sp, #0]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	483b      	ldr	r0, [pc, #236]	; (8001248 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800115a:	f7ff f8a9 	bl	80002b0 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh>
				break;
 800115e:	e06e      	b.n	800123e <HAL_CAN_RxFifo0MsgPendingCallback+0x19e>
			case 0x1:
				if(servo.setDuty(htim2 ,receiveData) == true){
 8001160:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001164:	461a      	mov	r2, r3
 8001166:	4939      	ldr	r1, [pc, #228]	; (800124c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001168:	4839      	ldr	r0, [pc, #228]	; (8001250 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 800116a:	f7ff f921 	bl	80003b0 <_ZN9ServoCtrl7setDutyER17TIM_HandleTypeDefPh>
 800116e:	4603      	mov	r3, r0
 8001170:	2b01      	cmp	r3, #1
 8001172:	bf0c      	ite	eq
 8001174:	2301      	moveq	r3, #1
 8001176:	2300      	movne	r3, #0
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d010      	beq.n	80011a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
					uint8_t data[8];
					data[0] = 3;
 800117e:	2303      	movs	r3, #3
 8001180:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					can.send(*hcan, can.getBaseID()+3, data, 1);
 8001184:	4830      	ldr	r0, [pc, #192]	; (8001248 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8001186:	f7ff f851 	bl	800022c <_ZN7CanCtrl9getBaseIDEv>
 800118a:	4603      	mov	r3, r0
 800118c:	1cda      	adds	r2, r3, #3
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	2101      	movs	r1, #1
 8001194:	9100      	str	r1, [sp, #0]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	482b      	ldr	r0, [pc, #172]	; (8001248 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800119a:	f7ff f889 	bl	80002b0 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh>
				}else{
					uint8_t data[8];
					data[0] = 2;
					can.send(*hcan, can.getBaseID()+3, data, 1);
				}
				break;
 800119e:	e04e      	b.n	800123e <HAL_CAN_RxFifo0MsgPendingCallback+0x19e>
					data[0] = 2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	773b      	strb	r3, [r7, #28]
					can.send(*hcan, can.getBaseID()+3, data, 1);
 80011a4:	4828      	ldr	r0, [pc, #160]	; (8001248 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80011a6:	f7ff f841 	bl	800022c <_ZN7CanCtrl9getBaseIDEv>
 80011aa:	4603      	mov	r3, r0
 80011ac:	1cda      	adds	r2, r3, #3
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	2101      	movs	r1, #1
 80011b4:	9100      	str	r1, [sp, #0]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4823      	ldr	r0, [pc, #140]	; (8001248 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80011ba:	f7ff f879 	bl	80002b0 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh>
				break;
 80011be:	e03e      	b.n	800123e <HAL_CAN_RxFifo0MsgPendingCallback+0x19e>
			case 0x2:
				if(servo.setDuty(htim3 ,receiveData) == true){
 80011c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011c4:	461a      	mov	r2, r3
 80011c6:	4923      	ldr	r1, [pc, #140]	; (8001254 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 80011c8:	4821      	ldr	r0, [pc, #132]	; (8001250 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 80011ca:	f7ff f8f1 	bl	80003b0 <_ZN9ServoCtrl7setDutyER17TIM_HandleTypeDefPh>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00f      	beq.n	80011fe <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
					uint8_t data[8];
					data[0] = 5;
 80011de:	2305      	movs	r3, #5
 80011e0:	753b      	strb	r3, [r7, #20]
					can.send(*hcan, can.getBaseID()+3, data, 1);
 80011e2:	4819      	ldr	r0, [pc, #100]	; (8001248 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80011e4:	f7ff f822 	bl	800022c <_ZN7CanCtrl9getBaseIDEv>
 80011e8:	4603      	mov	r3, r0
 80011ea:	1cda      	adds	r2, r3, #3
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2101      	movs	r1, #1
 80011f2:	9100      	str	r1, [sp, #0]
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	4814      	ldr	r0, [pc, #80]	; (8001248 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80011f8:	f7ff f85a 	bl	80002b0 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh>
				}else{
					uint8_t data[8];
					data[0] = 4;
					can.send(*hcan, can.getBaseID()+3, data, 1);
				}
				break;
 80011fc:	e01f      	b.n	800123e <HAL_CAN_RxFifo0MsgPendingCallback+0x19e>
					data[0] = 4;
 80011fe:	2304      	movs	r3, #4
 8001200:	733b      	strb	r3, [r7, #12]
					can.send(*hcan, can.getBaseID()+3, data, 1);
 8001202:	4811      	ldr	r0, [pc, #68]	; (8001248 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8001204:	f7ff f812 	bl	800022c <_ZN7CanCtrl9getBaseIDEv>
 8001208:	4603      	mov	r3, r0
 800120a:	1cda      	adds	r2, r3, #3
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2101      	movs	r1, #1
 8001212:	9100      	str	r1, [sp, #0]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8001218:	f7ff f84a 	bl	80002b0 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh>
				break;
 800121c:	e00f      	b.n	800123e <HAL_CAN_RxFifo0MsgPendingCallback+0x19e>
			default:
				if(receiveID == 0x0){
 800121e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10b      	bne.n	800123c <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
					if(receiveData[0] == 0){
 8001224:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001228:	2b00      	cmp	r3, #0
 800122a:	d107      	bne.n	800123c <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
						servo.reset(htim2, htim3);
 800122c:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 800122e:	4907      	ldr	r1, [pc, #28]	; (800124c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001230:	4807      	ldr	r0, [pc, #28]	; (8001250 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8001232:	f7ff f94b 	bl	80004cc <_ZN9ServoCtrl5resetER17TIM_HandleTypeDefS1_>
					}
				}
				break;
 8001236:	e001      	b.n	800123c <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
		if (can.receive(*hcan ,receiveID,receiveData) == false)return;
 8001238:	bf00      	nop
 800123a:	e000      	b.n	800123e <HAL_CAN_RxFifo0MsgPendingCallback+0x19e>
				break;
 800123c:	bf00      	nop
			}
	}
 800123e:	3748      	adds	r7, #72	; 0x48
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	08003df8 	.word	0x08003df8
 8001248:	2000013c 	.word	0x2000013c
 800124c:	20000050 	.word	0x20000050
 8001250:	20000128 	.word	0x20000128
 8001254:	20000098 	.word	0x20000098

08001258 <HAL_GPIO_EXTI_Callback>:

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
		if (!(GPIO_Pin == EMS_Pin))return;
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001268:	d11a      	bne.n	80012a0 <HAL_GPIO_EXTI_Callback+0x48>
		if (servo.reset(htim2 ,htim3) == true){
 800126a:	4a0f      	ldr	r2, [pc, #60]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x50>)
 800126c:	490f      	ldr	r1, [pc, #60]	; (80012ac <HAL_GPIO_EXTI_Callback+0x54>)
 800126e:	4810      	ldr	r0, [pc, #64]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001270:	f7ff f92c 	bl	80004cc <_ZN9ServoCtrl5resetER17TIM_HandleTypeDefS1_>
 8001274:	4603      	mov	r3, r0
 8001276:	2b01      	cmp	r3, #1
 8001278:	bf0c      	ite	eq
 800127a:	2301      	moveq	r3, #1
 800127c:	2300      	movne	r3, #0
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d006      	beq.n	8001292 <HAL_GPIO_EXTI_Callback+0x3a>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128a:	480a      	ldr	r0, [pc, #40]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800128c:	f001 fa23 	bl	80026d6 <HAL_GPIO_WritePin>
 8001290:	e007      	b.n	80012a2 <HAL_GPIO_EXTI_Callback+0x4a>
		}
		else{
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001298:	4806      	ldr	r0, [pc, #24]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800129a:	f001 fa1c 	bl	80026d6 <HAL_GPIO_WritePin>
 800129e:	e000      	b.n	80012a2 <HAL_GPIO_EXTI_Callback+0x4a>
		if (!(GPIO_Pin == EMS_Pin))return;
 80012a0:	bf00      	nop
		}
	}
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000098 	.word	0x20000098
 80012ac:	20000050 	.word	0x20000050
 80012b0:	20000128 	.word	0x20000128
 80012b4:	40010c00 	.word	0x40010c00

080012b8 <main_cpp>:

	void main_cpp(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
		led::init();
 80012be:	f7ff fe5f 	bl	8000f80 <_ZN3led4initEv>
		can.init(hcan,0x300);
 80012c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012c6:	490b      	ldr	r1, [pc, #44]	; (80012f4 <main_cpp+0x3c>)
 80012c8:	480b      	ldr	r0, [pc, #44]	; (80012f8 <main_cpp+0x40>)
 80012ca:	f7fe ff81 	bl	80001d0 <_ZN7CanCtrl4initER19__CAN_HandleTypeDefm>
		uint16_t tick = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	80fb      	strh	r3, [r7, #6]

		while(true){
			servo.updateEMS();
 80012d2:	480a      	ldr	r0, [pc, #40]	; (80012fc <main_cpp+0x44>)
 80012d4:	f7ff f982 	bl	80005dc <_ZN9ServoCtrl9updateEMSEv>
			servo.updatePWM(htim2 ,htim3);
 80012d8:	4a09      	ldr	r2, [pc, #36]	; (8001300 <main_cpp+0x48>)
 80012da:	490a      	ldr	r1, [pc, #40]	; (8001304 <main_cpp+0x4c>)
 80012dc:	4807      	ldr	r0, [pc, #28]	; (80012fc <main_cpp+0x44>)
 80012de:	f7ff f99b 	bl	8000618 <_ZN9ServoCtrl9updatePWMER17TIM_HandleTypeDefS1_>
			can.updateLed();
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <main_cpp+0x40>)
 80012e4:	f7ff f81c 	bl	8000320 <_ZN7CanCtrl9updateLedEv>
			led::update(tick);
 80012e8:	1dbb      	adds	r3, r7, #6
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fe8e 	bl	800100c <_ZN3led6updateERt>
			servo.updateEMS();
 80012f0:	e7ef      	b.n	80012d2 <main_cpp+0x1a>
 80012f2:	bf00      	nop
 80012f4:	20000028 	.word	0x20000028
 80012f8:	2000013c 	.word	0x2000013c
 80012fc:	20000128 	.word	0x20000128
 8001300:	20000098 	.word	0x20000098
 8001304:	20000050 	.word	0x20000050

08001308 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
}
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d107      	bne.n	8001328 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800131e:	4293      	cmp	r3, r2
 8001320:	d102      	bne.n	8001328 <_Z41__static_initialization_and_destruction_0ii+0x20>
CanCtrl can;
 8001322:	4803      	ldr	r0, [pc, #12]	; (8001330 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001324:	f7fe ff12 	bl	800014c <_ZN7CanCtrlC1Ev>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000013c 	.word	0x2000013c

08001334 <_GLOBAL__sub_I_servo>:
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
 8001338:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff ffe3 	bl	8001308 <_Z41__static_initialization_and_destruction_0ii>
 8001342:	bd80      	pop	{r7, pc}

08001344 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001344:	f7ff fe16 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800134a:	490c      	ldr	r1, [pc, #48]	; (800137c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800134c:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <LoopFillZerobss+0x16>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a09      	ldr	r2, [pc, #36]	; (8001384 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001360:	4c09      	ldr	r4, [pc, #36]	; (8001388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136e:	f002 fd13 	bl	8003d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001372:	f7ff f9cf 	bl	8000714 <main>
  bx lr
 8001376:	4770      	bx	lr
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001380:	08003e38 	.word	0x08003e38
  ldr r2, =_sbss
 8001384:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001388:	200001b0 	.word	0x200001b0

0800138c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC1_2_IRQHandler>
	...

08001390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HAL_Init+0x28>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <HAL_Init+0x28>)
 800139a:	f043 0310 	orr.w	r3, r3, #16
 800139e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a0:	2003      	movs	r0, #3
 80013a2:	f000 ffbb 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a6:	200f      	movs	r0, #15
 80013a8:	f000 f808 	bl	80013bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ac:	f7ff fc1a 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40022000 	.word	0x40022000

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_InitTick+0x54>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_InitTick+0x58>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 ffd3 	bl	8002386 <HAL_SYSTICK_Config>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00e      	b.n	8001408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d80a      	bhi.n	8001406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f000 ff9b 	bl	8002332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013fc:	4a06      	ldr	r2, [pc, #24]	; (8001418 <HAL_InitTick+0x5c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e000      	b.n	8001408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000000 	.word	0x20000000
 8001414:	20000008 	.word	0x20000008
 8001418:	20000004 	.word	0x20000004

0800141c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_IncTick+0x1c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_IncTick+0x20>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4413      	add	r3, r2
 800142c:	4a03      	ldr	r2, [pc, #12]	; (800143c <HAL_IncTick+0x20>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	20000008 	.word	0x20000008
 800143c:	200001ac 	.word	0x200001ac

08001440 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b02      	ldr	r3, [pc, #8]	; (8001450 <HAL_GetTick+0x10>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	200001ac 	.word	0x200001ac

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff fff0 	bl	8001440 <HAL_GetTick>
 8001460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d005      	beq.n	800147a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_Delay+0x44>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147a:	bf00      	nop
 800147c:	f7ff ffe0 	bl	8001440 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	429a      	cmp	r2, r3
 800148a:	d8f7      	bhi.n	800147c <HAL_Delay+0x28>
  {
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008

0800149c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e0ed      	b.n	800168a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fbc4 	bl	8000c48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d0:	f7ff ffb6 	bl	8001440 <HAL_GetTick>
 80014d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014d6:	e012      	b.n	80014fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014d8:	f7ff ffb2 	bl	8001440 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b0a      	cmp	r3, #10
 80014e4:	d90b      	bls.n	80014fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2205      	movs	r2, #5
 80014f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e0c5      	b.n	800168a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0e5      	beq.n	80014d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0202 	bic.w	r2, r2, #2
 800151a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800151c:	f7ff ff90 	bl	8001440 <HAL_GetTick>
 8001520:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001522:	e012      	b.n	800154a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001524:	f7ff ff8c 	bl	8001440 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b0a      	cmp	r3, #10
 8001530:	d90b      	bls.n	800154a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2205      	movs	r2, #5
 8001542:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e09f      	b.n	800168a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e5      	bne.n	8001524 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7e1b      	ldrb	r3, [r3, #24]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d108      	bne.n	8001572 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	e007      	b.n	8001582 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001580:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7e5b      	ldrb	r3, [r3, #25]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d108      	bne.n	800159c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	e007      	b.n	80015ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7e9b      	ldrb	r3, [r3, #26]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d108      	bne.n	80015c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0220 	orr.w	r2, r2, #32
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e007      	b.n	80015d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0220 	bic.w	r2, r2, #32
 80015d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	7edb      	ldrb	r3, [r3, #27]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d108      	bne.n	80015f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0210 	bic.w	r2, r2, #16
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	e007      	b.n	8001600 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0210 	orr.w	r2, r2, #16
 80015fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7f1b      	ldrb	r3, [r3, #28]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d108      	bne.n	800161a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0208 	orr.w	r2, r2, #8
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e007      	b.n	800162a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0208 	bic.w	r2, r2, #8
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7f5b      	ldrb	r3, [r3, #29]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d108      	bne.n	8001644 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0204 	orr.w	r2, r2, #4
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e007      	b.n	8001654 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0204 	bic.w	r2, r2, #4
 8001652:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	ea42 0103 	orr.w	r1, r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	1e5a      	subs	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001692:	b480      	push	{r7}
 8001694:	b087      	sub	sp, #28
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80016aa:	7cfb      	ldrb	r3, [r7, #19]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d003      	beq.n	80016b8 <HAL_CAN_ConfigFilter+0x26>
 80016b0:	7cfb      	ldrb	r3, [r7, #19]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	f040 80aa 	bne.w	800180c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016be:	f043 0201 	orr.w	r2, r3, #1
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	2201      	movs	r2, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	401a      	ands	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d123      	bne.n	800173a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	401a      	ands	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001714:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3248      	adds	r2, #72	; 0x48
 800171a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800172e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001730:	6979      	ldr	r1, [r7, #20]
 8001732:	3348      	adds	r3, #72	; 0x48
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d122      	bne.n	8001788 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	431a      	orrs	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001762:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3248      	adds	r2, #72	; 0x48
 8001768:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800177c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800177e:	6979      	ldr	r1, [r7, #20]
 8001780:	3348      	adds	r3, #72	; 0x48
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	440b      	add	r3, r1
 8001786:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d109      	bne.n	80017a4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	43db      	mvns	r3, r3
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80017a2:	e007      	b.n	80017b4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d109      	bne.n	80017d0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	401a      	ands	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80017ce:	e007      	b.n	80017e0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	431a      	orrs	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d107      	bne.n	80017f8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	431a      	orrs	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017fe:	f023 0201 	bic.w	r2, r3, #1
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	e006      	b.n	800181a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
  }
}
 800181a:	4618      	mov	r0, r3
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b01      	cmp	r3, #1
 8001836:	d12e      	bne.n	8001896 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2202      	movs	r2, #2
 800183c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0201 	bic.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001850:	f7ff fdf6 	bl	8001440 <HAL_GetTick>
 8001854:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001856:	e012      	b.n	800187e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001858:	f7ff fdf2 	bl	8001440 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b0a      	cmp	r3, #10
 8001864:	d90b      	bls.n	800187e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2205      	movs	r2, #5
 8001876:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e012      	b.n	80018a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1e5      	bne.n	8001858 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e006      	b.n	80018a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
  }
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018ca:	7ffb      	ldrb	r3, [r7, #31]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d003      	beq.n	80018d8 <HAL_CAN_AddTxMessage+0x2c>
 80018d0:	7ffb      	ldrb	r3, [r7, #31]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	f040 80ad 	bne.w	8001a32 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10a      	bne.n	80018f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d105      	bne.n	80018f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 8095 	beq.w	8001a22 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	0e1b      	lsrs	r3, r3, #24
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001902:	2201      	movs	r2, #1
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10d      	bne.n	8001930 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800191e:	68f9      	ldr	r1, [r7, #12]
 8001920:	6809      	ldr	r1, [r1, #0]
 8001922:	431a      	orrs	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3318      	adds	r3, #24
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	440b      	add	r3, r1
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	e00f      	b.n	8001950 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800193a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001940:	68f9      	ldr	r1, [r7, #12]
 8001942:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001944:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3318      	adds	r3, #24
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	440b      	add	r3, r1
 800194e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6819      	ldr	r1, [r3, #0]
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3318      	adds	r3, #24
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	440b      	add	r3, r1
 8001960:	3304      	adds	r3, #4
 8001962:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	7d1b      	ldrb	r3, [r3, #20]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d111      	bne.n	8001990 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3318      	adds	r3, #24
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	4413      	add	r3, r2
 8001978:	3304      	adds	r3, #4
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	6811      	ldr	r1, [r2, #0]
 8001980:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3318      	adds	r3, #24
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	440b      	add	r3, r1
 800198c:	3304      	adds	r3, #4
 800198e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3307      	adds	r3, #7
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	061a      	lsls	r2, r3, #24
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3306      	adds	r3, #6
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	041b      	lsls	r3, r3, #16
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3305      	adds	r3, #5
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	4313      	orrs	r3, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	3204      	adds	r2, #4
 80019b0:	7812      	ldrb	r2, [r2, #0]
 80019b2:	4610      	mov	r0, r2
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	6811      	ldr	r1, [r2, #0]
 80019b8:	ea43 0200 	orr.w	r2, r3, r0
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	440b      	add	r3, r1
 80019c2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80019c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3303      	adds	r3, #3
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	061a      	lsls	r2, r3, #24
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3302      	adds	r3, #2
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	041b      	lsls	r3, r3, #16
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3301      	adds	r3, #1
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	4313      	orrs	r3, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	7812      	ldrb	r2, [r2, #0]
 80019e8:	4610      	mov	r0, r2
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	6811      	ldr	r1, [r2, #0]
 80019ee:	ea43 0200 	orr.w	r2, r3, r0
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	440b      	add	r3, r1
 80019f8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80019fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3318      	adds	r3, #24
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	4413      	add	r3, r2
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	6811      	ldr	r1, [r2, #0]
 8001a10:	f043 0201 	orr.w	r2, r3, #1
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3318      	adds	r3, #24
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	440b      	add	r3, r1
 8001a1c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e00e      	b.n	8001a40 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e006      	b.n	8001a40 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
  }
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3724      	adds	r7, #36	; 0x24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a5e:	7afb      	ldrb	r3, [r7, #11]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d002      	beq.n	8001a6a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001a64:	7afb      	ldrb	r3, [r7, #11]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d11d      	bne.n	8001aa6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b087      	sub	sp, #28
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d003      	beq.n	8001ad6 <HAL_CAN_GetRxMessage+0x24>
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	f040 8103 	bne.w	8001cdc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10e      	bne.n	8001afa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d116      	bne.n	8001b18 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e0f7      	b.n	8001cea <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d107      	bne.n	8001b18 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0e8      	b.n	8001cea <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	331b      	adds	r3, #27
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	4413      	add	r3, r2
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0204 	and.w	r2, r3, #4
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10c      	bne.n	8001b50 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	331b      	adds	r3, #27
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4413      	add	r3, r2
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0d5b      	lsrs	r3, r3, #21
 8001b46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	e00b      	b.n	8001b68 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	331b      	adds	r3, #27
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	4413      	add	r3, r2
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	08db      	lsrs	r3, r3, #3
 8001b60:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	331b      	adds	r3, #27
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	4413      	add	r3, r2
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0202 	and.w	r2, r3, #2
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	331b      	adds	r3, #27
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	4413      	add	r3, r2
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2208      	movs	r2, #8
 8001b9a:	611a      	str	r2, [r3, #16]
 8001b9c:	e00b      	b.n	8001bb6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	331b      	adds	r3, #27
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	4413      	add	r3, r2
 8001baa:	3304      	adds	r3, #4
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 020f 	and.w	r2, r3, #15
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	331b      	adds	r3, #27
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	0a1b      	lsrs	r3, r3, #8
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	331b      	adds	r3, #27
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	4413      	add	r3, r2
 8001bda:	3304      	adds	r3, #4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	0c1b      	lsrs	r3, r3, #16
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	0a1a      	lsrs	r2, r3, #8
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	4413      	add	r3, r2
 8001c20:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	0c1a      	lsrs	r2, r3, #16
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0e1a      	lsrs	r2, r3, #24
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	3303      	adds	r3, #3
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	4413      	add	r3, r2
 8001c54:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0a1a      	lsrs	r2, r3, #8
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	3305      	adds	r3, #5
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	4413      	add	r3, r2
 8001c86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	0c1a      	lsrs	r2, r3, #16
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	3306      	adds	r3, #6
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	0e1a      	lsrs	r2, r3, #24
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	3307      	adds	r3, #7
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d108      	bne.n	8001cc8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0220 	orr.w	r2, r2, #32
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	e007      	b.n	8001cd8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0220 	orr.w	r2, r2, #32
 8001cd6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e006      	b.n	8001cea <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
  }
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d04:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d002      	beq.n	8001d12 <HAL_CAN_ActivateNotification+0x1e>
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d109      	bne.n	8001d26 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6959      	ldr	r1, [r3, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e006      	b.n	8001d34 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
  }
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b08a      	sub	sp, #40	; 0x28
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d07c      	beq.n	8001e7e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d023      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2201      	movs	r2, #1
 8001d94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f983 	bl	80020ac <HAL_CAN_TxMailbox0CompleteCallback>
 8001da6:	e016      	b.n	8001dd6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d004      	beq.n	8001dbc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dba:	e00c      	b.n	8001dd6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d004      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dce:	e002      	b.n	8001dd6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f986 	bl	80020e2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d024      	beq.n	8001e2a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001de8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f962 	bl	80020be <HAL_CAN_TxMailbox1CompleteCallback>
 8001dfa:	e016      	b.n	8001e2a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d004      	beq.n	8001e10 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0e:	e00c      	b.n	8001e2a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d004      	beq.n	8001e24 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	e002      	b.n	8001e2a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f965 	bl	80020f4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d024      	beq.n	8001e7e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f941 	bl	80020d0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e4e:	e016      	b.n	8001e7e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d004      	beq.n	8001e64 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
 8001e62:	e00c      	b.n	8001e7e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d004      	beq.n	8001e78 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
 8001e76:	e002      	b.n	8001e7e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f944 	bl	8002106 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00c      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2210      	movs	r2, #16
 8001ea0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00b      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d006      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2208      	movs	r2, #8
 8001ebc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f92a 	bl	8002118 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d009      	beq.n	8001ee2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff f8df 	bl	80010a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00c      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d007      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2210      	movs	r2, #16
 8001f04:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	f003 0320 	and.w	r3, r3, #32
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00b      	beq.n	8001f28 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2208      	movs	r2, #8
 8001f20:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f90a 	bl	800213c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f8f2 	bl	800212a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00b      	beq.n	8001f68 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d006      	beq.n	8001f68 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2210      	movs	r2, #16
 8001f60:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8f3 	bl	800214e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2208      	movs	r2, #8
 8001f82:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f8eb 	bl	8002160 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d07b      	beq.n	800208c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d072      	beq.n	8002084 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d043      	beq.n	8002084 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002002:	2b00      	cmp	r3, #0
 8002004:	d03e      	beq.n	8002084 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800200c:	2b60      	cmp	r3, #96	; 0x60
 800200e:	d02b      	beq.n	8002068 <HAL_CAN_IRQHandler+0x32a>
 8002010:	2b60      	cmp	r3, #96	; 0x60
 8002012:	d82e      	bhi.n	8002072 <HAL_CAN_IRQHandler+0x334>
 8002014:	2b50      	cmp	r3, #80	; 0x50
 8002016:	d022      	beq.n	800205e <HAL_CAN_IRQHandler+0x320>
 8002018:	2b50      	cmp	r3, #80	; 0x50
 800201a:	d82a      	bhi.n	8002072 <HAL_CAN_IRQHandler+0x334>
 800201c:	2b40      	cmp	r3, #64	; 0x40
 800201e:	d019      	beq.n	8002054 <HAL_CAN_IRQHandler+0x316>
 8002020:	2b40      	cmp	r3, #64	; 0x40
 8002022:	d826      	bhi.n	8002072 <HAL_CAN_IRQHandler+0x334>
 8002024:	2b30      	cmp	r3, #48	; 0x30
 8002026:	d010      	beq.n	800204a <HAL_CAN_IRQHandler+0x30c>
 8002028:	2b30      	cmp	r3, #48	; 0x30
 800202a:	d822      	bhi.n	8002072 <HAL_CAN_IRQHandler+0x334>
 800202c:	2b10      	cmp	r3, #16
 800202e:	d002      	beq.n	8002036 <HAL_CAN_IRQHandler+0x2f8>
 8002030:	2b20      	cmp	r3, #32
 8002032:	d005      	beq.n	8002040 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002034:	e01d      	b.n	8002072 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	f043 0308 	orr.w	r3, r3, #8
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800203e:	e019      	b.n	8002074 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	f043 0310 	orr.w	r3, r3, #16
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002048:	e014      	b.n	8002074 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	f043 0320 	orr.w	r3, r3, #32
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002052:	e00f      	b.n	8002074 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800205c:	e00a      	b.n	8002074 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002066:	e005      	b.n	8002074 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002070:	e000      	b.n	8002074 <HAL_CAN_IRQHandler+0x336>
            break;
 8002072:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002082:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2204      	movs	r2, #4
 800208a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f867 	bl	8002172 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80020a4:	bf00      	nop
 80020a6:	3728      	adds	r7, #40	; 0x28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0b      	blt.n	8002212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4906      	ldr	r1, [pc, #24]	; (800221c <__NVIC_EnableIRQ+0x34>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2001      	movs	r0, #1
 800220a:	fa00 f202 	lsl.w	r2, r0, r2
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db0a      	blt.n	800224a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	490c      	ldr	r1, [pc, #48]	; (800226c <__NVIC_SetPriority+0x4c>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	440b      	add	r3, r1
 8002244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002248:	e00a      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4908      	ldr	r1, [pc, #32]	; (8002270 <__NVIC_SetPriority+0x50>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e100 	.word	0xe000e100
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f1c3 0307 	rsb	r3, r3, #7
 800228e:	2b04      	cmp	r3, #4
 8002290:	bf28      	it	cs
 8002292:	2304      	movcs	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3304      	adds	r3, #4
 800229a:	2b06      	cmp	r3, #6
 800229c:	d902      	bls.n	80022a4 <NVIC_EncodePriority+0x30>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3b03      	subs	r3, #3
 80022a2:	e000      	b.n	80022a6 <NVIC_EncodePriority+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	4313      	orrs	r3, r2
         );
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff90 	bl	8002220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff2d 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff42 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff90 	bl	8002274 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5f 	bl	8002220 <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff35 	bl	80021e8 <__NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffa2 	bl	80022d8 <SysTick_Config>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b08b      	sub	sp, #44	; 0x2c
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b2:	e169      	b.n	8002688 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023b4:	2201      	movs	r2, #1
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	f040 8158 	bne.w	8002682 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4a9a      	ldr	r2, [pc, #616]	; (8002640 <HAL_GPIO_Init+0x2a0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d05e      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 80023dc:	4a98      	ldr	r2, [pc, #608]	; (8002640 <HAL_GPIO_Init+0x2a0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d875      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 80023e2:	4a98      	ldr	r2, [pc, #608]	; (8002644 <HAL_GPIO_Init+0x2a4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d058      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 80023e8:	4a96      	ldr	r2, [pc, #600]	; (8002644 <HAL_GPIO_Init+0x2a4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d86f      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 80023ee:	4a96      	ldr	r2, [pc, #600]	; (8002648 <HAL_GPIO_Init+0x2a8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d052      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 80023f4:	4a94      	ldr	r2, [pc, #592]	; (8002648 <HAL_GPIO_Init+0x2a8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d869      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 80023fa:	4a94      	ldr	r2, [pc, #592]	; (800264c <HAL_GPIO_Init+0x2ac>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d04c      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 8002400:	4a92      	ldr	r2, [pc, #584]	; (800264c <HAL_GPIO_Init+0x2ac>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d863      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 8002406:	4a92      	ldr	r2, [pc, #584]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d046      	beq.n	800249a <HAL_GPIO_Init+0xfa>
 800240c:	4a90      	ldr	r2, [pc, #576]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d85d      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 8002412:	2b12      	cmp	r3, #18
 8002414:	d82a      	bhi.n	800246c <HAL_GPIO_Init+0xcc>
 8002416:	2b12      	cmp	r3, #18
 8002418:	d859      	bhi.n	80024ce <HAL_GPIO_Init+0x12e>
 800241a:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <HAL_GPIO_Init+0x80>)
 800241c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002420:	0800249b 	.word	0x0800249b
 8002424:	08002475 	.word	0x08002475
 8002428:	08002487 	.word	0x08002487
 800242c:	080024c9 	.word	0x080024c9
 8002430:	080024cf 	.word	0x080024cf
 8002434:	080024cf 	.word	0x080024cf
 8002438:	080024cf 	.word	0x080024cf
 800243c:	080024cf 	.word	0x080024cf
 8002440:	080024cf 	.word	0x080024cf
 8002444:	080024cf 	.word	0x080024cf
 8002448:	080024cf 	.word	0x080024cf
 800244c:	080024cf 	.word	0x080024cf
 8002450:	080024cf 	.word	0x080024cf
 8002454:	080024cf 	.word	0x080024cf
 8002458:	080024cf 	.word	0x080024cf
 800245c:	080024cf 	.word	0x080024cf
 8002460:	080024cf 	.word	0x080024cf
 8002464:	0800247d 	.word	0x0800247d
 8002468:	08002491 	.word	0x08002491
 800246c:	4a79      	ldr	r2, [pc, #484]	; (8002654 <HAL_GPIO_Init+0x2b4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002472:	e02c      	b.n	80024ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	623b      	str	r3, [r7, #32]
          break;
 800247a:	e029      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	3304      	adds	r3, #4
 8002482:	623b      	str	r3, [r7, #32]
          break;
 8002484:	e024      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	3308      	adds	r3, #8
 800248c:	623b      	str	r3, [r7, #32]
          break;
 800248e:	e01f      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	330c      	adds	r3, #12
 8002496:	623b      	str	r3, [r7, #32]
          break;
 8002498:	e01a      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d102      	bne.n	80024a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024a2:	2304      	movs	r3, #4
 80024a4:	623b      	str	r3, [r7, #32]
          break;
 80024a6:	e013      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d105      	bne.n	80024bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b0:	2308      	movs	r3, #8
 80024b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	611a      	str	r2, [r3, #16]
          break;
 80024ba:	e009      	b.n	80024d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024bc:	2308      	movs	r3, #8
 80024be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	615a      	str	r2, [r3, #20]
          break;
 80024c6:	e003      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
          break;
 80024cc:	e000      	b.n	80024d0 <HAL_GPIO_Init+0x130>
          break;
 80024ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2bff      	cmp	r3, #255	; 0xff
 80024d4:	d801      	bhi.n	80024da <HAL_GPIO_Init+0x13a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	e001      	b.n	80024de <HAL_GPIO_Init+0x13e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3304      	adds	r3, #4
 80024de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2bff      	cmp	r3, #255	; 0xff
 80024e4:	d802      	bhi.n	80024ec <HAL_GPIO_Init+0x14c>
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	e002      	b.n	80024f2 <HAL_GPIO_Init+0x152>
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	3b08      	subs	r3, #8
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	210f      	movs	r1, #15
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	401a      	ands	r2, r3
 8002504:	6a39      	ldr	r1, [r7, #32]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	431a      	orrs	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80b1 	beq.w	8002682 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002520:	4b4d      	ldr	r3, [pc, #308]	; (8002658 <HAL_GPIO_Init+0x2b8>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	4a4c      	ldr	r2, [pc, #304]	; (8002658 <HAL_GPIO_Init+0x2b8>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6193      	str	r3, [r2, #24]
 800252c:	4b4a      	ldr	r3, [pc, #296]	; (8002658 <HAL_GPIO_Init+0x2b8>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002538:	4a48      	ldr	r2, [pc, #288]	; (800265c <HAL_GPIO_Init+0x2bc>)
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002544:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4013      	ands	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a40      	ldr	r2, [pc, #256]	; (8002660 <HAL_GPIO_Init+0x2c0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d013      	beq.n	800258c <HAL_GPIO_Init+0x1ec>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a3f      	ldr	r2, [pc, #252]	; (8002664 <HAL_GPIO_Init+0x2c4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00d      	beq.n	8002588 <HAL_GPIO_Init+0x1e8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a3e      	ldr	r2, [pc, #248]	; (8002668 <HAL_GPIO_Init+0x2c8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d007      	beq.n	8002584 <HAL_GPIO_Init+0x1e4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a3d      	ldr	r2, [pc, #244]	; (800266c <HAL_GPIO_Init+0x2cc>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d101      	bne.n	8002580 <HAL_GPIO_Init+0x1e0>
 800257c:	2303      	movs	r3, #3
 800257e:	e006      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 8002580:	2304      	movs	r3, #4
 8002582:	e004      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 8002584:	2302      	movs	r3, #2
 8002586:	e002      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_GPIO_Init+0x1ee>
 800258c:	2300      	movs	r3, #0
 800258e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002590:	f002 0203 	and.w	r2, r2, #3
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	4093      	lsls	r3, r2
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800259e:	492f      	ldr	r1, [pc, #188]	; (800265c <HAL_GPIO_Init+0x2bc>)
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	3302      	adds	r3, #2
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d006      	beq.n	80025c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025b8:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	492c      	ldr	r1, [pc, #176]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	608b      	str	r3, [r1, #8]
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025c6:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	4928      	ldr	r1, [pc, #160]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d006      	beq.n	80025ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025e0:	4b23      	ldr	r3, [pc, #140]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	4922      	ldr	r1, [pc, #136]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60cb      	str	r3, [r1, #12]
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025ee:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	491e      	ldr	r1, [pc, #120]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d006      	beq.n	8002616 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	4918      	ldr	r1, [pc, #96]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002616:	4b16      	ldr	r3, [pc, #88]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	43db      	mvns	r3, r3
 800261e:	4914      	ldr	r1, [pc, #80]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 8002620:	4013      	ands	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d021      	beq.n	8002674 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	490e      	ldr	r1, [pc, #56]	; (8002670 <HAL_GPIO_Init+0x2d0>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]
 800263c:	e021      	b.n	8002682 <HAL_GPIO_Init+0x2e2>
 800263e:	bf00      	nop
 8002640:	10320000 	.word	0x10320000
 8002644:	10310000 	.word	0x10310000
 8002648:	10220000 	.word	0x10220000
 800264c:	10210000 	.word	0x10210000
 8002650:	10120000 	.word	0x10120000
 8002654:	10110000 	.word	0x10110000
 8002658:	40021000 	.word	0x40021000
 800265c:	40010000 	.word	0x40010000
 8002660:	40010800 	.word	0x40010800
 8002664:	40010c00 	.word	0x40010c00
 8002668:	40011000 	.word	0x40011000
 800266c:	40011400 	.word	0x40011400
 8002670:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_GPIO_Init+0x304>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	43db      	mvns	r3, r3
 800267c:	4909      	ldr	r1, [pc, #36]	; (80026a4 <HAL_GPIO_Init+0x304>)
 800267e:	4013      	ands	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	3301      	adds	r3, #1
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	fa22 f303 	lsr.w	r3, r2, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	f47f ae8e 	bne.w	80023b4 <HAL_GPIO_Init+0x14>
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	372c      	adds	r7, #44	; 0x2c
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	40010400 	.word	0x40010400

080026a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	887b      	ldrh	r3, [r7, #2]
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e001      	b.n	80026ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	807b      	strh	r3, [r7, #2]
 80026e2:	4613      	mov	r3, r2
 80026e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026e6:	787b      	ldrb	r3, [r7, #1]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ec:	887a      	ldrh	r2, [r7, #2]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026f2:	e003      	b.n	80026fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026f4:	887b      	ldrh	r3, [r7, #2]
 80026f6:	041a      	lsls	r2, r3, #16
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	611a      	str	r2, [r3, #16]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
	...

08002708 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800271e:	4a05      	ldr	r2, [pc, #20]	; (8002734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fd96 	bl	8001258 <HAL_GPIO_EXTI_Callback>
  }
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40010400 	.word	0x40010400

08002738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e272      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8087 	beq.w	8002866 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002758:	4b92      	ldr	r3, [pc, #584]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	2b04      	cmp	r3, #4
 8002762:	d00c      	beq.n	800277e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002764:	4b8f      	ldr	r3, [pc, #572]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	2b08      	cmp	r3, #8
 800276e:	d112      	bne.n	8002796 <HAL_RCC_OscConfig+0x5e>
 8002770:	4b8c      	ldr	r3, [pc, #560]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277c:	d10b      	bne.n	8002796 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277e:	4b89      	ldr	r3, [pc, #548]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d06c      	beq.n	8002864 <HAL_RCC_OscConfig+0x12c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d168      	bne.n	8002864 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e24c      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279e:	d106      	bne.n	80027ae <HAL_RCC_OscConfig+0x76>
 80027a0:	4b80      	ldr	r3, [pc, #512]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a7f      	ldr	r2, [pc, #508]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	e02e      	b.n	800280c <HAL_RCC_OscConfig+0xd4>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x98>
 80027b6:	4b7b      	ldr	r3, [pc, #492]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a7a      	ldr	r2, [pc, #488]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	4b78      	ldr	r3, [pc, #480]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a77      	ldr	r2, [pc, #476]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e01d      	b.n	800280c <HAL_RCC_OscConfig+0xd4>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0xbc>
 80027da:	4b72      	ldr	r3, [pc, #456]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a71      	ldr	r2, [pc, #452]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b6f      	ldr	r3, [pc, #444]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a6e      	ldr	r2, [pc, #440]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e00b      	b.n	800280c <HAL_RCC_OscConfig+0xd4>
 80027f4:	4b6b      	ldr	r3, [pc, #428]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a6a      	ldr	r2, [pc, #424]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b68      	ldr	r3, [pc, #416]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a67      	ldr	r2, [pc, #412]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 8002806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800280a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d013      	beq.n	800283c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fe14 	bl	8001440 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7fe fe10 	bl	8001440 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e200      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b5d      	ldr	r3, [pc, #372]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0xe4>
 800283a:	e014      	b.n	8002866 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe fe00 	bl	8001440 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002844:	f7fe fdfc 	bl	8001440 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	; 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e1ec      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x10c>
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d063      	beq.n	800293a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002872:	4b4c      	ldr	r3, [pc, #304]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800287e:	4b49      	ldr	r3, [pc, #292]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b08      	cmp	r3, #8
 8002888:	d11c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x18c>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d116      	bne.n	80028c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	4b43      	ldr	r3, [pc, #268]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_RCC_OscConfig+0x176>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e1c0      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ae:	4b3d      	ldr	r3, [pc, #244]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4939      	ldr	r1, [pc, #228]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c2:	e03a      	b.n	800293a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d020      	beq.n	800290e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028cc:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <HAL_RCC_OscConfig+0x270>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d2:	f7fe fdb5 	bl	8001440 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028da:	f7fe fdb1 	bl	8001440 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e1a1      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f8:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4927      	ldr	r1, [pc, #156]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
 800290c:	e015      	b.n	800293a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290e:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <HAL_RCC_OscConfig+0x270>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7fe fd94 	bl	8001440 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291c:	f7fe fd90 	bl	8001440 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e180      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d03a      	beq.n	80029bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d019      	beq.n	8002982 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294e:	4b17      	ldr	r3, [pc, #92]	; (80029ac <HAL_RCC_OscConfig+0x274>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002954:	f7fe fd74 	bl	8001440 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295c:	f7fe fd70 	bl	8001440 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e160      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <HAL_RCC_OscConfig+0x26c>)
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800297a:	2001      	movs	r0, #1
 800297c:	f000 face 	bl	8002f1c <RCC_Delay>
 8002980:	e01c      	b.n	80029bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <HAL_RCC_OscConfig+0x274>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002988:	f7fe fd5a 	bl	8001440 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298e:	e00f      	b.n	80029b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002990:	f7fe fd56 	bl	8001440 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d908      	bls.n	80029b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e146      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
 80029a8:	42420000 	.word	0x42420000
 80029ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b0:	4b92      	ldr	r3, [pc, #584]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1e9      	bne.n	8002990 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80a6 	beq.w	8002b16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ce:	4b8b      	ldr	r3, [pc, #556]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10d      	bne.n	80029f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	4b88      	ldr	r3, [pc, #544]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	4a87      	ldr	r2, [pc, #540]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e4:	61d3      	str	r3, [r2, #28]
 80029e6:	4b85      	ldr	r3, [pc, #532]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f2:	2301      	movs	r3, #1
 80029f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	4b82      	ldr	r3, [pc, #520]	; (8002c00 <HAL_RCC_OscConfig+0x4c8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d118      	bne.n	8002a34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a02:	4b7f      	ldr	r3, [pc, #508]	; (8002c00 <HAL_RCC_OscConfig+0x4c8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a7e      	ldr	r2, [pc, #504]	; (8002c00 <HAL_RCC_OscConfig+0x4c8>)
 8002a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0e:	f7fe fd17 	bl	8001440 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a16:	f7fe fd13 	bl	8001440 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b64      	cmp	r3, #100	; 0x64
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e103      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	4b75      	ldr	r3, [pc, #468]	; (8002c00 <HAL_RCC_OscConfig+0x4c8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x312>
 8002a3c:	4b6f      	ldr	r3, [pc, #444]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	4a6e      	ldr	r2, [pc, #440]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6213      	str	r3, [r2, #32]
 8002a48:	e02d      	b.n	8002aa6 <HAL_RCC_OscConfig+0x36e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x334>
 8002a52:	4b6a      	ldr	r3, [pc, #424]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	4a69      	ldr	r2, [pc, #420]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	6213      	str	r3, [r2, #32]
 8002a5e:	4b67      	ldr	r3, [pc, #412]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4a66      	ldr	r2, [pc, #408]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	f023 0304 	bic.w	r3, r3, #4
 8002a68:	6213      	str	r3, [r2, #32]
 8002a6a:	e01c      	b.n	8002aa6 <HAL_RCC_OscConfig+0x36e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b05      	cmp	r3, #5
 8002a72:	d10c      	bne.n	8002a8e <HAL_RCC_OscConfig+0x356>
 8002a74:	4b61      	ldr	r3, [pc, #388]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	4a60      	ldr	r2, [pc, #384]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002a7a:	f043 0304 	orr.w	r3, r3, #4
 8002a7e:	6213      	str	r3, [r2, #32]
 8002a80:	4b5e      	ldr	r3, [pc, #376]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	4a5d      	ldr	r2, [pc, #372]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6213      	str	r3, [r2, #32]
 8002a8c:	e00b      	b.n	8002aa6 <HAL_RCC_OscConfig+0x36e>
 8002a8e:	4b5b      	ldr	r3, [pc, #364]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	4a5a      	ldr	r2, [pc, #360]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	f023 0301 	bic.w	r3, r3, #1
 8002a98:	6213      	str	r3, [r2, #32]
 8002a9a:	4b58      	ldr	r3, [pc, #352]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	4a57      	ldr	r2, [pc, #348]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	f023 0304 	bic.w	r3, r3, #4
 8002aa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d015      	beq.n	8002ada <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aae:	f7fe fcc7 	bl	8001440 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7fe fcc3 	bl	8001440 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e0b1      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002acc:	4b4b      	ldr	r3, [pc, #300]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ee      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x37e>
 8002ad8:	e014      	b.n	8002b04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ada:	f7fe fcb1 	bl	8001440 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7fe fcad 	bl	8001440 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e09b      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af8:	4b40      	ldr	r3, [pc, #256]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1ee      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d105      	bne.n	8002b16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0a:	4b3c      	ldr	r3, [pc, #240]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	4a3b      	ldr	r2, [pc, #236]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 8087 	beq.w	8002c2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b20:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d061      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d146      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b34:	4b33      	ldr	r3, [pc, #204]	; (8002c04 <HAL_RCC_OscConfig+0x4cc>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3a:	f7fe fc81 	bl	8001440 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b42:	f7fe fc7d 	bl	8001440 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e06d      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b54:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f0      	bne.n	8002b42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b68:	d108      	bne.n	8002b7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	4921      	ldr	r1, [pc, #132]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b7c:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a19      	ldr	r1, [r3, #32]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	491b      	ldr	r1, [pc, #108]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_RCC_OscConfig+0x4cc>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fc51 	bl	8001440 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7fe fc4d 	bl	8001440 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e03d      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x46a>
 8002bc0:	e035      	b.n	8002c2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <HAL_RCC_OscConfig+0x4cc>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fc3a 	bl	8001440 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7fe fc36 	bl	8001440 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e026      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x498>
 8002bee:	e01e      	b.n	8002c2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d107      	bne.n	8002c08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e019      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40007000 	.word	0x40007000
 8002c04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_OscConfig+0x500>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000

08002c3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0d0      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c50:	4b6a      	ldr	r3, [pc, #424]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d910      	bls.n	8002c80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b67      	ldr	r3, [pc, #412]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 0207 	bic.w	r2, r3, #7
 8002c66:	4965      	ldr	r1, [pc, #404]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0b8      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d020      	beq.n	8002cce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c98:	4b59      	ldr	r3, [pc, #356]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ca2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb0:	4b53      	ldr	r3, [pc, #332]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4a52      	ldr	r2, [pc, #328]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cbc:	4b50      	ldr	r3, [pc, #320]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	494d      	ldr	r1, [pc, #308]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d040      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d115      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e07f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfa:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e073      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e06b      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1a:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f023 0203 	bic.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4936      	ldr	r1, [pc, #216]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d2c:	f7fe fb88 	bl	8001440 <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d34:	f7fe fb84 	bl	8001440 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e053      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 020c 	and.w	r2, r3, #12
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d1eb      	bne.n	8002d34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d210      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 0207 	bic.w	r2, r3, #7
 8002d72:	4922      	ldr	r1, [pc, #136]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e032      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4916      	ldr	r1, [pc, #88]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	490e      	ldr	r1, [pc, #56]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dca:	f000 f821 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	490a      	ldr	r1, [pc, #40]	; (8002e04 <HAL_RCC_ClockConfig+0x1c8>)
 8002ddc:	5ccb      	ldrb	r3, [r1, r3]
 8002dde:	fa22 f303 	lsr.w	r3, r2, r3
 8002de2:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <HAL_RCC_ClockConfig+0x1cc>)
 8002de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_RCC_ClockConfig+0x1d0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fae6 	bl	80013bc <HAL_InitTick>

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40022000 	.word	0x40022000
 8002e00:	40021000 	.word	0x40021000
 8002e04:	08003e00 	.word	0x08003e00
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	20000004 	.word	0x20000004

08002e10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b087      	sub	sp, #28
 8002e14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d002      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x30>
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_GetSysClockFreq+0x36>
 8002e3e:	e027      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e42:	613b      	str	r3, [r7, #16]
      break;
 8002e44:	e027      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	0c9b      	lsrs	r3, r3, #18
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	4a17      	ldr	r2, [pc, #92]	; (8002eac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e50:	5cd3      	ldrb	r3, [r2, r3]
 8002e52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d010      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	0c5b      	lsrs	r3, r3, #17
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	4a11      	ldr	r2, [pc, #68]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e6a:	5cd3      	ldrb	r3, [r2, r3]
 8002e6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a0d      	ldr	r2, [pc, #52]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e72:	fb03 f202 	mul.w	r2, r3, r2
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	e004      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a0c      	ldr	r2, [pc, #48]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e84:	fb02 f303 	mul.w	r3, r2, r3
 8002e88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	613b      	str	r3, [r7, #16]
      break;
 8002e8e:	e002      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e92:	613b      	str	r3, [r7, #16]
      break;
 8002e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e96:	693b      	ldr	r3, [r7, #16]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	007a1200 	.word	0x007a1200
 8002eac:	08003e18 	.word	0x08003e18
 8002eb0:	08003e28 	.word	0x08003e28
 8002eb4:	003d0900 	.word	0x003d0900

08002eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ebc:	4b02      	ldr	r3, [pc, #8]	; (8002ec8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	20000000 	.word	0x20000000

08002ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ed0:	f7ff fff2 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4903      	ldr	r1, [pc, #12]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	08003e10 	.word	0x08003e10

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ef8:	f7ff ffde 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	0adb      	lsrs	r3, r3, #11
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4903      	ldr	r1, [pc, #12]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000
 8002f18:	08003e10 	.word	0x08003e10

08002f1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <RCC_Delay+0x34>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <RCC_Delay+0x38>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0a5b      	lsrs	r3, r3, #9
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f38:	bf00      	nop
  }
  while (Delay --);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1e5a      	subs	r2, r3, #1
 8002f3e:	60fa      	str	r2, [r7, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f9      	bne.n	8002f38 <RCC_Delay+0x1c>
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	20000000 	.word	0x20000000
 8002f54:	10624dd3 	.word	0x10624dd3

08002f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e041      	b.n	8002fee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd feca 	bl	8000d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3304      	adds	r3, #4
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f000 fb16 	bl	80035c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e041      	b.n	800308c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d106      	bne.n	8003022 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f839 	bl	8003094 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2202      	movs	r2, #2
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3304      	adds	r3, #4
 8003032:	4619      	mov	r1, r3
 8003034:	4610      	mov	r0, r2
 8003036:	f000 fac7 	bl	80035c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr
	...

080030a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <HAL_TIM_PWM_Start+0x24>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e022      	b.n	8003112 <HAL_TIM_PWM_Start+0x6a>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d109      	bne.n	80030e6 <HAL_TIM_PWM_Start+0x3e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	bf14      	ite	ne
 80030de:	2301      	movne	r3, #1
 80030e0:	2300      	moveq	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	e015      	b.n	8003112 <HAL_TIM_PWM_Start+0x6a>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d109      	bne.n	8003100 <HAL_TIM_PWM_Start+0x58>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e008      	b.n	8003112 <HAL_TIM_PWM_Start+0x6a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e05e      	b.n	80031d8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d104      	bne.n	800312a <HAL_TIM_PWM_Start+0x82>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003128:	e013      	b.n	8003152 <HAL_TIM_PWM_Start+0xaa>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d104      	bne.n	800313a <HAL_TIM_PWM_Start+0x92>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003138:	e00b      	b.n	8003152 <HAL_TIM_PWM_Start+0xaa>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d104      	bne.n	800314a <HAL_TIM_PWM_Start+0xa2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003148:	e003      	b.n	8003152 <HAL_TIM_PWM_Start+0xaa>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2202      	movs	r2, #2
 800314e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2201      	movs	r2, #1
 8003158:	6839      	ldr	r1, [r7, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fcb4 	bl	8003ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a1e      	ldr	r2, [pc, #120]	; (80031e0 <HAL_TIM_PWM_Start+0x138>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d107      	bne.n	800317a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003178:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <HAL_TIM_PWM_Start+0x138>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00e      	beq.n	80031a2 <HAL_TIM_PWM_Start+0xfa>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318c:	d009      	beq.n	80031a2 <HAL_TIM_PWM_Start+0xfa>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <HAL_TIM_PWM_Start+0x13c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d004      	beq.n	80031a2 <HAL_TIM_PWM_Start+0xfa>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a12      	ldr	r2, [pc, #72]	; (80031e8 <HAL_TIM_PWM_Start+0x140>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d111      	bne.n	80031c6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2b06      	cmp	r3, #6
 80031b2:	d010      	beq.n	80031d6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c4:	e007      	b.n	80031d6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	40000400 	.word	0x40000400
 80031e8:	40000800 	.word	0x40000800

080031ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	6839      	ldr	r1, [r7, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fc62 	bl	8003ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a29      	ldr	r2, [pc, #164]	; (80032b0 <HAL_TIM_PWM_Stop+0xc4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d117      	bne.n	800323e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6a1a      	ldr	r2, [r3, #32]
 8003214:	f241 1311 	movw	r3, #4369	; 0x1111
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10f      	bne.n	800323e <HAL_TIM_PWM_Stop+0x52>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6a1a      	ldr	r2, [r3, #32]
 8003224:	f240 4344 	movw	r3, #1092	; 0x444
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <HAL_TIM_PWM_Stop+0x52>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800323c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a1a      	ldr	r2, [r3, #32]
 8003244:	f241 1311 	movw	r3, #4369	; 0x1111
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10f      	bne.n	800326e <HAL_TIM_PWM_Stop+0x82>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6a1a      	ldr	r2, [r3, #32]
 8003254:	f240 4344 	movw	r3, #1092	; 0x444
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d107      	bne.n	800326e <HAL_TIM_PWM_Stop+0x82>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d104      	bne.n	800327e <HAL_TIM_PWM_Stop+0x92>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800327c:	e013      	b.n	80032a6 <HAL_TIM_PWM_Stop+0xba>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d104      	bne.n	800328e <HAL_TIM_PWM_Stop+0xa2>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800328c:	e00b      	b.n	80032a6 <HAL_TIM_PWM_Stop+0xba>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b08      	cmp	r3, #8
 8003292:	d104      	bne.n	800329e <HAL_TIM_PWM_Stop+0xb2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800329c:	e003      	b.n	80032a6 <HAL_TIM_PWM_Stop+0xba>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40012c00 	.word	0x40012c00

080032b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e0ae      	b.n	8003430 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b0c      	cmp	r3, #12
 80032de:	f200 809f 	bhi.w	8003420 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032e2:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e8:	0800331d 	.word	0x0800331d
 80032ec:	08003421 	.word	0x08003421
 80032f0:	08003421 	.word	0x08003421
 80032f4:	08003421 	.word	0x08003421
 80032f8:	0800335d 	.word	0x0800335d
 80032fc:	08003421 	.word	0x08003421
 8003300:	08003421 	.word	0x08003421
 8003304:	08003421 	.word	0x08003421
 8003308:	0800339f 	.word	0x0800339f
 800330c:	08003421 	.word	0x08003421
 8003310:	08003421 	.word	0x08003421
 8003314:	08003421 	.word	0x08003421
 8003318:	080033df 	.word	0x080033df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	4618      	mov	r0, r3
 8003324:	f000 f9b2 	bl	800368c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0208 	orr.w	r2, r2, #8
 8003336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0204 	bic.w	r2, r2, #4
 8003346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6999      	ldr	r1, [r3, #24]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	619a      	str	r2, [r3, #24]
      break;
 800335a:	e064      	b.n	8003426 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f9f8 	bl	8003758 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6999      	ldr	r1, [r3, #24]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	021a      	lsls	r2, r3, #8
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	619a      	str	r2, [r3, #24]
      break;
 800339c:	e043      	b.n	8003426 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fa41 	bl	800382c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0208 	orr.w	r2, r2, #8
 80033b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69da      	ldr	r2, [r3, #28]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0204 	bic.w	r2, r2, #4
 80033c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69d9      	ldr	r1, [r3, #28]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	61da      	str	r2, [r3, #28]
      break;
 80033dc:	e023      	b.n	8003426 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68b9      	ldr	r1, [r7, #8]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fa8b 	bl	8003900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69d9      	ldr	r1, [r3, #28]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	021a      	lsls	r2, r3, #8
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	61da      	str	r2, [r3, #28]
      break;
 800341e:	e002      	b.n	8003426 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	75fb      	strb	r3, [r7, #23]
      break;
 8003424:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800342e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_TIM_ConfigClockSource+0x1c>
 8003450:	2302      	movs	r3, #2
 8003452:	e0b4      	b.n	80035be <HAL_TIM_ConfigClockSource+0x186>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800347a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348c:	d03e      	beq.n	800350c <HAL_TIM_ConfigClockSource+0xd4>
 800348e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003492:	f200 8087 	bhi.w	80035a4 <HAL_TIM_ConfigClockSource+0x16c>
 8003496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349a:	f000 8086 	beq.w	80035aa <HAL_TIM_ConfigClockSource+0x172>
 800349e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a2:	d87f      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x16c>
 80034a4:	2b70      	cmp	r3, #112	; 0x70
 80034a6:	d01a      	beq.n	80034de <HAL_TIM_ConfigClockSource+0xa6>
 80034a8:	2b70      	cmp	r3, #112	; 0x70
 80034aa:	d87b      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x16c>
 80034ac:	2b60      	cmp	r3, #96	; 0x60
 80034ae:	d050      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0x11a>
 80034b0:	2b60      	cmp	r3, #96	; 0x60
 80034b2:	d877      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x16c>
 80034b4:	2b50      	cmp	r3, #80	; 0x50
 80034b6:	d03c      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0xfa>
 80034b8:	2b50      	cmp	r3, #80	; 0x50
 80034ba:	d873      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x16c>
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d058      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x13a>
 80034c0:	2b40      	cmp	r3, #64	; 0x40
 80034c2:	d86f      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x16c>
 80034c4:	2b30      	cmp	r3, #48	; 0x30
 80034c6:	d064      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x15a>
 80034c8:	2b30      	cmp	r3, #48	; 0x30
 80034ca:	d86b      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x16c>
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d060      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x15a>
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d867      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x16c>
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d05c      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x15a>
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d05a      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x15a>
 80034dc:	e062      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ee:	f000 facc 	bl	8003a8a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003500:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	609a      	str	r2, [r3, #8]
      break;
 800350a:	e04f      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800351c:	f000 fab5 	bl	8003a8a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800352e:	609a      	str	r2, [r3, #8]
      break;
 8003530:	e03c      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800353e:	461a      	mov	r2, r3
 8003540:	f000 fa2c 	bl	800399c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2150      	movs	r1, #80	; 0x50
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fa83 	bl	8003a56 <TIM_ITRx_SetConfig>
      break;
 8003550:	e02c      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800355e:	461a      	mov	r2, r3
 8003560:	f000 fa4a 	bl	80039f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2160      	movs	r1, #96	; 0x60
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fa73 	bl	8003a56 <TIM_ITRx_SetConfig>
      break;
 8003570:	e01c      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800357e:	461a      	mov	r2, r3
 8003580:	f000 fa0c 	bl	800399c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2140      	movs	r1, #64	; 0x40
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fa63 	bl	8003a56 <TIM_ITRx_SetConfig>
      break;
 8003590:	e00c      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4619      	mov	r1, r3
 800359c:	4610      	mov	r0, r2
 800359e:	f000 fa5a 	bl	8003a56 <TIM_ITRx_SetConfig>
      break;
 80035a2:	e003      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
      break;
 80035a8:	e000      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a29      	ldr	r2, [pc, #164]	; (8003680 <TIM_Base_SetConfig+0xb8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00b      	beq.n	80035f8 <TIM_Base_SetConfig+0x30>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e6:	d007      	beq.n	80035f8 <TIM_Base_SetConfig+0x30>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a26      	ldr	r2, [pc, #152]	; (8003684 <TIM_Base_SetConfig+0xbc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d003      	beq.n	80035f8 <TIM_Base_SetConfig+0x30>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a25      	ldr	r2, [pc, #148]	; (8003688 <TIM_Base_SetConfig+0xc0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d108      	bne.n	800360a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a1c      	ldr	r2, [pc, #112]	; (8003680 <TIM_Base_SetConfig+0xb8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00b      	beq.n	800362a <TIM_Base_SetConfig+0x62>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003618:	d007      	beq.n	800362a <TIM_Base_SetConfig+0x62>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a19      	ldr	r2, [pc, #100]	; (8003684 <TIM_Base_SetConfig+0xbc>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d003      	beq.n	800362a <TIM_Base_SetConfig+0x62>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a18      	ldr	r2, [pc, #96]	; (8003688 <TIM_Base_SetConfig+0xc0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d108      	bne.n	800363c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a07      	ldr	r2, [pc, #28]	; (8003680 <TIM_Base_SetConfig+0xb8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d103      	bne.n	8003670 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	615a      	str	r2, [r3, #20]
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr
 8003680:	40012c00 	.word	0x40012c00
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800

0800368c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f023 0201 	bic.w	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0303 	bic.w	r3, r3, #3
 80036c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f023 0302 	bic.w	r3, r3, #2
 80036d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <TIM_OC1_SetConfig+0xc8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d10c      	bne.n	8003702 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f023 0308 	bic.w	r3, r3, #8
 80036ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f023 0304 	bic.w	r3, r3, #4
 8003700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a13      	ldr	r2, [pc, #76]	; (8003754 <TIM_OC1_SetConfig+0xc8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d111      	bne.n	800372e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	621a      	str	r2, [r3, #32]
}
 8003748:	bf00      	nop
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40012c00 	.word	0x40012c00

08003758 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	f023 0210 	bic.w	r2, r3, #16
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f023 0320 	bic.w	r3, r3, #32
 80037a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <TIM_OC2_SetConfig+0xd0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d10d      	bne.n	80037d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a14      	ldr	r2, [pc, #80]	; (8003828 <TIM_OC2_SetConfig+0xd0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d113      	bne.n	8003804 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	621a      	str	r2, [r3, #32]
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	40012c00 	.word	0x40012c00

0800382c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	021b      	lsls	r3, r3, #8
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a1d      	ldr	r2, [pc, #116]	; (80038fc <TIM_OC3_SetConfig+0xd0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d10d      	bne.n	80038a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003890:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a14      	ldr	r2, [pc, #80]	; (80038fc <TIM_OC3_SetConfig+0xd0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d113      	bne.n	80038d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	621a      	str	r2, [r3, #32]
}
 80038f0:	bf00      	nop
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40012c00 	.word	0x40012c00

08003900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	021b      	lsls	r3, r3, #8
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800394a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	031b      	lsls	r3, r3, #12
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a0f      	ldr	r2, [pc, #60]	; (8003998 <TIM_OC4_SetConfig+0x98>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d109      	bne.n	8003974 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	019b      	lsls	r3, r3, #6
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	621a      	str	r2, [r3, #32]
}
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr
 8003998:	40012c00 	.word	0x40012c00

0800399c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f023 0201 	bic.w	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f023 030a 	bic.w	r3, r3, #10
 80039d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f023 0210 	bic.w	r2, r3, #16
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	031b      	lsls	r3, r3, #12
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	621a      	str	r2, [r3, #32]
}
 8003a4c:	bf00      	nop
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f043 0307 	orr.w	r3, r3, #7
 8003a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	609a      	str	r2, [r3, #8]
}
 8003a80:	bf00      	nop
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr

08003a8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b087      	sub	sp, #28
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	021a      	lsls	r2, r3, #8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	609a      	str	r2, [r3, #8]
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	2201      	movs	r2, #1
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a1a      	ldr	r2, [r3, #32]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	401a      	ands	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a1a      	ldr	r2, [r3, #32]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	431a      	orrs	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	621a      	str	r2, [r3, #32]
}
 8003b06:	bf00      	nop
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e046      	b.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a16      	ldr	r2, [pc, #88]	; (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00e      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b74:	d009      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d004      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a10      	ldr	r2, [pc, #64]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d10c      	bne.n	8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40000800 	.word	0x40000800

08003bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e042      	b.n	8003c64 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fd f92a 	bl	8000e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2224      	movs	r2, #36	; 0x24
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f82b 	bl	8003c6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695a      	ldr	r2, [r3, #20]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ca6:	f023 030c 	bic.w	r3, r3, #12
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2c      	ldr	r2, [pc, #176]	; (8003d80 <UART_SetConfig+0x114>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d103      	bne.n	8003cdc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003cd4:	f7ff f90e 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	e002      	b.n	8003ce2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cdc:	f7ff f8f6 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 8003ce0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	009a      	lsls	r2, r3, #2
 8003cec:	441a      	add	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	4a22      	ldr	r2, [pc, #136]	; (8003d84 <UART_SetConfig+0x118>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	0119      	lsls	r1, r3, #4
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009a      	lsls	r2, r3, #2
 8003d0c:	441a      	add	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d18:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <UART_SetConfig+0x118>)
 8003d1a:	fba3 0302 	umull	r0, r3, r3, r2
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	2064      	movs	r0, #100	; 0x64
 8003d22:	fb00 f303 	mul.w	r3, r0, r3
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	3332      	adds	r3, #50	; 0x32
 8003d2c:	4a15      	ldr	r2, [pc, #84]	; (8003d84 <UART_SetConfig+0x118>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d38:	4419      	add	r1, r3
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	009a      	lsls	r2, r3, #2
 8003d44:	441a      	add	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <UART_SetConfig+0x118>)
 8003d52:	fba3 0302 	umull	r0, r3, r3, r2
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	2064      	movs	r0, #100	; 0x64
 8003d5a:	fb00 f303 	mul.w	r3, r0, r3
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	3332      	adds	r3, #50	; 0x32
 8003d64:	4a07      	ldr	r2, [pc, #28]	; (8003d84 <UART_SetConfig+0x118>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	f003 020f 	and.w	r2, r3, #15
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	440a      	add	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d78:	bf00      	nop
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40013800 	.word	0x40013800
 8003d84:	51eb851f 	.word	0x51eb851f

08003d88 <memset>:
 8003d88:	4603      	mov	r3, r0
 8003d8a:	4402      	add	r2, r0
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d100      	bne.n	8003d92 <memset+0xa>
 8003d90:	4770      	bx	lr
 8003d92:	f803 1b01 	strb.w	r1, [r3], #1
 8003d96:	e7f9      	b.n	8003d8c <memset+0x4>

08003d98 <__libc_init_array>:
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	2600      	movs	r6, #0
 8003d9c:	4d0c      	ldr	r5, [pc, #48]	; (8003dd0 <__libc_init_array+0x38>)
 8003d9e:	4c0d      	ldr	r4, [pc, #52]	; (8003dd4 <__libc_init_array+0x3c>)
 8003da0:	1b64      	subs	r4, r4, r5
 8003da2:	10a4      	asrs	r4, r4, #2
 8003da4:	42a6      	cmp	r6, r4
 8003da6:	d109      	bne.n	8003dbc <__libc_init_array+0x24>
 8003da8:	f000 f81a 	bl	8003de0 <_init>
 8003dac:	2600      	movs	r6, #0
 8003dae:	4d0a      	ldr	r5, [pc, #40]	; (8003dd8 <__libc_init_array+0x40>)
 8003db0:	4c0a      	ldr	r4, [pc, #40]	; (8003ddc <__libc_init_array+0x44>)
 8003db2:	1b64      	subs	r4, r4, r5
 8003db4:	10a4      	asrs	r4, r4, #2
 8003db6:	42a6      	cmp	r6, r4
 8003db8:	d105      	bne.n	8003dc6 <__libc_init_array+0x2e>
 8003dba:	bd70      	pop	{r4, r5, r6, pc}
 8003dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dc0:	4798      	blx	r3
 8003dc2:	3601      	adds	r6, #1
 8003dc4:	e7ee      	b.n	8003da4 <__libc_init_array+0xc>
 8003dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dca:	4798      	blx	r3
 8003dcc:	3601      	adds	r6, #1
 8003dce:	e7f2      	b.n	8003db6 <__libc_init_array+0x1e>
 8003dd0:	08003e2c 	.word	0x08003e2c
 8003dd4:	08003e2c 	.word	0x08003e2c
 8003dd8:	08003e2c 	.word	0x08003e2c
 8003ddc:	08003e34 	.word	0x08003e34

08003de0 <_init>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	bf00      	nop
 8003de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de6:	bc08      	pop	{r3}
 8003de8:	469e      	mov	lr, r3
 8003dea:	4770      	bx	lr

08003dec <_fini>:
 8003dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dee:	bf00      	nop
 8003df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df2:	bc08      	pop	{r3}
 8003df4:	469e      	mov	lr, r3
 8003df6:	4770      	bx	lr
