
ServoBoard_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003d3c  08003d3c  00013d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d70  08003d70  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08003d70  08003d70  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d70  08003d70  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d78  08003d78  00013d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000024  08003da0  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08003da0  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eaba  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022c6  00000000  00000000  0002eb4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  00030e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a8d  00000000  00000000  00031b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019dd7  00000000  00000000  0003261d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed68  00000000  00000000  0004c3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e556  00000000  00000000  0005b15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038bc  00000000  00000000  000e96b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ecf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d24 	.word	0x08003d24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08003d24 	.word	0x08003d24

0800014c <_ZN9ServoCtrl7setDutyER17TIM_HandleTypeDefPh>:

uint32_t ServoCtrl::getBaseID(){
	return baseID;
}

bool ServoCtrl::setDuty(TIM_HandleTypeDef &htim, uint8_t data[8]){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	if (htim.Instance == TIM2){
 8000158:	68bb      	ldr	r3, [r7, #8]
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000160:	d130      	bne.n	80001c4 <_ZN9ServoCtrl7setDutyER17TIM_HandleTypeDefPh+0x78>
		std::memcpy(&duty[0],data + 0,sizeof(uint16_t));
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	3304      	adds	r3, #4
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	8812      	ldrh	r2, [r2, #0]
 800016a:	b292      	uxth	r2, r2
 800016c:	801a      	strh	r2, [r3, #0]
		std::memcpy(&duty[1],data + 2,sizeof(uint16_t));
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	3306      	adds	r3, #6
 8000172:	687a      	ldr	r2, [r7, #4]
 8000174:	3202      	adds	r2, #2
 8000176:	8812      	ldrh	r2, [r2, #0]
 8000178:	b292      	uxth	r2, r2
 800017a:	801a      	strh	r2, [r3, #0]
		std::memcpy(&duty[2],data + 4,sizeof(uint16_t));
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	3308      	adds	r3, #8
 8000180:	687a      	ldr	r2, [r7, #4]
 8000182:	3204      	adds	r2, #4
 8000184:	8812      	ldrh	r2, [r2, #0]
 8000186:	b292      	uxth	r2, r2
 8000188:	801a      	strh	r2, [r3, #0]
		std::memcpy(&duty[3],data + 6,sizeof(uint16_t));
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	330a      	adds	r3, #10
 800018e:	687a      	ldr	r2, [r7, #4]
 8000190:	3206      	adds	r2, #6
 8000192:	8812      	ldrh	r2, [r2, #0]
 8000194:	b292      	uxth	r2, r2
 8000196:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_1, duty[0]);
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	889a      	ldrh	r2, [r3, #4]
 800019c:	68bb      	ldr	r3, [r7, #8]
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_2, duty[1]);
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	88da      	ldrh	r2, [r3, #6]
 80001a6:	68bb      	ldr	r3, [r7, #8]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_3, duty[2]);
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	891a      	ldrh	r2, [r3, #8]
 80001b0:	68bb      	ldr	r3, [r7, #8]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_4, duty[3]);
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	895a      	ldrh	r2, [r3, #10]
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	641a      	str	r2, [r3, #64]	; 0x40
		return true;
 80001c0:	2301      	movs	r3, #1
 80001c2:	e036      	b.n	8000232 <_ZN9ServoCtrl7setDutyER17TIM_HandleTypeDefPh+0xe6>
	}else if(htim.Instance == TIM3){
 80001c4:	68bb      	ldr	r3, [r7, #8]
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a1c      	ldr	r2, [pc, #112]	; (800023c <_ZN9ServoCtrl7setDutyER17TIM_HandleTypeDefPh+0xf0>)
 80001ca:	4293      	cmp	r3, r2
 80001cc:	d130      	bne.n	8000230 <_ZN9ServoCtrl7setDutyER17TIM_HandleTypeDefPh+0xe4>
		std::memcpy(&duty[4],data + 0,sizeof(uint16_t));
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	330c      	adds	r3, #12
 80001d2:	687a      	ldr	r2, [r7, #4]
 80001d4:	8812      	ldrh	r2, [r2, #0]
 80001d6:	b292      	uxth	r2, r2
 80001d8:	801a      	strh	r2, [r3, #0]
		std::memcpy(&duty[5],data + 2,sizeof(uint16_t));
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	330e      	adds	r3, #14
 80001de:	687a      	ldr	r2, [r7, #4]
 80001e0:	3202      	adds	r2, #2
 80001e2:	8812      	ldrh	r2, [r2, #0]
 80001e4:	b292      	uxth	r2, r2
 80001e6:	801a      	strh	r2, [r3, #0]
		std::memcpy(&duty[6],data + 4,sizeof(uint16_t));
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	3310      	adds	r3, #16
 80001ec:	687a      	ldr	r2, [r7, #4]
 80001ee:	3204      	adds	r2, #4
 80001f0:	8812      	ldrh	r2, [r2, #0]
 80001f2:	b292      	uxth	r2, r2
 80001f4:	801a      	strh	r2, [r3, #0]
		std::memcpy(&duty[7],data + 6,sizeof(uint16_t));
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3312      	adds	r3, #18
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	3206      	adds	r2, #6
 80001fe:	8812      	ldrh	r2, [r2, #0]
 8000200:	b292      	uxth	r2, r2
 8000202:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_1, duty[4]);
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	899a      	ldrh	r2, [r3, #12]
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_2, duty[5]);
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	89da      	ldrh	r2, [r3, #14]
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_3, duty[6]);
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	8a1a      	ldrh	r2, [r3, #16]
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_4, duty[7]);
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	8a5a      	ldrh	r2, [r3, #18]
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	641a      	str	r2, [r3, #64]	; 0x40
		return true;
 800022c:	2301      	movs	r3, #1
 800022e:	e000      	b.n	8000232 <_ZN9ServoCtrl7setDutyER17TIM_HandleTypeDefPh+0xe6>
	}else{
		return false;
 8000230:	2300      	movs	r3, #0
	}
}
 8000232:	4618      	mov	r0, r3
 8000234:	3714      	adds	r7, #20
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	40000400 	.word	0x40000400

08000240 <_Z9TIM_ERRORR17TIM_HandleTypeDefm>:
//	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty[6]);
//	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty[7]);
//	return true;
//}

uint8_t TIM_ERROR(TIM_HandleTypeDef &htim, uint32_t Channel){
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]
	return 0;
 800024a:	2300      	movs	r3, #0
}
 800024c:	4618      	mov	r0, r3
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
	...

08000258 <_ZN9ServoCtrl7setModeEh>:

bool ServoCtrl::setMode(uint8_t mode){
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	460b      	mov	r3, r1
 8000262:	70fb      	strb	r3, [r7, #3]
	if(HAL_GPIO_ReadPin(EMS_GPIO_Port,EMS_Pin) == GPIO_PIN_SET){
 8000264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000268:	480f      	ldr	r0, [pc, #60]	; (80002a8 <_ZN9ServoCtrl7setModeEh+0x50>)
 800026a:	f002 f9bf 	bl	80025ec <HAL_GPIO_ReadPin>
 800026e:	4603      	mov	r3, r0
 8000270:	2b01      	cmp	r3, #1
 8000272:	bf0c      	ite	eq
 8000274:	2301      	moveq	r3, #1
 8000276:	2300      	movne	r3, #0
 8000278:	b2db      	uxtb	r3, r3
 800027a:	2b00      	cmp	r3, #0
 800027c:	d00f      	beq.n	800029e <_ZN9ServoCtrl7setModeEh+0x46>
		switch(mode){
 800027e:	78fb      	ldrb	r3, [r7, #3]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d002      	beq.n	800028a <_ZN9ServoCtrl7setModeEh+0x32>
 8000284:	2b01      	cmp	r3, #1
 8000286:	d004      	beq.n	8000292 <_ZN9ServoCtrl7setModeEh+0x3a>
			break;
		case 1:
			ServoCtrl::mode = Mode::pos;
			break;
		default:
			break;
 8000288:	e007      	b.n	800029a <_ZN9ServoCtrl7setModeEh+0x42>
			ServoCtrl::mode = Mode::dis;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2200      	movs	r2, #0
 800028e:	615a      	str	r2, [r3, #20]
			break;
 8000290:	e003      	b.n	800029a <_ZN9ServoCtrl7setModeEh+0x42>
			ServoCtrl::mode = Mode::pos;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2201      	movs	r2, #1
 8000296:	615a      	str	r2, [r3, #20]
			break;
 8000298:	bf00      	nop
		}
		return true;
 800029a:	2301      	movs	r3, #1
 800029c:	e000      	b.n	80002a0 <_ZN9ServoCtrl7setModeEh+0x48>
	}else{
		return false;
 800029e:	2300      	movs	r3, #0
	}
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40010c00 	.word	0x40010c00

080002ac <_ZN9ServoCtrl5resetER17TIM_HandleTypeDefS1_>:

Mode ServoCtrl::getMode(){
	return mode;
}

bool ServoCtrl::reset(TIM_HandleTypeDef &htim2, TIM_HandleTypeDef &htim3){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80002b8:	2100      	movs	r1, #0
 80002ba:	68b8      	ldr	r0, [r7, #8]
 80002bc:	f002 ff38 	bl	8003130 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80002c0:	2104      	movs	r1, #4
 80002c2:	68b8      	ldr	r0, [r7, #8]
 80002c4:	f002 ff34 	bl	8003130 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80002c8:	2108      	movs	r1, #8
 80002ca:	68b8      	ldr	r0, [r7, #8]
 80002cc:	f002 ff30 	bl	8003130 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80002d0:	210c      	movs	r1, #12
 80002d2:	68b8      	ldr	r0, [r7, #8]
 80002d4:	f002 ff2c 	bl	8003130 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80002d8:	2100      	movs	r1, #0
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f002 ff28 	bl	8003130 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80002e0:	2104      	movs	r1, #4
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f002 ff24 	bl	8003130 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80002e8:	2108      	movs	r1, #8
 80002ea:	6878      	ldr	r0, [r7, #4]
 80002ec:	f002 ff20 	bl	8003130 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80002f0:	210c      	movs	r1, #12
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f002 ff1c 	bl	8003130 <HAL_TIM_PWM_Stop>
	mode = Mode::dis;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	2200      	movs	r2, #0
 80002fc:	615a      	str	r2, [r3, #20]
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000304:	4806      	ldr	r0, [pc, #24]	; (8000320 <_ZN9ServoCtrl5resetER17TIM_HandleTypeDefS1_+0x74>)
 8000306:	f002 f988 	bl	800261a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 800030a:	2201      	movs	r2, #1
 800030c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000310:	4803      	ldr	r0, [pc, #12]	; (8000320 <_ZN9ServoCtrl5resetER17TIM_HandleTypeDefS1_+0x74>)
 8000312:	f002 f982 	bl	800261a <HAL_GPIO_WritePin>
	return true;
 8000316:	2301      	movs	r3, #1
}
 8000318:	4618      	mov	r0, r3
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40010c00 	.word	0x40010c00

08000324 <_ZN9ServoCtrl9startPWM_ER17TIM_HandleTypeDefm>:

void ServoCtrl::startPWM_(TIM_HandleTypeDef &htim, uint32_t Channel){
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	60b9      	str	r1, [r7, #8]
 800032e:	607a      	str	r2, [r7, #4]
	if(htim.ChannelState[Channel/4] == HAL_TIM_CHANNEL_STATE_READY){
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	089b      	lsrs	r3, r3, #2
 8000334:	68ba      	ldr	r2, [r7, #8]
 8000336:	4413      	add	r3, r2
 8000338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800033c:	b2db      	uxtb	r3, r3
 800033e:	2b01      	cmp	r3, #1
 8000340:	bf0c      	ite	eq
 8000342:	2301      	moveq	r3, #1
 8000344:	2300      	movne	r3, #0
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2b00      	cmp	r3, #0
 800034a:	d00f      	beq.n	800036c <_ZN9ServoCtrl9startPWM_ER17TIM_HandleTypeDefm+0x48>
		if(HAL_TIM_PWM_Start(&htim, Channel) == HAL_ERROR){
 800034c:	6879      	ldr	r1, [r7, #4]
 800034e:	68b8      	ldr	r0, [r7, #8]
 8000350:	f002 fe4c 	bl	8002fec <HAL_TIM_PWM_Start>
 8000354:	4603      	mov	r3, r0
 8000356:	2b01      	cmp	r3, #1
 8000358:	bf0c      	ite	eq
 800035a:	2301      	moveq	r3, #1
 800035c:	2300      	movne	r3, #0
 800035e:	b2db      	uxtb	r3, r3
 8000360:	2b00      	cmp	r3, #0
 8000362:	d003      	beq.n	800036c <_ZN9ServoCtrl9startPWM_ER17TIM_HandleTypeDefm+0x48>
			TIM_ERROR(htim, Channel);
 8000364:	6879      	ldr	r1, [r7, #4]
 8000366:	68b8      	ldr	r0, [r7, #8]
 8000368:	f7ff ff6a 	bl	8000240 <_Z9TIM_ERRORR17TIM_HandleTypeDefm>
		}
	}
}
 800036c:	bf00      	nop
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <_ZN9ServoCtrl8startPWMER17TIM_HandleTypeDefS1_>:

void ServoCtrl::startPWM(TIM_HandleTypeDef &htim2, TIM_HandleTypeDef &htim3){
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	60f8      	str	r0, [r7, #12]
 800037c:	60b9      	str	r1, [r7, #8]
 800037e:	607a      	str	r2, [r7, #4]
	if((mode == Mode::pos)){
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d133      	bne.n	80003f0 <_ZN9ServoCtrl8startPWMER17TIM_HandleTypeDefS1_+0x7c>
		startPWM_(htim2,TIM_CHANNEL_1);
 8000388:	2200      	movs	r2, #0
 800038a:	68b9      	ldr	r1, [r7, #8]
 800038c:	68f8      	ldr	r0, [r7, #12]
 800038e:	f7ff ffc9 	bl	8000324 <_ZN9ServoCtrl9startPWM_ER17TIM_HandleTypeDefm>
		startPWM_(htim2,TIM_CHANNEL_2);
 8000392:	2204      	movs	r2, #4
 8000394:	68b9      	ldr	r1, [r7, #8]
 8000396:	68f8      	ldr	r0, [r7, #12]
 8000398:	f7ff ffc4 	bl	8000324 <_ZN9ServoCtrl9startPWM_ER17TIM_HandleTypeDefm>
		startPWM_(htim2,TIM_CHANNEL_3);
 800039c:	2208      	movs	r2, #8
 800039e:	68b9      	ldr	r1, [r7, #8]
 80003a0:	68f8      	ldr	r0, [r7, #12]
 80003a2:	f7ff ffbf 	bl	8000324 <_ZN9ServoCtrl9startPWM_ER17TIM_HandleTypeDefm>
		startPWM_(htim2,TIM_CHANNEL_4);
 80003a6:	220c      	movs	r2, #12
 80003a8:	68b9      	ldr	r1, [r7, #8]
 80003aa:	68f8      	ldr	r0, [r7, #12]
 80003ac:	f7ff ffba 	bl	8000324 <_ZN9ServoCtrl9startPWM_ER17TIM_HandleTypeDefm>

		startPWM_(htim3,TIM_CHANNEL_1);
 80003b0:	2200      	movs	r2, #0
 80003b2:	6879      	ldr	r1, [r7, #4]
 80003b4:	68f8      	ldr	r0, [r7, #12]
 80003b6:	f7ff ffb5 	bl	8000324 <_ZN9ServoCtrl9startPWM_ER17TIM_HandleTypeDefm>
		startPWM_(htim3,TIM_CHANNEL_2);
 80003ba:	2204      	movs	r2, #4
 80003bc:	6879      	ldr	r1, [r7, #4]
 80003be:	68f8      	ldr	r0, [r7, #12]
 80003c0:	f7ff ffb0 	bl	8000324 <_ZN9ServoCtrl9startPWM_ER17TIM_HandleTypeDefm>
		startPWM_(htim3,TIM_CHANNEL_3);
 80003c4:	2208      	movs	r2, #8
 80003c6:	6879      	ldr	r1, [r7, #4]
 80003c8:	68f8      	ldr	r0, [r7, #12]
 80003ca:	f7ff ffab 	bl	8000324 <_ZN9ServoCtrl9startPWM_ER17TIM_HandleTypeDefm>
		startPWM_(htim3,TIM_CHANNEL_4);
 80003ce:	220c      	movs	r2, #12
 80003d0:	6879      	ldr	r1, [r7, #4]
 80003d2:	68f8      	ldr	r0, [r7, #12]
 80003d4:	f7ff ffa6 	bl	8000324 <_ZN9ServoCtrl9startPWM_ER17TIM_HandleTypeDefm>

		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003de:	4806      	ldr	r0, [pc, #24]	; (80003f8 <_ZN9ServoCtrl8startPWMER17TIM_HandleTypeDefS1_+0x84>)
 80003e0:	f002 f91b 	bl	800261a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ea:	4803      	ldr	r0, [pc, #12]	; (80003f8 <_ZN9ServoCtrl8startPWMER17TIM_HandleTypeDefS1_+0x84>)
 80003ec:	f002 f915 	bl	800261a <HAL_GPIO_WritePin>
	}
}
 80003f0:	bf00      	nop
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40010c00 	.word	0x40010c00

080003fc <_ZN9ServoCtrl8stopPWM_ER17TIM_HandleTypeDefm>:

void ServoCtrl::stopPWM_(TIM_HandleTypeDef &htim, uint32_t Channel){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
	if(htim.ChannelState[Channel/4] == HAL_TIM_CHANNEL_STATE_BUSY){
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	089b      	lsrs	r3, r3, #2
 800040c:	68ba      	ldr	r2, [r7, #8]
 800040e:	4413      	add	r3, r2
 8000410:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000414:	b2db      	uxtb	r3, r3
 8000416:	2b02      	cmp	r3, #2
 8000418:	bf0c      	ite	eq
 800041a:	2301      	moveq	r3, #1
 800041c:	2300      	movne	r3, #0
 800041e:	b2db      	uxtb	r3, r3
 8000420:	2b00      	cmp	r3, #0
 8000422:	d00f      	beq.n	8000444 <_ZN9ServoCtrl8stopPWM_ER17TIM_HandleTypeDefm+0x48>
		if(HAL_TIM_PWM_Stop(&htim, Channel) == HAL_ERROR){
 8000424:	6879      	ldr	r1, [r7, #4]
 8000426:	68b8      	ldr	r0, [r7, #8]
 8000428:	f002 fe82 	bl	8003130 <HAL_TIM_PWM_Stop>
 800042c:	4603      	mov	r3, r0
 800042e:	2b01      	cmp	r3, #1
 8000430:	bf0c      	ite	eq
 8000432:	2301      	moveq	r3, #1
 8000434:	2300      	movne	r3, #0
 8000436:	b2db      	uxtb	r3, r3
 8000438:	2b00      	cmp	r3, #0
 800043a:	d003      	beq.n	8000444 <_ZN9ServoCtrl8stopPWM_ER17TIM_HandleTypeDefm+0x48>
			TIM_ERROR(htim, Channel);
 800043c:	6879      	ldr	r1, [r7, #4]
 800043e:	68b8      	ldr	r0, [r7, #8]
 8000440:	f7ff fefe 	bl	8000240 <_Z9TIM_ERRORR17TIM_HandleTypeDefm>
		}
	}
}
 8000444:	bf00      	nop
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <_ZN9ServoCtrl7stopPWMER17TIM_HandleTypeDefS1_>:

void ServoCtrl::stopPWM(TIM_HandleTypeDef &htim2, TIM_HandleTypeDef &htim3){
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	607a      	str	r2, [r7, #4]
	if((HAL_GPIO_ReadPin(EMS_GPIO_Port,EMS_Pin) == GPIO_PIN_RESET)||(mode == Mode::dis)){
 8000458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800045c:	4826      	ldr	r0, [pc, #152]	; (80004f8 <_ZN9ServoCtrl7stopPWMER17TIM_HandleTypeDefS1_+0xac>)
 800045e:	f002 f8c5 	bl	80025ec <HAL_GPIO_ReadPin>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d003      	beq.n	8000470 <_ZN9ServoCtrl7stopPWMER17TIM_HandleTypeDefS1_+0x24>
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d101      	bne.n	8000474 <_ZN9ServoCtrl7stopPWMER17TIM_HandleTypeDefS1_+0x28>
 8000470:	2301      	movs	r3, #1
 8000472:	e000      	b.n	8000476 <_ZN9ServoCtrl7stopPWMER17TIM_HandleTypeDefS1_+0x2a>
 8000474:	2300      	movs	r3, #0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d03a      	beq.n	80004f0 <_ZN9ServoCtrl7stopPWMER17TIM_HandleTypeDefS1_+0xa4>
		if(mode != Mode::dis){
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d002      	beq.n	8000488 <_ZN9ServoCtrl7stopPWMER17TIM_HandleTypeDefS1_+0x3c>
			mode = Mode::dis;
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	2200      	movs	r2, #0
 8000486:	615a      	str	r2, [r3, #20]
		}
		stopPWM_(htim2, TIM_CHANNEL_1);
 8000488:	2200      	movs	r2, #0
 800048a:	68b9      	ldr	r1, [r7, #8]
 800048c:	68f8      	ldr	r0, [r7, #12]
 800048e:	f7ff ffb5 	bl	80003fc <_ZN9ServoCtrl8stopPWM_ER17TIM_HandleTypeDefm>
		stopPWM_(htim2, TIM_CHANNEL_2);
 8000492:	2204      	movs	r2, #4
 8000494:	68b9      	ldr	r1, [r7, #8]
 8000496:	68f8      	ldr	r0, [r7, #12]
 8000498:	f7ff ffb0 	bl	80003fc <_ZN9ServoCtrl8stopPWM_ER17TIM_HandleTypeDefm>
		stopPWM_(htim2, TIM_CHANNEL_3);
 800049c:	2208      	movs	r2, #8
 800049e:	68b9      	ldr	r1, [r7, #8]
 80004a0:	68f8      	ldr	r0, [r7, #12]
 80004a2:	f7ff ffab 	bl	80003fc <_ZN9ServoCtrl8stopPWM_ER17TIM_HandleTypeDefm>
		stopPWM_(htim2, TIM_CHANNEL_4);
 80004a6:	220c      	movs	r2, #12
 80004a8:	68b9      	ldr	r1, [r7, #8]
 80004aa:	68f8      	ldr	r0, [r7, #12]
 80004ac:	f7ff ffa6 	bl	80003fc <_ZN9ServoCtrl8stopPWM_ER17TIM_HandleTypeDefm>

		stopPWM_(htim2, TIM_CHANNEL_1);
 80004b0:	2200      	movs	r2, #0
 80004b2:	68b9      	ldr	r1, [r7, #8]
 80004b4:	68f8      	ldr	r0, [r7, #12]
 80004b6:	f7ff ffa1 	bl	80003fc <_ZN9ServoCtrl8stopPWM_ER17TIM_HandleTypeDefm>
		stopPWM_(htim2, TIM_CHANNEL_2);
 80004ba:	2204      	movs	r2, #4
 80004bc:	68b9      	ldr	r1, [r7, #8]
 80004be:	68f8      	ldr	r0, [r7, #12]
 80004c0:	f7ff ff9c 	bl	80003fc <_ZN9ServoCtrl8stopPWM_ER17TIM_HandleTypeDefm>
		stopPWM_(htim2, TIM_CHANNEL_3);
 80004c4:	2208      	movs	r2, #8
 80004c6:	68b9      	ldr	r1, [r7, #8]
 80004c8:	68f8      	ldr	r0, [r7, #12]
 80004ca:	f7ff ff97 	bl	80003fc <_ZN9ServoCtrl8stopPWM_ER17TIM_HandleTypeDefm>
		stopPWM_(htim2, TIM_CHANNEL_4);
 80004ce:	220c      	movs	r2, #12
 80004d0:	68b9      	ldr	r1, [r7, #8]
 80004d2:	68f8      	ldr	r0, [r7, #12]
 80004d4:	f7ff ff92 	bl	80003fc <_ZN9ServoCtrl8stopPWM_ER17TIM_HandleTypeDefm>

		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004de:	4806      	ldr	r0, [pc, #24]	; (80004f8 <_ZN9ServoCtrl7stopPWMER17TIM_HandleTypeDefS1_+0xac>)
 80004e0:	f002 f89b 	bl	800261a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <_ZN9ServoCtrl7stopPWMER17TIM_HandleTypeDefS1_+0xac>)
 80004ec:	f002 f895 	bl	800261a <HAL_GPIO_WritePin>
	}
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40010c00 	.word	0x40010c00

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fee8 	bl	80012d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f80f 	bl	8000526 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f9e0 	bl	80008cc <MX_GPIO_Init>
  MX_CAN_Init();
 800050c:	f000 f850 	bl	80005b0 <MX_CAN_Init>
  MX_TIM2_Init();
 8000510:	f000 f884 	bl	800061c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000514:	f000 f918 	bl	8000748 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000518:	f000 f9ae 	bl	8000878 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
main_cpp();
 800051c:	f000 fe1a 	bl	8001154 <main_cpp>
 8000520:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  }
  /* USER CODE END 3 */
}
 8000522:	4618      	mov	r0, r3
 8000524:	bd80      	pop	{r7, pc}

08000526 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b090      	sub	sp, #64	; 0x40
 800052a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052c:	f107 0318 	add.w	r3, r7, #24
 8000530:	2228      	movs	r2, #40	; 0x28
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f003 fbc9 	bl	8003ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000548:	2301      	movs	r3, #1
 800054a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000550:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	2301      	movs	r3, #1
 8000558:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000562:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000564:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000568:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	f107 0318 	add.w	r3, r7, #24
 800056e:	4618      	mov	r0, r3
 8000570:	f002 f884 	bl	800267c <HAL_RCC_OscConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800057a:	f000 fa21 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	230f      	movs	r3, #15
 8000580:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000582:	2302      	movs	r3, #2
 8000584:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800058a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800058e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2102      	movs	r1, #2
 8000598:	4618      	mov	r0, r3
 800059a:	f002 faf1 	bl	8002b80 <HAL_RCC_ClockConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005a4:	f000 fa0c 	bl	80009c0 <Error_Handler>
  }
}
 80005a8:	bf00      	nop
 80005aa:	3740      	adds	r7, #64	; 0x40
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80005b4:	4b17      	ldr	r3, [pc, #92]	; (8000614 <MX_CAN_Init+0x64>)
 80005b6:	4a18      	ldr	r2, [pc, #96]	; (8000618 <MX_CAN_Init+0x68>)
 80005b8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <MX_CAN_Init+0x64>)
 80005bc:	2202      	movs	r2, #2
 80005be:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <MX_CAN_Init+0x64>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <MX_CAN_Init+0x64>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MX_CAN_Init+0x64>)
 80005ce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005d2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_CAN_Init+0x64>)
 80005d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005da:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <MX_CAN_Init+0x64>)
 80005de:	2200      	movs	r2, #0
 80005e0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_CAN_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_CAN_Init+0x64>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_CAN_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <MX_CAN_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_CAN_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_CAN_Init+0x64>)
 8000602:	f000 feed 	bl	80013e0 <HAL_CAN_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800060c:	f000 f9d8 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000040 	.word	0x20000040
 8000618:	40006400 	.word	0x40006400

0800061c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08e      	sub	sp, #56	; 0x38
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
 8000648:	615a      	str	r2, [r3, #20]
 800064a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800064c:	4b3d      	ldr	r3, [pc, #244]	; (8000744 <MX_TIM2_Init+0x128>)
 800064e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000652:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8000654:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <MX_TIM2_Init+0x128>)
 8000656:	2202      	movs	r2, #2
 8000658:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065a:	4b3a      	ldr	r3, [pc, #232]	; (8000744 <MX_TIM2_Init+0x128>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999;
 8000660:	4b38      	ldr	r3, [pc, #224]	; (8000744 <MX_TIM2_Init+0x128>)
 8000662:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000666:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000668:	4b36      	ldr	r3, [pc, #216]	; (8000744 <MX_TIM2_Init+0x128>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066e:	4b35      	ldr	r3, [pc, #212]	; (8000744 <MX_TIM2_Init+0x128>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000674:	4833      	ldr	r0, [pc, #204]	; (8000744 <MX_TIM2_Init+0x128>)
 8000676:	f002 fc11 	bl	8002e9c <HAL_TIM_Base_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000680:	f000 f99e 	bl	80009c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800068a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800068e:	4619      	mov	r1, r3
 8000690:	482c      	ldr	r0, [pc, #176]	; (8000744 <MX_TIM2_Init+0x128>)
 8000692:	f002 fe73 	bl	800337c <HAL_TIM_ConfigClockSource>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800069c:	f000 f990 	bl	80009c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006a0:	4828      	ldr	r0, [pc, #160]	; (8000744 <MX_TIM2_Init+0x128>)
 80006a2:	f002 fc4a 	bl	8002f3a <HAL_TIM_PWM_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80006ac:	f000 f988 	bl	80009c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b0:	2300      	movs	r3, #0
 80006b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4619      	mov	r1, r3
 80006be:	4821      	ldr	r0, [pc, #132]	; (8000744 <MX_TIM2_Init+0x128>)
 80006c0:	f003 f9c8 	bl	8003a54 <HAL_TIMEx_MasterConfigSynchronization>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80006ca:	f000 f979 	bl	80009c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ce:	2360      	movs	r3, #96	; 0x60
 80006d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	4619      	mov	r1, r3
 80006e4:	4817      	ldr	r0, [pc, #92]	; (8000744 <MX_TIM2_Init+0x128>)
 80006e6:	f002 fd87 	bl	80031f8 <HAL_TIM_PWM_ConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80006f0:	f000 f966 	bl	80009c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2204      	movs	r2, #4
 80006f8:	4619      	mov	r1, r3
 80006fa:	4812      	ldr	r0, [pc, #72]	; (8000744 <MX_TIM2_Init+0x128>)
 80006fc:	f002 fd7c 	bl	80031f8 <HAL_TIM_PWM_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000706:	f000 f95b 	bl	80009c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2208      	movs	r2, #8
 800070e:	4619      	mov	r1, r3
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <MX_TIM2_Init+0x128>)
 8000712:	f002 fd71 	bl	80031f8 <HAL_TIM_PWM_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800071c:	f000 f950 	bl	80009c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	220c      	movs	r2, #12
 8000724:	4619      	mov	r1, r3
 8000726:	4807      	ldr	r0, [pc, #28]	; (8000744 <MX_TIM2_Init+0x128>)
 8000728:	f002 fd66 	bl	80031f8 <HAL_TIM_PWM_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000732:	f000 f945 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000736:	4803      	ldr	r0, [pc, #12]	; (8000744 <MX_TIM2_Init+0x128>)
 8000738:	f000 fa12 	bl	8000b60 <HAL_TIM_MspPostInit>

}
 800073c:	bf00      	nop
 800073e:	3738      	adds	r7, #56	; 0x38
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000068 	.word	0x20000068

08000748 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08e      	sub	sp, #56	; 0x38
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
 8000774:	615a      	str	r2, [r3, #20]
 8000776:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000778:	4b3d      	ldr	r3, [pc, #244]	; (8000870 <MX_TIM3_Init+0x128>)
 800077a:	4a3e      	ldr	r2, [pc, #248]	; (8000874 <MX_TIM3_Init+0x12c>)
 800077c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 800077e:	4b3c      	ldr	r3, [pc, #240]	; (8000870 <MX_TIM3_Init+0x128>)
 8000780:	2202      	movs	r2, #2
 8000782:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <MX_TIM3_Init+0x128>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 800078a:	4b39      	ldr	r3, [pc, #228]	; (8000870 <MX_TIM3_Init+0x128>)
 800078c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000790:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000792:	4b37      	ldr	r3, [pc, #220]	; (8000870 <MX_TIM3_Init+0x128>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000798:	4b35      	ldr	r3, [pc, #212]	; (8000870 <MX_TIM3_Init+0x128>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800079e:	4834      	ldr	r0, [pc, #208]	; (8000870 <MX_TIM3_Init+0x128>)
 80007a0:	f002 fb7c 	bl	8002e9c <HAL_TIM_Base_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80007aa:	f000 f909 	bl	80009c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007b8:	4619      	mov	r1, r3
 80007ba:	482d      	ldr	r0, [pc, #180]	; (8000870 <MX_TIM3_Init+0x128>)
 80007bc:	f002 fdde 	bl	800337c <HAL_TIM_ConfigClockSource>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80007c6:	f000 f8fb 	bl	80009c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007ca:	4829      	ldr	r0, [pc, #164]	; (8000870 <MX_TIM3_Init+0x128>)
 80007cc:	f002 fbb5 	bl	8002f3a <HAL_TIM_PWM_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80007d6:	f000 f8f3 	bl	80009c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007e2:	f107 0320 	add.w	r3, r7, #32
 80007e6:	4619      	mov	r1, r3
 80007e8:	4821      	ldr	r0, [pc, #132]	; (8000870 <MX_TIM3_Init+0x128>)
 80007ea:	f003 f933 	bl	8003a54 <HAL_TIMEx_MasterConfigSynchronization>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80007f4:	f000 f8e4 	bl	80009c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f8:	2360      	movs	r3, #96	; 0x60
 80007fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2200      	movs	r2, #0
 800080c:	4619      	mov	r1, r3
 800080e:	4818      	ldr	r0, [pc, #96]	; (8000870 <MX_TIM3_Init+0x128>)
 8000810:	f002 fcf2 	bl	80031f8 <HAL_TIM_PWM_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800081a:	f000 f8d1 	bl	80009c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2204      	movs	r2, #4
 8000822:	4619      	mov	r1, r3
 8000824:	4812      	ldr	r0, [pc, #72]	; (8000870 <MX_TIM3_Init+0x128>)
 8000826:	f002 fce7 	bl	80031f8 <HAL_TIM_PWM_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000830:	f000 f8c6 	bl	80009c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2208      	movs	r2, #8
 8000838:	4619      	mov	r1, r3
 800083a:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_TIM3_Init+0x128>)
 800083c:	f002 fcdc 	bl	80031f8 <HAL_TIM_PWM_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000846:	f000 f8bb 	bl	80009c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	220c      	movs	r2, #12
 800084e:	4619      	mov	r1, r3
 8000850:	4807      	ldr	r0, [pc, #28]	; (8000870 <MX_TIM3_Init+0x128>)
 8000852:	f002 fcd1 	bl	80031f8 <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800085c:	f000 f8b0 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <MX_TIM3_Init+0x128>)
 8000862:	f000 f97d 	bl	8000b60 <HAL_TIM_MspPostInit>

}
 8000866:	bf00      	nop
 8000868:	3738      	adds	r7, #56	; 0x38
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000b0 	.word	0x200000b0
 8000874:	40000400 	.word	0x40000400

08000878 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USART1_UART_Init+0x4c>)
 800087e:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <MX_USART1_UART_Init+0x50>)
 8000880:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_USART1_UART_Init+0x4c>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART1_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART1_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USART1_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART1_UART_Init+0x4c>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USART1_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART1_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USART1_UART_Init+0x4c>)
 80008b0:	f003 f92e 	bl	8003b10 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ba:	f000 f881 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000f8 	.word	0x200000f8
 80008c8:	40013800 	.word	0x40013800

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e0:	4b33      	ldr	r3, [pc, #204]	; (80009b0 <MX_GPIO_Init+0xe4>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a32      	ldr	r2, [pc, #200]	; (80009b0 <MX_GPIO_Init+0xe4>)
 80008e6:	f043 0320 	orr.w	r3, r3, #32
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <MX_GPIO_Init+0xe4>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0320 	and.w	r3, r3, #32
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <MX_GPIO_Init+0xe4>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a2c      	ldr	r2, [pc, #176]	; (80009b0 <MX_GPIO_Init+0xe4>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <MX_GPIO_Init+0xe4>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <MX_GPIO_Init+0xe4>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a26      	ldr	r2, [pc, #152]	; (80009b0 <MX_GPIO_Init+0xe4>)
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <MX_GPIO_Init+0xe4>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800092e:	4821      	ldr	r0, [pc, #132]	; (80009b4 <MX_GPIO_Init+0xe8>)
 8000930:	f001 fe73 	bl	800261a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093a:	481f      	ldr	r0, [pc, #124]	; (80009b8 <MX_GPIO_Init+0xec>)
 800093c:	f001 fe6d 	bl	800261a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 8000940:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2302      	movs	r3, #2
 8000950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	4619      	mov	r1, r3
 8000958:	4816      	ldr	r0, [pc, #88]	; (80009b4 <MX_GPIO_Init+0xe8>)
 800095a:	f001 fcc3 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMS_Pin */
  GPIO_InitStruct.Pin = EMS_Pin;
 800095e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_GPIO_Init+0xf0>)
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000968:	2302      	movs	r3, #2
 800096a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4619      	mov	r1, r3
 8000972:	4810      	ldr	r0, [pc, #64]	; (80009b4 <MX_GPIO_Init+0xe8>)
 8000974:	f001 fcb6 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_CAN_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin;
 8000978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2302      	movs	r3, #2
 8000988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_CAN_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0310 	add.w	r3, r7, #16
 800098e:	4619      	mov	r1, r3
 8000990:	4809      	ldr	r0, [pc, #36]	; (80009b8 <MX_GPIO_Init+0xec>)
 8000992:	f001 fca7 	bl	80022e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	2028      	movs	r0, #40	; 0x28
 800099c:	f001 fc6b 	bl	8002276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009a0:	2028      	movs	r0, #40	; 0x28
 80009a2:	f001 fc84 	bl	80022ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a6:	bf00      	nop
 80009a8:	3720      	adds	r7, #32
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40010c00 	.word	0x40010c00
 80009b8:	40010800 	.word	0x40010800
 80009bc:	10310000 	.word	0x10310000

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <Error_Handler+0x8>
	...

080009cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_MspInit+0x5c>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <HAL_MspInit+0x5c>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6193      	str	r3, [r2, #24]
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_MspInit+0x5c>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_MspInit+0x5c>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_MspInit+0x5c>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	61d3      	str	r3, [r2, #28]
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_MspInit+0x5c>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <HAL_MspInit+0x60>)
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <HAL_MspInit+0x60>)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40010000 	.word	0x40010000

08000a30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a29      	ldr	r2, [pc, #164]	; (8000af0 <HAL_CAN_MspInit+0xc0>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d14b      	bne.n	8000ae8 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a50:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <HAL_CAN_MspInit+0xc4>)
 8000a52:	69db      	ldr	r3, [r3, #28]
 8000a54:	4a27      	ldr	r2, [pc, #156]	; (8000af4 <HAL_CAN_MspInit+0xc4>)
 8000a56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a5a:	61d3      	str	r3, [r2, #28]
 8000a5c:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <HAL_CAN_MspInit+0xc4>)
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <HAL_CAN_MspInit+0xc4>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a21      	ldr	r2, [pc, #132]	; (8000af4 <HAL_CAN_MspInit+0xc4>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <HAL_CAN_MspInit+0xc4>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4818      	ldr	r0, [pc, #96]	; (8000af8 <HAL_CAN_MspInit+0xc8>)
 8000a96:	f001 fc25 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4812      	ldr	r0, [pc, #72]	; (8000af8 <HAL_CAN_MspInit+0xc8>)
 8000ab0:	f001 fc18 	bl	80022e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_CAN_MspInit+0xcc>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_CAN_MspInit+0xcc>)
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2101      	movs	r1, #1
 8000adc:	2014      	movs	r0, #20
 8000ade:	f001 fbca 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000ae2:	2014      	movs	r0, #20
 8000ae4:	f001 fbe3 	bl	80022ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40006400 	.word	0x40006400
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010c00 	.word	0x40010c00
 8000afc:	40010000 	.word	0x40010000

08000b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b10:	d10c      	bne.n	8000b2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_TIM_Base_MspInit+0x58>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <HAL_TIM_Base_MspInit+0x58>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	61d3      	str	r3, [r2, #28]
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_TIM_Base_MspInit+0x58>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b2a:	e010      	b.n	8000b4e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_TIM_Base_MspInit+0x5c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d10b      	bne.n	8000b4e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_TIM_Base_MspInit+0x58>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_TIM_Base_MspInit+0x58>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	61d3      	str	r3, [r2, #28]
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_TIM_Base_MspInit+0x58>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40000400 	.word	0x40000400

08000b60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0318 	add.w	r3, r7, #24
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b7e:	d118      	bne.n	8000bb2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <HAL_TIM_MspPostInit+0xc4>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a27      	ldr	r2, [pc, #156]	; (8000c24 <HAL_TIM_MspPostInit+0xc4>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <HAL_TIM_MspPostInit+0xc4>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b98:	230f      	movs	r3, #15
 8000b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0318 	add.w	r3, r7, #24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	481f      	ldr	r0, [pc, #124]	; (8000c28 <HAL_TIM_MspPostInit+0xc8>)
 8000bac:	f001 fb9a 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bb0:	e034      	b.n	8000c1c <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <HAL_TIM_MspPostInit+0xcc>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d12f      	bne.n	8000c1c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <HAL_TIM_MspPostInit+0xc4>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a18      	ldr	r2, [pc, #96]	; (8000c24 <HAL_TIM_MspPostInit+0xc4>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <HAL_TIM_MspPostInit+0xc4>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <HAL_TIM_MspPostInit+0xc4>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <HAL_TIM_MspPostInit+0xc4>)
 8000bda:	f043 0308 	orr.w	r3, r3, #8
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_TIM_MspPostInit+0xc4>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0308 	and.w	r3, r3, #8
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bec:	23c0      	movs	r3, #192	; 0xc0
 8000bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0318 	add.w	r3, r7, #24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480a      	ldr	r0, [pc, #40]	; (8000c28 <HAL_TIM_MspPostInit+0xc8>)
 8000c00:	f001 fb70 	bl	80022e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c04:	2303      	movs	r3, #3
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0318 	add.w	r3, r7, #24
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <HAL_TIM_MspPostInit+0xd0>)
 8000c18:	f001 fb64 	bl	80022e4 <HAL_GPIO_Init>
}
 8000c1c:	bf00      	nop
 8000c1e:	3728      	adds	r7, #40	; 0x28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010800 	.word	0x40010800
 8000c2c:	40000400 	.word	0x40000400
 8000c30:	40010c00 	.word	0x40010c00

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a22      	ldr	r2, [pc, #136]	; (8000cd8 <HAL_UART_MspInit+0xa4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d13d      	bne.n	8000cd0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c54:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <HAL_UART_MspInit+0xa8>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a20      	ldr	r2, [pc, #128]	; (8000cdc <HAL_UART_MspInit+0xa8>)
 8000c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <HAL_UART_MspInit+0xa8>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_UART_MspInit+0xa8>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a1a      	ldr	r2, [pc, #104]	; (8000cdc <HAL_UART_MspInit+0xa8>)
 8000c72:	f043 0308 	orr.w	r3, r3, #8
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_UART_MspInit+0xa8>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0308 	and.w	r3, r3, #8
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c84:	2340      	movs	r3, #64	; 0x40
 8000c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	4812      	ldr	r0, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0xac>)
 8000c98:	f001 fb24 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <HAL_UART_MspInit+0xac>)
 8000cb0:	f001 fb18 	bl	80022e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_UART_MspInit+0xb0>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cca:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_UART_MspInit+0xb0>)
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	; 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40013800 	.word	0x40013800
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010c00 	.word	0x40010c00
 8000ce4:	40010000 	.word	0x40010000

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2e:	f000 fb17 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d3e:	f000 ffa0 	bl	8001c82 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000040 	.word	0x20000040

08000d4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMS_Pin);
 8000d50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d54:	f001 fc7a 	bl	800264c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <_ZN7CanCtrlC1Ev>:
	bool receive(CAN_HandleTypeDef &hcan ,uint32_t& RID,uint8_t (&data)[8]);//受信関数(エラー判定のみ)内容は引数に入れ込む。
	bool send(CAN_HandleTypeDef &hcan ,uint32_t TID ,uint8_t (&data)[8], uint8_t dlc);
	void ledCan();
};

inline CanCtrl::CanCtrl(){
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	669a      	str	r2, [r3, #104]	; 0x68
	txHeader_.RTR = CAN_RTR_DATA;            // フレームタイプはデータフレーム
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
	txHeader_.IDE = CAN_ID_STD;              // 標準ID(11ﾋﾞｯﾄ)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
	txHeader_.DLC = 8;                       // データ長は8バイトに
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	619a      	str	r2, [r3, #24]
	txHeader_.TransmitGlobalTime = DISABLE;  // ???
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	771a      	strb	r2, [r3, #28]
	filter_.FilterIdHigh         = 0x300 << 5;               // フィルターIDの上位16ビット
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000d9c:	63da      	str	r2, [r3, #60]	; 0x3c
	filter_.FilterIdLow          = 0;                        // フィルターIDの下位16ビット
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	641a      	str	r2, [r3, #64]	; 0x40
	filter_.FilterMaskIdHigh     = 0x7f8 << 5;               // フィルターマスクの上位16ビット
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000daa:	645a      	str	r2, [r3, #68]	; 0x44
	filter_.FilterMaskIdLow      = 0b110;                    // フィルターマスクの下位16ビット
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2206      	movs	r2, #6
 8000db0:	649a      	str	r2, [r3, #72]	; 0x48
	//フィルターマスクは1が確定させたいところで0が無視したいところ
	filter_.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	659a      	str	r2, [r3, #88]	; 0x58
	filter_.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	64da      	str	r2, [r3, #76]	; 0x4c
	filter_.FilterBank           = 0;                        // フィルターバンクNo
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	651a      	str	r2, [r3, #80]	; 0x50
	filter_.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモード
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	655a      	str	r2, [r3, #84]	; 0x54
	filter_.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	220e      	movs	r2, #14
 8000dce:	661a      	str	r2, [r3, #96]	; 0x60
	filter_.FilterActivation     = ENABLE;                   // フィルター無効／有効
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <_ZN7CanCtrl4initER19__CAN_HandleTypeDef>:

inline void CanCtrl::init(CAN_HandleTypeDef &hcan){
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
	HAL_CAN_ConfigFilter(&hcan, &filter_);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	333c      	adds	r3, #60	; 0x3c
 8000df0:	4619      	mov	r1, r3
 8000df2:	6838      	ldr	r0, [r7, #0]
 8000df4:	f000 fbef 	bl	80015d6 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan);
 8000df8:	6838      	ldr	r0, [r7, #0]
 8000dfa:	f000 fcb5 	bl	8001768 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000dfe:	2102      	movs	r1, #2
 8000e00:	6838      	ldr	r0, [r7, #0]
 8000e02:	f000 ff19 	bl	8001c38 <HAL_CAN_ActivateNotification>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_ZN7CanCtrl7receiveER19__CAN_HandleTypeDefRmRA8_h>:

inline bool CanCtrl::receive(CAN_HandleTypeDef &hcan ,uint32_t& RID,uint8_t (&data)[8]){
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	603b      	str	r3, [r7, #0]
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rxHeader_, data) == HAL_OK){
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f103 0220 	add.w	r2, r3, #32
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	2100      	movs	r1, #0
 8000e26:	68b8      	ldr	r0, [r7, #8]
 8000e28:	f000 fde5 	bl	80019f6 <HAL_CAN_GetRxMessage>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	bf0c      	ite	eq
 8000e32:	2301      	moveq	r3, #1
 8000e34:	2300      	movne	r3, #0
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d018      	beq.n	8000e6e <_ZN7CanCtrl7receiveER19__CAN_HandleTypeDefRmRA8_h+0x60>
		RID = rxHeader_.StdId;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	6a1a      	ldr	r2, [r3, #32]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0;i<8;i++){
 8000e44:	2300      	movs	r3, #0
 8000e46:	75fb      	strb	r3, [r7, #23]
 8000e48:	e008      	b.n	8000e5c <_ZN7CanCtrl7receiveER19__CAN_HandleTypeDefRmRA8_h+0x4e>
			rxData[i] = data[i];
 8000e4a:	7dfa      	ldrb	r2, [r7, #23]
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
 8000e4e:	6839      	ldr	r1, [r7, #0]
 8000e50:	5c89      	ldrb	r1, [r1, r2]
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0;i<8;i++){
 8000e56:	7dfb      	ldrb	r3, [r7, #23]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	75fb      	strb	r3, [r7, #23]
 8000e5c:	7dfb      	ldrb	r3, [r7, #23]
 8000e5e:	2b07      	cmp	r3, #7
 8000e60:	d9f3      	bls.n	8000e4a <_ZN7CanCtrl7receiveER19__CAN_HandleTypeDefRmRA8_h+0x3c>
		}
		canFlug_ = CanLed::received;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2201      	movs	r2, #1
 8000e66:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		return true;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e000      	b.n	8000e70 <_ZN7CanCtrl7receiveER19__CAN_HandleTypeDefRmRA8_h+0x62>
	}
	else{
		return false;
 8000e6e:	2300      	movs	r3, #0
	}
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh>:

inline bool CanCtrl::send(CAN_HandleTypeDef &hcan ,uint32_t TID/*送信用ID*/,uint8_t (&data)[8]/*送信内容*/,uint8_t dlc){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	603b      	str	r3, [r7, #0]
	txHeader_.StdId = TID;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
	txHeader_.DLC = dlc;
 8000e8c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	619a      	str	r2, [r3, #24]
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8000e94:	68b8      	ldr	r0, [r7, #8]
 8000e96:	f000 fd7a 	bl	800198e <HAL_CAN_GetTxMailboxesFreeLevel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf14      	ite	ne
 8000ea0:	2301      	movne	r3, #1
 8000ea2:	2300      	moveq	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d018      	beq.n	8000edc <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh+0x64>
		uint32_t TxMailbox;//ボックス番号(ここに返ってくる)
		if (HAL_CAN_AddTxMessage(&hcan,&txHeader_,data,&TxMailbox) == HAL_OK){
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f103 0108 	add.w	r1, r3, #8
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	68b8      	ldr	r0, [r7, #8]
 8000eb8:	f000 fc9a 	bl	80017f0 <HAL_CAN_AddTxMessage>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	bf0c      	ite	eq
 8000ec2:	2301      	moveq	r3, #1
 8000ec4:	2300      	movne	r3, #0
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d005      	beq.n	8000ed8 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh+0x60>
			canFlug_ = CanLed::sended;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2202      	movs	r2, #2
 8000ed0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			return true;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e002      	b.n	8000ede <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh+0x66>
		}
		else{
			return false;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e000      	b.n	8000ede <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh+0x66>
		}
	}
	else{
		return false;
 8000edc:	2300      	movs	r3, #0
	}
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <_ZN7CanCtrl6ledCanEv>:

inline void CanCtrl::ledCan(){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	if(canFlug_ == CanLed::received){
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d10f      	bne.n	8000f1a <_ZN7CanCtrl6ledCanEv+0x32>
		HAL_GPIO_WritePin(LED_CAN_GPIO_Port,LED_CAN_Pin,GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f00:	481c      	ldr	r0, [pc, #112]	; (8000f74 <_ZN7CanCtrl6ledCanEv+0x8c>)
 8000f02:	f001 fb8a 	bl	800261a <HAL_GPIO_WritePin>
		canTick_ = HAL_GetTick();
 8000f06:	f000 fa3d 	bl	8001384 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	669a      	str	r2, [r3, #104]	; 0x68
		canFlug_ = CanLed::none;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		canFlug_ = CanLed::none;
	}
	else if(HAL_GetTick() > canTick_+150){
		HAL_GPIO_WritePin(LED_CAN_GPIO_Port,LED_CAN_Pin,GPIO_PIN_RESET);
	}
}
 8000f18:	e027      	b.n	8000f6a <_ZN7CanCtrl6ledCanEv+0x82>
	}else if(canFlug_ == CanLed::sended){
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d10f      	bne.n	8000f44 <_ZN7CanCtrl6ledCanEv+0x5c>
		HAL_GPIO_WritePin(LED_CAN_GPIO_Port,LED_CAN_Pin,GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2a:	4812      	ldr	r0, [pc, #72]	; (8000f74 <_ZN7CanCtrl6ledCanEv+0x8c>)
 8000f2c:	f001 fb75 	bl	800261a <HAL_GPIO_WritePin>
		canTick_ = HAL_GetTick();
 8000f30:	f000 fa28 	bl	8001384 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	669a      	str	r2, [r3, #104]	; 0x68
		canFlug_ = CanLed::none;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 8000f42:	e012      	b.n	8000f6a <_ZN7CanCtrl6ledCanEv+0x82>
	else if(HAL_GetTick() > canTick_+150){
 8000f44:	f000 fa1e 	bl	8001384 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f4e:	3396      	adds	r3, #150	; 0x96
 8000f50:	429a      	cmp	r2, r3
 8000f52:	bf8c      	ite	hi
 8000f54:	2301      	movhi	r3, #1
 8000f56:	2300      	movls	r3, #0
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d005      	beq.n	8000f6a <_ZN7CanCtrl6ledCanEv+0x82>
		HAL_GPIO_WritePin(LED_CAN_GPIO_Port,LED_CAN_Pin,GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <_ZN7CanCtrl6ledCanEv+0x8c>)
 8000f66:	f001 fb58 	bl	800261a <HAL_GPIO_WritePin>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40010800 	.word	0x40010800

08000f78 <HAL_CAN_RxFifo0MsgPendingCallback>:
extern TIM_HandleTypeDef htim3;
extern CAN_HandleTypeDef hcan;

//volatile int debug_code = 0;

	void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b094      	sub	sp, #80	; 0x50
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	6078      	str	r0, [r7, #4]
		uint32_t receiveID = 0x110;
 8000f80:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f84:	647b      	str	r3, [r7, #68]	; 0x44
		uint8_t receiveData[8] = {0,0,0,0,0,0,0,0};
 8000f86:	4a56      	ldr	r2, [pc, #344]	; (80010e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8000f88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f90:	e883 0003 	stmia.w	r3, {r0, r1}
		if (can.receive(*hcan ,receiveID,receiveData) == false)return;
 8000f94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f98:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4851      	ldr	r0, [pc, #324]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8000fa0:	f7ff ff35 	bl	8000e0e <_ZN7CanCtrl7receiveER19__CAN_HandleTypeDefRmRA8_h>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	bf0c      	ite	eq
 8000faa:	2301      	moveq	r3, #1
 8000fac:	2300      	movne	r3, #0
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f040 808f 	bne.w	80010d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>
		switch(receiveID){
 8000fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fb8:	f240 3202 	movw	r2, #770	; 0x302
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d060      	beq.n	8001082 <HAL_CAN_RxFifo0MsgPendingCallback+0x10a>
 8000fc0:	f240 3202 	movw	r2, #770	; 0x302
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	f200 8087 	bhi.w	80010d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 8000fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000fce:	d004      	beq.n	8000fda <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 8000fd0:	f240 3201 	movw	r2, #769	; 0x301
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d02a      	beq.n	800102e <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
					data[0] = 4;
					can.send(*hcan, 0x303, data, 1);
				}
				break;
			default:
				break;
 8000fd8:	e07e      	b.n	80010d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
				if(servo.setMode(receiveData[0]) == true){
 8000fda:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4841      	ldr	r0, [pc, #260]	; (80010e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8000fe2:	f7ff f939 	bl	8000258 <_ZN9ServoCtrl7setModeEh>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	bf0c      	ite	eq
 8000fec:	2301      	moveq	r3, #1
 8000fee:	2300      	movne	r3, #0
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00d      	beq.n	8001012 <HAL_CAN_RxFifo0MsgPendingCallback+0x9a>
					data[0] = 1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					can.send(*hcan, 0x303, data, 1);
 8000ffc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001000:	2201      	movs	r2, #1
 8001002:	9200      	str	r2, [sp, #0]
 8001004:	f240 3203 	movw	r2, #771	; 0x303
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	4836      	ldr	r0, [pc, #216]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 800100c:	f7ff ff34 	bl	8000e78 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh>
				break;
 8001010:	e063      	b.n	80010da <HAL_CAN_RxFifo0MsgPendingCallback+0x162>
					data[0] = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					can.send(*hcan, 0x303, data, 1);
 8001018:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101c:	2201      	movs	r2, #1
 800101e:	9200      	str	r2, [sp, #0]
 8001020:	f240 3203 	movw	r2, #771	; 0x303
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	482f      	ldr	r0, [pc, #188]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8001028:	f7ff ff26 	bl	8000e78 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh>
				break;
 800102c:	e055      	b.n	80010da <HAL_CAN_RxFifo0MsgPendingCallback+0x162>
				if(servo.setDuty(htim2 ,receiveData) == true){
 800102e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001032:	461a      	mov	r2, r3
 8001034:	492d      	ldr	r1, [pc, #180]	; (80010ec <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001036:	482c      	ldr	r0, [pc, #176]	; (80010e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001038:	f7ff f888 	bl	800014c <_ZN9ServoCtrl7setDutyER17TIM_HandleTypeDefPh>
 800103c:	4603      	mov	r3, r0
 800103e:	2b01      	cmp	r3, #1
 8001040:	bf0c      	ite	eq
 8001042:	2301      	moveq	r3, #1
 8001044:	2300      	movne	r3, #0
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00d      	beq.n	8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
					data[0] = 3;
 800104c:	2303      	movs	r3, #3
 800104e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					can.send(*hcan, 0x303, data, 1);
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	2201      	movs	r2, #1
 8001058:	9200      	str	r2, [sp, #0]
 800105a:	f240 3203 	movw	r2, #771	; 0x303
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4820      	ldr	r0, [pc, #128]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8001062:	f7ff ff09 	bl	8000e78 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh>
				break;
 8001066:	e038      	b.n	80010da <HAL_CAN_RxFifo0MsgPendingCallback+0x162>
					data[0] = 2;
 8001068:	2302      	movs	r3, #2
 800106a:	773b      	strb	r3, [r7, #28]
					can.send(*hcan, 0x303, data, 1);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	2201      	movs	r2, #1
 8001072:	9200      	str	r2, [sp, #0]
 8001074:	f240 3203 	movw	r2, #771	; 0x303
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	481a      	ldr	r0, [pc, #104]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 800107c:	f7ff fefc 	bl	8000e78 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh>
				break;
 8001080:	e02b      	b.n	80010da <HAL_CAN_RxFifo0MsgPendingCallback+0x162>
				if(servo.setDuty(htim3 ,receiveData) == true){
 8001082:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001086:	461a      	mov	r2, r3
 8001088:	4919      	ldr	r1, [pc, #100]	; (80010f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 800108a:	4817      	ldr	r0, [pc, #92]	; (80010e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 800108c:	f7ff f85e 	bl	800014c <_ZN9ServoCtrl7setDutyER17TIM_HandleTypeDefPh>
 8001090:	4603      	mov	r3, r0
 8001092:	2b01      	cmp	r3, #1
 8001094:	bf0c      	ite	eq
 8001096:	2301      	moveq	r3, #1
 8001098:	2300      	movne	r3, #0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00c      	beq.n	80010ba <HAL_CAN_RxFifo0MsgPendingCallback+0x142>
					data[0] = 5;
 80010a0:	2305      	movs	r3, #5
 80010a2:	753b      	strb	r3, [r7, #20]
					can.send(*hcan, 0x303, data, 1);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2201      	movs	r2, #1
 80010aa:	9200      	str	r2, [sp, #0]
 80010ac:	f240 3203 	movw	r2, #771	; 0x303
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	480c      	ldr	r0, [pc, #48]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 80010b4:	f7ff fee0 	bl	8000e78 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh>
				break;
 80010b8:	e00f      	b.n	80010da <HAL_CAN_RxFifo0MsgPendingCallback+0x162>
					data[0] = 4;
 80010ba:	2304      	movs	r3, #4
 80010bc:	733b      	strb	r3, [r7, #12]
					can.send(*hcan, 0x303, data, 1);
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	2201      	movs	r2, #1
 80010c4:	9200      	str	r2, [sp, #0]
 80010c6:	f240 3203 	movw	r2, #771	; 0x303
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 80010ce:	f7ff fed3 	bl	8000e78 <_ZN7CanCtrl4sendER19__CAN_HandleTypeDefmRA8_hh>
				break;
 80010d2:	e002      	b.n	80010da <HAL_CAN_RxFifo0MsgPendingCallback+0x162>
		if (can.receive(*hcan ,receiveID,receiveData) == false)return;
 80010d4:	bf00      	nop
 80010d6:	e000      	b.n	80010da <HAL_CAN_RxFifo0MsgPendingCallback+0x162>
				break;
 80010d8:	bf00      	nop
			}
//		if (solenoid.update(receiveID,receiveData) == false)return;
	}
 80010da:	3748      	adds	r7, #72	; 0x48
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	08003d3c 	.word	0x08003d3c
 80010e4:	20000140 	.word	0x20000140
 80010e8:	20000004 	.word	0x20000004
 80010ec:	20000068 	.word	0x20000068
 80010f0:	200000b0 	.word	0x200000b0

080010f4 <HAL_GPIO_EXTI_Callback>:

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	80fb      	strh	r3, [r7, #6]
		if (!(GPIO_Pin == EMS_Pin))return;
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001104:	d11a      	bne.n	800113c <HAL_GPIO_EXTI_Callback+0x48>
		if (servo.reset(htim2 ,htim3) == true){
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <HAL_GPIO_EXTI_Callback+0x50>)
 8001108:	490f      	ldr	r1, [pc, #60]	; (8001148 <HAL_GPIO_EXTI_Callback+0x54>)
 800110a:	4810      	ldr	r0, [pc, #64]	; (800114c <HAL_GPIO_EXTI_Callback+0x58>)
 800110c:	f7ff f8ce 	bl	80002ac <_ZN9ServoCtrl5resetER17TIM_HandleTypeDefS1_>
 8001110:	4603      	mov	r3, r0
 8001112:	2b01      	cmp	r3, #1
 8001114:	bf0c      	ite	eq
 8001116:	2301      	moveq	r3, #1
 8001118:	2300      	movne	r3, #0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <HAL_GPIO_EXTI_Callback+0x3a>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001126:	480a      	ldr	r0, [pc, #40]	; (8001150 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001128:	f001 fa77 	bl	800261a <HAL_GPIO_WritePin>
 800112c:	e007      	b.n	800113e <HAL_GPIO_EXTI_Callback+0x4a>
		}
		else{
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001134:	4806      	ldr	r0, [pc, #24]	; (8001150 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001136:	f001 fa70 	bl	800261a <HAL_GPIO_WritePin>
 800113a:	e000      	b.n	800113e <HAL_GPIO_EXTI_Callback+0x4a>
		if (!(GPIO_Pin == EMS_Pin))return;
 800113c:	bf00      	nop
		}
	}
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200000b0 	.word	0x200000b0
 8001148:	20000068 	.word	0x20000068
 800114c:	20000004 	.word	0x20000004
 8001150:	40010c00 	.word	0x40010c00

08001154 <main_cpp>:

	void main_cpp(){
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
		for(uint8_t i=0;i<3;i++){
 800115a:	2300      	movs	r3, #0
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	e02f      	b.n	80011c0 <main_cpp+0x6c>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001166:	4832      	ldr	r0, [pc, #200]	; (8001230 <main_cpp+0xdc>)
 8001168:	f001 fa57 	bl	800261a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001172:	482f      	ldr	r0, [pc, #188]	; (8001230 <main_cpp+0xdc>)
 8001174:	f001 fa51 	bl	800261a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8001178:	2064      	movs	r0, #100	; 0x64
 800117a:	f000 f90d 	bl	8001398 <HAL_Delay>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001184:	482a      	ldr	r0, [pc, #168]	; (8001230 <main_cpp+0xdc>)
 8001186:	f001 fa48 	bl	800261a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001190:	4827      	ldr	r0, [pc, #156]	; (8001230 <main_cpp+0xdc>)
 8001192:	f001 fa42 	bl	800261a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8001196:	2064      	movs	r0, #100	; 0x64
 8001198:	f000 f8fe 	bl	8001398 <HAL_Delay>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a2:	4823      	ldr	r0, [pc, #140]	; (8001230 <main_cpp+0xdc>)
 80011a4:	f001 fa39 	bl	800261a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ae:	4820      	ldr	r0, [pc, #128]	; (8001230 <main_cpp+0xdc>)
 80011b0:	f001 fa33 	bl	800261a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80011b4:	2064      	movs	r0, #100	; 0x64
 80011b6:	f000 f8ef 	bl	8001398 <HAL_Delay>
		for(uint8_t i=0;i<3;i++){
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	3301      	adds	r3, #1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d9cc      	bls.n	8001160 <main_cpp+0xc>
		}
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011cc:	4818      	ldr	r0, [pc, #96]	; (8001230 <main_cpp+0xdc>)
 80011ce:	f001 fa24 	bl	800261a <HAL_GPIO_WritePin>
		can.init(hcan);
 80011d2:	4918      	ldr	r1, [pc, #96]	; (8001234 <main_cpp+0xe0>)
 80011d4:	4818      	ldr	r0, [pc, #96]	; (8001238 <main_cpp+0xe4>)
 80011d6:	f7ff fe04 	bl	8000de2 <_ZN7CanCtrl4initER19__CAN_HandleTypeDef>



		while(true){
			servo.startPWM(htim2 ,htim3);
 80011da:	4a18      	ldr	r2, [pc, #96]	; (800123c <main_cpp+0xe8>)
 80011dc:	4918      	ldr	r1, [pc, #96]	; (8001240 <main_cpp+0xec>)
 80011de:	4819      	ldr	r0, [pc, #100]	; (8001244 <main_cpp+0xf0>)
 80011e0:	f7ff f8c8 	bl	8000374 <_ZN9ServoCtrl8startPWMER17TIM_HandleTypeDefS1_>
			servo.stopPWM(htim2 ,htim3);
 80011e4:	4a15      	ldr	r2, [pc, #84]	; (800123c <main_cpp+0xe8>)
 80011e6:	4916      	ldr	r1, [pc, #88]	; (8001240 <main_cpp+0xec>)
 80011e8:	4816      	ldr	r0, [pc, #88]	; (8001244 <main_cpp+0xf0>)
 80011ea:	f7ff f92f 	bl	800044c <_ZN9ServoCtrl7stopPWMER17TIM_HandleTypeDefS1_>
			can.ledCan();
 80011ee:	4812      	ldr	r0, [pc, #72]	; (8001238 <main_cpp+0xe4>)
 80011f0:	f7ff fe7a 	bl	8000ee8 <_ZN7CanCtrl6ledCanEv>
			uint16_t tick = HAL_GetTick()%2000;
 80011f4:	f000 f8c6 	bl	8001384 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <main_cpp+0xf4>)
 80011fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001200:	09db      	lsrs	r3, r3, #7
 8001202:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001206:	fb01 f303 	mul.w	r3, r1, r3
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	80bb      	strh	r3, [r7, #4]
			if(tick < 100) HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800120e:	88bb      	ldrh	r3, [r7, #4]
 8001210:	2b63      	cmp	r3, #99	; 0x63
 8001212:	d806      	bhi.n	8001222 <main_cpp+0xce>
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <main_cpp+0xdc>)
 800121c:	f001 f9fd 	bl	800261a <HAL_GPIO_WritePin>
 8001220:	e7db      	b.n	80011da <main_cpp+0x86>
			else HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001222:	2201      	movs	r2, #1
 8001224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001228:	4801      	ldr	r0, [pc, #4]	; (8001230 <main_cpp+0xdc>)
 800122a:	f001 f9f6 	bl	800261a <HAL_GPIO_WritePin>
		}
 800122e:	e7d4      	b.n	80011da <main_cpp+0x86>
 8001230:	40010c00 	.word	0x40010c00
 8001234:	20000040 	.word	0x20000040
 8001238:	20000140 	.word	0x20000140
 800123c:	200000b0 	.word	0x200000b0
 8001240:	20000068 	.word	0x20000068
 8001244:	20000004 	.word	0x20000004
 8001248:	10624dd3 	.word	0x10624dd3

0800124c <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d107      	bne.n	800126c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001262:	4293      	cmp	r3, r2
 8001264:	d102      	bne.n	800126c <_Z41__static_initialization_and_destruction_0ii+0x20>
CanCtrl can;
 8001266:	4803      	ldr	r0, [pc, #12]	; (8001274 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001268:	f7ff fd7e 	bl	8000d68 <_ZN7CanCtrlC1Ev>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000140 	.word	0x20000140

08001278 <_GLOBAL__sub_I_can>:
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
 800127c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001280:	2001      	movs	r0, #1
 8001282:	f7ff ffe3 	bl	800124c <_Z41__static_initialization_and_destruction_0ii>
 8001286:	bd80      	pop	{r7, pc}

08001288 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001288:	f7ff fd68 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800128e:	490c      	ldr	r1, [pc, #48]	; (80012c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001290:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012a4:	4c09      	ldr	r4, [pc, #36]	; (80012cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b2:	f002 fd13 	bl	8003cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b6:	f7ff f921 	bl	80004fc <main>
  bx lr
 80012ba:	4770      	bx	lr
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80012c4:	08003d7c 	.word	0x08003d7c
  ldr r2, =_sbss
 80012c8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80012cc:	200001b0 	.word	0x200001b0

080012d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC1_2_IRQHandler>
	...

080012d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_Init+0x28>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_Init+0x28>)
 80012de:	f043 0310 	orr.w	r3, r3, #16
 80012e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 ffbb 	bl	8002260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ea:	200f      	movs	r0, #15
 80012ec:	f000 f808 	bl	8001300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f0:	f7ff fb6c 	bl	80009cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40022000 	.word	0x40022000

08001300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x54>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x58>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	fbb3 f3f1 	udiv	r3, r3, r1
 800131a:	fbb2 f3f3 	udiv	r3, r2, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 ffd3 	bl	80022ca <HAL_SYSTICK_Config>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e00e      	b.n	800134c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d80a      	bhi.n	800134a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001334:	2200      	movs	r2, #0
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f000 ff9b 	bl	8002276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <HAL_InitTick+0x5c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000000 	.word	0x20000000
 8001358:	20000020 	.word	0x20000020
 800135c:	2000001c 	.word	0x2000001c

08001360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x1c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_IncTick+0x20>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a03      	ldr	r2, [pc, #12]	; (8001380 <HAL_IncTick+0x20>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	20000020 	.word	0x20000020
 8001380:	200001ac 	.word	0x200001ac

08001384 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b02      	ldr	r3, [pc, #8]	; (8001394 <HAL_GetTick+0x10>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	200001ac 	.word	0x200001ac

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff fff0 	bl	8001384 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_Delay+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffe0 	bl	8001384 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000020 	.word	0x20000020

080013e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0ed      	b.n	80015ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fb16 	bl	8000a30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001414:	f7ff ffb6 	bl	8001384 <HAL_GetTick>
 8001418:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800141a:	e012      	b.n	8001442 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800141c:	f7ff ffb2 	bl	8001384 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b0a      	cmp	r3, #10
 8001428:	d90b      	bls.n	8001442 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2205      	movs	r2, #5
 800143a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e0c5      	b.n	80015ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0e5      	beq.n	800141c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0202 	bic.w	r2, r2, #2
 800145e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001460:	f7ff ff90 	bl	8001384 <HAL_GetTick>
 8001464:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001466:	e012      	b.n	800148e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001468:	f7ff ff8c 	bl	8001384 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b0a      	cmp	r3, #10
 8001474:	d90b      	bls.n	800148e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2205      	movs	r2, #5
 8001486:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e09f      	b.n	80015ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1e5      	bne.n	8001468 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7e1b      	ldrb	r3, [r3, #24]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d108      	bne.n	80014b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	e007      	b.n	80014c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7e5b      	ldrb	r3, [r3, #25]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d108      	bne.n	80014e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e007      	b.n	80014f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7e9b      	ldrb	r3, [r3, #26]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d108      	bne.n	800150a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0220 	orr.w	r2, r2, #32
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e007      	b.n	800151a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0220 	bic.w	r2, r2, #32
 8001518:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7edb      	ldrb	r3, [r3, #27]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d108      	bne.n	8001534 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0210 	bic.w	r2, r2, #16
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	e007      	b.n	8001544 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0210 	orr.w	r2, r2, #16
 8001542:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7f1b      	ldrb	r3, [r3, #28]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d108      	bne.n	800155e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0208 	orr.w	r2, r2, #8
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e007      	b.n	800156e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0208 	bic.w	r2, r2, #8
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7f5b      	ldrb	r3, [r3, #29]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d108      	bne.n	8001588 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 0204 	orr.w	r2, r2, #4
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e007      	b.n	8001598 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0204 	bic.w	r2, r2, #4
 8001596:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	ea42 0103 	orr.w	r1, r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	1e5a      	subs	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b087      	sub	sp, #28
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ec:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80015ee:	7cfb      	ldrb	r3, [r7, #19]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d003      	beq.n	80015fc <HAL_CAN_ConfigFilter+0x26>
 80015f4:	7cfb      	ldrb	r3, [r7, #19]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	f040 80aa 	bne.w	8001750 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001602:	f043 0201 	orr.w	r2, r3, #1
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	f003 031f 	and.w	r3, r3, #31
 8001614:	2201      	movs	r2, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43db      	mvns	r3, r3
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d123      	bne.n	800167e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	43db      	mvns	r3, r3
 8001640:	401a      	ands	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001658:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3248      	adds	r2, #72	; 0x48
 800165e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001672:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001674:	6979      	ldr	r1, [r7, #20]
 8001676:	3348      	adds	r3, #72	; 0x48
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d122      	bne.n	80016cc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	431a      	orrs	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3248      	adds	r2, #72	; 0x48
 80016ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016c2:	6979      	ldr	r1, [r7, #20]
 80016c4:	3348      	adds	r3, #72	; 0x48
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d109      	bne.n	80016e8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	43db      	mvns	r3, r3
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80016e6:	e007      	b.n	80016f8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d109      	bne.n	8001714 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43db      	mvns	r3, r3
 800170a:	401a      	ands	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001712:	e007      	b.n	8001724 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	431a      	orrs	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d107      	bne.n	800173c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	431a      	orrs	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001742:	f023 0201 	bic.w	r2, r3, #1
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	e006      	b.n	800175e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
  }
}
 800175e:	4618      	mov	r0, r3
 8001760:	371c      	adds	r7, #28
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b01      	cmp	r3, #1
 800177a:	d12e      	bne.n	80017da <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0201 	bic.w	r2, r2, #1
 8001792:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001794:	f7ff fdf6 	bl	8001384 <HAL_GetTick>
 8001798:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800179a:	e012      	b.n	80017c2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800179c:	f7ff fdf2 	bl	8001384 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b0a      	cmp	r3, #10
 80017a8:	d90b      	bls.n	80017c2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2205      	movs	r2, #5
 80017ba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e012      	b.n	80017e8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1e5      	bne.n	800179c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e006      	b.n	80017e8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
  }
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001804:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800180e:	7ffb      	ldrb	r3, [r7, #31]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d003      	beq.n	800181c <HAL_CAN_AddTxMessage+0x2c>
 8001814:	7ffb      	ldrb	r3, [r7, #31]
 8001816:	2b02      	cmp	r3, #2
 8001818:	f040 80ad 	bne.w	8001976 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10a      	bne.n	800183c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800182c:	2b00      	cmp	r3, #0
 800182e:	d105      	bne.n	800183c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 8095 	beq.w	8001966 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	0e1b      	lsrs	r3, r3, #24
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001846:	2201      	movs	r2, #1
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10d      	bne.n	8001874 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001862:	68f9      	ldr	r1, [r7, #12]
 8001864:	6809      	ldr	r1, [r1, #0]
 8001866:	431a      	orrs	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3318      	adds	r3, #24
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	440b      	add	r3, r1
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	e00f      	b.n	8001894 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800187e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001884:	68f9      	ldr	r1, [r7, #12]
 8001886:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001888:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3318      	adds	r3, #24
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	440b      	add	r3, r1
 8001892:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3318      	adds	r3, #24
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	440b      	add	r3, r1
 80018a4:	3304      	adds	r3, #4
 80018a6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	7d1b      	ldrb	r3, [r3, #20]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d111      	bne.n	80018d4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3318      	adds	r3, #24
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	4413      	add	r3, r2
 80018bc:	3304      	adds	r3, #4
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	6811      	ldr	r1, [r2, #0]
 80018c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3318      	adds	r3, #24
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	440b      	add	r3, r1
 80018d0:	3304      	adds	r3, #4
 80018d2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3307      	adds	r3, #7
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	061a      	lsls	r2, r3, #24
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3306      	adds	r3, #6
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	041b      	lsls	r3, r3, #16
 80018e4:	431a      	orrs	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3305      	adds	r3, #5
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	4313      	orrs	r3, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	3204      	adds	r2, #4
 80018f4:	7812      	ldrb	r2, [r2, #0]
 80018f6:	4610      	mov	r0, r2
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	6811      	ldr	r1, [r2, #0]
 80018fc:	ea43 0200 	orr.w	r2, r3, r0
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	440b      	add	r3, r1
 8001906:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800190a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3303      	adds	r3, #3
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	061a      	lsls	r2, r3, #24
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3302      	adds	r3, #2
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	041b      	lsls	r3, r3, #16
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3301      	adds	r3, #1
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	4313      	orrs	r3, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	7812      	ldrb	r2, [r2, #0]
 800192c:	4610      	mov	r0, r2
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	6811      	ldr	r1, [r2, #0]
 8001932:	ea43 0200 	orr.w	r2, r3, r0
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	440b      	add	r3, r1
 800193c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001940:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3318      	adds	r3, #24
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	4413      	add	r3, r2
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	6811      	ldr	r1, [r2, #0]
 8001954:	f043 0201 	orr.w	r2, r3, #1
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3318      	adds	r3, #24
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	440b      	add	r3, r1
 8001960:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	e00e      	b.n	8001984 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e006      	b.n	8001984 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
  }
}
 8001984:	4618      	mov	r0, r3
 8001986:	3724      	adds	r7, #36	; 0x24
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr

0800198e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80019a2:	7afb      	ldrb	r3, [r7, #11]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d002      	beq.n	80019ae <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80019a8:	7afb      	ldrb	r3, [r7, #11]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d11d      	bne.n	80019ea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d002      	beq.n	80019c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3301      	adds	r3, #1
 80019c0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3301      	adds	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3301      	adds	r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80019f6:	b480      	push	{r7}
 80019f8:	b087      	sub	sp, #28
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d003      	beq.n	8001a1a <HAL_CAN_GetRxMessage+0x24>
 8001a12:	7dfb      	ldrb	r3, [r7, #23]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	f040 8103 	bne.w	8001c20 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10e      	bne.n	8001a3e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d116      	bne.n	8001a5c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0f7      	b.n	8001c2e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d107      	bne.n	8001a5c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0e8      	b.n	8001c2e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	331b      	adds	r3, #27
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	4413      	add	r3, r2
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0204 	and.w	r2, r3, #4
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10c      	bne.n	8001a94 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	331b      	adds	r3, #27
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	4413      	add	r3, r2
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0d5b      	lsrs	r3, r3, #21
 8001a8a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	e00b      	b.n	8001aac <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	331b      	adds	r3, #27
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	4413      	add	r3, r2
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	08db      	lsrs	r3, r3, #3
 8001aa4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	331b      	adds	r3, #27
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	4413      	add	r3, r2
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0202 	and.w	r2, r3, #2
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	331b      	adds	r3, #27
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	4413      	add	r3, r2
 8001ace:	3304      	adds	r3, #4
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2208      	movs	r2, #8
 8001ade:	611a      	str	r2, [r3, #16]
 8001ae0:	e00b      	b.n	8001afa <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	331b      	adds	r3, #27
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	4413      	add	r3, r2
 8001aee:	3304      	adds	r3, #4
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 020f 	and.w	r2, r3, #15
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	331b      	adds	r3, #27
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	4413      	add	r3, r2
 8001b06:	3304      	adds	r3, #4
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	331b      	adds	r3, #27
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3304      	adds	r3, #4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	0c1b      	lsrs	r3, r3, #16
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0a1a      	lsrs	r2, r3, #8
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	4413      	add	r3, r2
 8001b64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	0c1a      	lsrs	r2, r3, #16
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	3302      	adds	r3, #2
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0e1a      	lsrs	r2, r3, #24
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	3303      	adds	r3, #3
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	4413      	add	r3, r2
 8001bb0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0a1a      	lsrs	r2, r3, #8
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	3305      	adds	r3, #5
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0c1a      	lsrs	r2, r3, #16
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	3306      	adds	r3, #6
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	0e1a      	lsrs	r2, r3, #24
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	3307      	adds	r3, #7
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d108      	bne.n	8001c0c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 0220 	orr.w	r2, r2, #32
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	e007      	b.n	8001c1c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691a      	ldr	r2, [r3, #16]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0220 	orr.w	r2, r2, #32
 8001c1a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e006      	b.n	8001c2e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
  }
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c48:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d002      	beq.n	8001c56 <HAL_CAN_ActivateNotification+0x1e>
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d109      	bne.n	8001c6a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6959      	ldr	r1, [r3, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e006      	b.n	8001c78 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
  }
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr

08001c82 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b08a      	sub	sp, #40	; 0x28
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d07c      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d023      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f983 	bl	8001ff0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001cea:	e016      	b.n	8001d1a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfe:	e00c      	b.n	8001d1a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d004      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
 8001d12:	e002      	b.n	8001d1a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f986 	bl	8002026 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d024      	beq.n	8001d6e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f962 	bl	8002002 <HAL_CAN_TxMailbox1CompleteCallback>
 8001d3e:	e016      	b.n	8001d6e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d004      	beq.n	8001d54 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
 8001d52:	e00c      	b.n	8001d6e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d004      	beq.n	8001d68 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
 8001d66:	e002      	b.n	8001d6e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f965 	bl	8002038 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d024      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f941 	bl	8002014 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d92:	e016      	b.n	8001dc2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d004      	beq.n	8001da8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
 8001da6:	e00c      	b.n	8001dc2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d004      	beq.n	8001dbc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dba:	e002      	b.n	8001dc2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f944 	bl	800204a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00c      	beq.n	8001de6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2210      	movs	r2, #16
 8001de4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00b      	beq.n	8001e08 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d006      	beq.n	8001e08 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2208      	movs	r2, #8
 8001e00:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f92a 	bl	800205c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d009      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff f8a9 	bl	8000f78 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00c      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2210      	movs	r2, #16
 8001e48:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00b      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d006      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2208      	movs	r2, #8
 8001e64:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f90a 	bl	8002080 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f8f2 	bl	800206e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00b      	beq.n	8001eac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d006      	beq.n	8001eac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2210      	movs	r2, #16
 8001ea4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8f3 	bl	8002092 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d006      	beq.n	8001ece <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f8eb 	bl	80020a4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d07b      	beq.n	8001fd0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d072      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d043      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d03e      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f50:	2b60      	cmp	r3, #96	; 0x60
 8001f52:	d02b      	beq.n	8001fac <HAL_CAN_IRQHandler+0x32a>
 8001f54:	2b60      	cmp	r3, #96	; 0x60
 8001f56:	d82e      	bhi.n	8001fb6 <HAL_CAN_IRQHandler+0x334>
 8001f58:	2b50      	cmp	r3, #80	; 0x50
 8001f5a:	d022      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0x320>
 8001f5c:	2b50      	cmp	r3, #80	; 0x50
 8001f5e:	d82a      	bhi.n	8001fb6 <HAL_CAN_IRQHandler+0x334>
 8001f60:	2b40      	cmp	r3, #64	; 0x40
 8001f62:	d019      	beq.n	8001f98 <HAL_CAN_IRQHandler+0x316>
 8001f64:	2b40      	cmp	r3, #64	; 0x40
 8001f66:	d826      	bhi.n	8001fb6 <HAL_CAN_IRQHandler+0x334>
 8001f68:	2b30      	cmp	r3, #48	; 0x30
 8001f6a:	d010      	beq.n	8001f8e <HAL_CAN_IRQHandler+0x30c>
 8001f6c:	2b30      	cmp	r3, #48	; 0x30
 8001f6e:	d822      	bhi.n	8001fb6 <HAL_CAN_IRQHandler+0x334>
 8001f70:	2b10      	cmp	r3, #16
 8001f72:	d002      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x2f8>
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d005      	beq.n	8001f84 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f78:	e01d      	b.n	8001fb6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	f043 0308 	orr.w	r3, r3, #8
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f82:	e019      	b.n	8001fb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	f043 0310 	orr.w	r3, r3, #16
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f8c:	e014      	b.n	8001fb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	f043 0320 	orr.w	r3, r3, #32
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f96:	e00f      	b.n	8001fb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fa0:	e00a      	b.n	8001fb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001faa:	e005      	b.n	8001fb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fb4:	e000      	b.n	8001fb8 <HAL_CAN_IRQHandler+0x336>
            break;
 8001fb6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001fc6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2204      	movs	r2, #4
 8001fce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d008      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f867 	bl	80020b6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3728      	adds	r7, #40	; 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr

080020b6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fa:	4a04      	ldr	r2, [pc, #16]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	60d3      	str	r3, [r2, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <__NVIC_GetPriorityGrouping+0x18>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	f003 0307 	and.w	r3, r3, #7
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	2b00      	cmp	r3, #0
 800213c:	db0b      	blt.n	8002156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	f003 021f 	and.w	r2, r3, #31
 8002144:	4906      	ldr	r1, [pc, #24]	; (8002160 <__NVIC_EnableIRQ+0x34>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	2001      	movs	r0, #1
 800214e:	fa00 f202 	lsl.w	r2, r0, r2
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	e000e100 	.word	0xe000e100

08002164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	2b00      	cmp	r3, #0
 8002176:	db0a      	blt.n	800218e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	490c      	ldr	r1, [pc, #48]	; (80021b0 <__NVIC_SetPriority+0x4c>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	0112      	lsls	r2, r2, #4
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	440b      	add	r3, r1
 8002188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800218c:	e00a      	b.n	80021a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4908      	ldr	r1, [pc, #32]	; (80021b4 <__NVIC_SetPriority+0x50>)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	3b04      	subs	r3, #4
 800219c:	0112      	lsls	r2, r2, #4
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	440b      	add	r3, r1
 80021a2:	761a      	strb	r2, [r3, #24]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000e100 	.word	0xe000e100
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f1c3 0307 	rsb	r3, r3, #7
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	bf28      	it	cs
 80021d6:	2304      	movcs	r3, #4
 80021d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3304      	adds	r3, #4
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d902      	bls.n	80021e8 <NVIC_EncodePriority+0x30>
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3b03      	subs	r3, #3
 80021e6:	e000      	b.n	80021ea <NVIC_EncodePriority+0x32>
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	f04f 32ff 	mov.w	r2, #4294967295
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	401a      	ands	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002200:	f04f 31ff 	mov.w	r1, #4294967295
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43d9      	mvns	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	4313      	orrs	r3, r2
         );
}
 8002212:	4618      	mov	r0, r3
 8002214:	3724      	adds	r7, #36	; 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800222c:	d301      	bcc.n	8002232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <SysTick_Config+0x40>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223a:	210f      	movs	r1, #15
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f7ff ff90 	bl	8002164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <SysTick_Config+0x40>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <SysTick_Config+0x40>)
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	e000e010 	.word	0xe000e010

08002260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff2d 	bl	80020c8 <__NVIC_SetPriorityGrouping>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002288:	f7ff ff42 	bl	8002110 <__NVIC_GetPriorityGrouping>
 800228c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	6978      	ldr	r0, [r7, #20]
 8002294:	f7ff ff90 	bl	80021b8 <NVIC_EncodePriority>
 8002298:	4602      	mov	r2, r0
 800229a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff5f 	bl	8002164 <__NVIC_SetPriority>
}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff35 	bl	800212c <__NVIC_EnableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffa2 	bl	800221c <SysTick_Config>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b08b      	sub	sp, #44	; 0x2c
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f6:	e169      	b.n	80025cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022f8:	2201      	movs	r2, #1
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	429a      	cmp	r2, r3
 8002312:	f040 8158 	bne.w	80025c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4a9a      	ldr	r2, [pc, #616]	; (8002584 <HAL_GPIO_Init+0x2a0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d05e      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002320:	4a98      	ldr	r2, [pc, #608]	; (8002584 <HAL_GPIO_Init+0x2a0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d875      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 8002326:	4a98      	ldr	r2, [pc, #608]	; (8002588 <HAL_GPIO_Init+0x2a4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d058      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 800232c:	4a96      	ldr	r2, [pc, #600]	; (8002588 <HAL_GPIO_Init+0x2a4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d86f      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 8002332:	4a96      	ldr	r2, [pc, #600]	; (800258c <HAL_GPIO_Init+0x2a8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d052      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002338:	4a94      	ldr	r2, [pc, #592]	; (800258c <HAL_GPIO_Init+0x2a8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d869      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 800233e:	4a94      	ldr	r2, [pc, #592]	; (8002590 <HAL_GPIO_Init+0x2ac>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d04c      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002344:	4a92      	ldr	r2, [pc, #584]	; (8002590 <HAL_GPIO_Init+0x2ac>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d863      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 800234a:	4a92      	ldr	r2, [pc, #584]	; (8002594 <HAL_GPIO_Init+0x2b0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d046      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002350:	4a90      	ldr	r2, [pc, #576]	; (8002594 <HAL_GPIO_Init+0x2b0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d85d      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 8002356:	2b12      	cmp	r3, #18
 8002358:	d82a      	bhi.n	80023b0 <HAL_GPIO_Init+0xcc>
 800235a:	2b12      	cmp	r3, #18
 800235c:	d859      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 800235e:	a201      	add	r2, pc, #4	; (adr r2, 8002364 <HAL_GPIO_Init+0x80>)
 8002360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002364:	080023df 	.word	0x080023df
 8002368:	080023b9 	.word	0x080023b9
 800236c:	080023cb 	.word	0x080023cb
 8002370:	0800240d 	.word	0x0800240d
 8002374:	08002413 	.word	0x08002413
 8002378:	08002413 	.word	0x08002413
 800237c:	08002413 	.word	0x08002413
 8002380:	08002413 	.word	0x08002413
 8002384:	08002413 	.word	0x08002413
 8002388:	08002413 	.word	0x08002413
 800238c:	08002413 	.word	0x08002413
 8002390:	08002413 	.word	0x08002413
 8002394:	08002413 	.word	0x08002413
 8002398:	08002413 	.word	0x08002413
 800239c:	08002413 	.word	0x08002413
 80023a0:	08002413 	.word	0x08002413
 80023a4:	08002413 	.word	0x08002413
 80023a8:	080023c1 	.word	0x080023c1
 80023ac:	080023d5 	.word	0x080023d5
 80023b0:	4a79      	ldr	r2, [pc, #484]	; (8002598 <HAL_GPIO_Init+0x2b4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023b6:	e02c      	b.n	8002412 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	623b      	str	r3, [r7, #32]
          break;
 80023be:	e029      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	3304      	adds	r3, #4
 80023c6:	623b      	str	r3, [r7, #32]
          break;
 80023c8:	e024      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	3308      	adds	r3, #8
 80023d0:	623b      	str	r3, [r7, #32]
          break;
 80023d2:	e01f      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	330c      	adds	r3, #12
 80023da:	623b      	str	r3, [r7, #32]
          break;
 80023dc:	e01a      	b.n	8002414 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023e6:	2304      	movs	r3, #4
 80023e8:	623b      	str	r3, [r7, #32]
          break;
 80023ea:	e013      	b.n	8002414 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f4:	2308      	movs	r3, #8
 80023f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	611a      	str	r2, [r3, #16]
          break;
 80023fe:	e009      	b.n	8002414 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002400:	2308      	movs	r3, #8
 8002402:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	615a      	str	r2, [r3, #20]
          break;
 800240a:	e003      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
          break;
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x130>
          break;
 8002412:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2bff      	cmp	r3, #255	; 0xff
 8002418:	d801      	bhi.n	800241e <HAL_GPIO_Init+0x13a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	e001      	b.n	8002422 <HAL_GPIO_Init+0x13e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2bff      	cmp	r3, #255	; 0xff
 8002428:	d802      	bhi.n	8002430 <HAL_GPIO_Init+0x14c>
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	e002      	b.n	8002436 <HAL_GPIO_Init+0x152>
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	3b08      	subs	r3, #8
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	210f      	movs	r1, #15
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	401a      	ands	r2, r3
 8002448:	6a39      	ldr	r1, [r7, #32]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	431a      	orrs	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80b1 	beq.w	80025c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002464:	4b4d      	ldr	r3, [pc, #308]	; (800259c <HAL_GPIO_Init+0x2b8>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	4a4c      	ldr	r2, [pc, #304]	; (800259c <HAL_GPIO_Init+0x2b8>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6193      	str	r3, [r2, #24]
 8002470:	4b4a      	ldr	r3, [pc, #296]	; (800259c <HAL_GPIO_Init+0x2b8>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800247c:	4a48      	ldr	r2, [pc, #288]	; (80025a0 <HAL_GPIO_Init+0x2bc>)
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002488:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	220f      	movs	r2, #15
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a40      	ldr	r2, [pc, #256]	; (80025a4 <HAL_GPIO_Init+0x2c0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d013      	beq.n	80024d0 <HAL_GPIO_Init+0x1ec>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a3f      	ldr	r2, [pc, #252]	; (80025a8 <HAL_GPIO_Init+0x2c4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00d      	beq.n	80024cc <HAL_GPIO_Init+0x1e8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a3e      	ldr	r2, [pc, #248]	; (80025ac <HAL_GPIO_Init+0x2c8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d007      	beq.n	80024c8 <HAL_GPIO_Init+0x1e4>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a3d      	ldr	r2, [pc, #244]	; (80025b0 <HAL_GPIO_Init+0x2cc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d101      	bne.n	80024c4 <HAL_GPIO_Init+0x1e0>
 80024c0:	2303      	movs	r3, #3
 80024c2:	e006      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024c4:	2304      	movs	r3, #4
 80024c6:	e004      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e002      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024d0:	2300      	movs	r3, #0
 80024d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d4:	f002 0203 	and.w	r2, r2, #3
 80024d8:	0092      	lsls	r2, r2, #2
 80024da:	4093      	lsls	r3, r2
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024e2:	492f      	ldr	r1, [pc, #188]	; (80025a0 <HAL_GPIO_Init+0x2bc>)
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3302      	adds	r3, #2
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024fc:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	492c      	ldr	r1, [pc, #176]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	608b      	str	r3, [r1, #8]
 8002508:	e006      	b.n	8002518 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800250a:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	43db      	mvns	r3, r3
 8002512:	4928      	ldr	r1, [pc, #160]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002514:	4013      	ands	r3, r2
 8002516:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002524:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	4922      	ldr	r1, [pc, #136]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	60cb      	str	r3, [r1, #12]
 8002530:	e006      	b.n	8002540 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	43db      	mvns	r3, r3
 800253a:	491e      	ldr	r1, [pc, #120]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800253c:	4013      	ands	r3, r2
 800253e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d006      	beq.n	800255a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4918      	ldr	r1, [pc, #96]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800255a:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	43db      	mvns	r3, r3
 8002562:	4914      	ldr	r1, [pc, #80]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002564:	4013      	ands	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d021      	beq.n	80025b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	490e      	ldr	r1, [pc, #56]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
 8002580:	e021      	b.n	80025c6 <HAL_GPIO_Init+0x2e2>
 8002582:	bf00      	nop
 8002584:	10320000 	.word	0x10320000
 8002588:	10310000 	.word	0x10310000
 800258c:	10220000 	.word	0x10220000
 8002590:	10210000 	.word	0x10210000
 8002594:	10120000 	.word	0x10120000
 8002598:	10110000 	.word	0x10110000
 800259c:	40021000 	.word	0x40021000
 80025a0:	40010000 	.word	0x40010000
 80025a4:	40010800 	.word	0x40010800
 80025a8:	40010c00 	.word	0x40010c00
 80025ac:	40011000 	.word	0x40011000
 80025b0:	40011400 	.word	0x40011400
 80025b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_GPIO_Init+0x304>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	43db      	mvns	r3, r3
 80025c0:	4909      	ldr	r1, [pc, #36]	; (80025e8 <HAL_GPIO_Init+0x304>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	3301      	adds	r3, #1
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	fa22 f303 	lsr.w	r3, r2, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f47f ae8e 	bne.w	80022f8 <HAL_GPIO_Init+0x14>
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	372c      	adds	r7, #44	; 0x2c
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	40010400 	.word	0x40010400

080025ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	887b      	ldrh	r3, [r7, #2]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	e001      	b.n	800260e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	460b      	mov	r3, r1
 8002624:	807b      	strh	r3, [r7, #2]
 8002626:	4613      	mov	r3, r2
 8002628:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800262a:	787b      	ldrb	r3, [r7, #1]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002630:	887a      	ldrh	r2, [r7, #2]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002636:	e003      	b.n	8002640 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002638:	887b      	ldrh	r3, [r7, #2]
 800263a:	041a      	lsls	r2, r3, #16
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	611a      	str	r2, [r3, #16]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
	...

0800264c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d006      	beq.n	8002670 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002662:	4a05      	ldr	r2, [pc, #20]	; (8002678 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fd42 	bl	80010f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40010400 	.word	0x40010400

0800267c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e272      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8087 	beq.w	80027aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800269c:	4b92      	ldr	r3, [pc, #584]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d00c      	beq.n	80026c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026a8:	4b8f      	ldr	r3, [pc, #572]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d112      	bne.n	80026da <HAL_RCC_OscConfig+0x5e>
 80026b4:	4b8c      	ldr	r3, [pc, #560]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d10b      	bne.n	80026da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c2:	4b89      	ldr	r3, [pc, #548]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d06c      	beq.n	80027a8 <HAL_RCC_OscConfig+0x12c>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d168      	bne.n	80027a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e24c      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e2:	d106      	bne.n	80026f2 <HAL_RCC_OscConfig+0x76>
 80026e4:	4b80      	ldr	r3, [pc, #512]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a7f      	ldr	r2, [pc, #508]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	e02e      	b.n	8002750 <HAL_RCC_OscConfig+0xd4>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x98>
 80026fa:	4b7b      	ldr	r3, [pc, #492]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a7a      	ldr	r2, [pc, #488]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b78      	ldr	r3, [pc, #480]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a77      	ldr	r2, [pc, #476]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800270c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e01d      	b.n	8002750 <HAL_RCC_OscConfig+0xd4>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0xbc>
 800271e:	4b72      	ldr	r3, [pc, #456]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a71      	ldr	r2, [pc, #452]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6e      	ldr	r2, [pc, #440]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0xd4>
 8002738:	4b6b      	ldr	r3, [pc, #428]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a6a      	ldr	r2, [pc, #424]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800273e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b68      	ldr	r3, [pc, #416]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a67      	ldr	r2, [pc, #412]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800274a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d013      	beq.n	8002780 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe fe14 	bl	8001384 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002760:	f7fe fe10 	bl	8001384 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e200      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b5d      	ldr	r3, [pc, #372]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0xe4>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7fe fe00 	bl	8001384 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002788:	f7fe fdfc 	bl	8001384 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1ec      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x10c>
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d063      	beq.n	800287e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027b6:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027c2:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d11c      	bne.n	8002808 <HAL_RCC_OscConfig+0x18c>
 80027ce:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d116      	bne.n	8002808 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	4b43      	ldr	r3, [pc, #268]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_RCC_OscConfig+0x176>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e1c0      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	4b3d      	ldr	r3, [pc, #244]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4939      	ldr	r1, [pc, #228]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	e03a      	b.n	800287e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002810:	4b36      	ldr	r3, [pc, #216]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7fe fdb5 	bl	8001384 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281e:	f7fe fdb1 	bl	8001384 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e1a1      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4927      	ldr	r1, [pc, #156]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800284c:	4313      	orrs	r3, r2
 800284e:	600b      	str	r3, [r1, #0]
 8002850:	e015      	b.n	800287e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe fd94 	bl	8001384 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002860:	f7fe fd90 	bl	8001384 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e180      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002872:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d03a      	beq.n	8002900 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d019      	beq.n	80028c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002892:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <HAL_RCC_OscConfig+0x274>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002898:	f7fe fd74 	bl	8001384 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a0:	f7fe fd70 	bl	8001384 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e160      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028be:	2001      	movs	r0, #1
 80028c0:	f000 face 	bl	8002e60 <RCC_Delay>
 80028c4:	e01c      	b.n	8002900 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_RCC_OscConfig+0x274>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028cc:	f7fe fd5a 	bl	8001384 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d2:	e00f      	b.n	80028f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d4:	f7fe fd56 	bl	8001384 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d908      	bls.n	80028f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e146      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	42420000 	.word	0x42420000
 80028f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	4b92      	ldr	r3, [pc, #584]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e9      	bne.n	80028d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80a6 	beq.w	8002a5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002912:	4b8b      	ldr	r3, [pc, #556]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	4b88      	ldr	r3, [pc, #544]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	4a87      	ldr	r2, [pc, #540]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002928:	61d3      	str	r3, [r2, #28]
 800292a:	4b85      	ldr	r3, [pc, #532]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002936:	2301      	movs	r3, #1
 8002938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	4b82      	ldr	r3, [pc, #520]	; (8002b44 <HAL_RCC_OscConfig+0x4c8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d118      	bne.n	8002978 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002946:	4b7f      	ldr	r3, [pc, #508]	; (8002b44 <HAL_RCC_OscConfig+0x4c8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a7e      	ldr	r2, [pc, #504]	; (8002b44 <HAL_RCC_OscConfig+0x4c8>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002952:	f7fe fd17 	bl	8001384 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295a:	f7fe fd13 	bl	8001384 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b64      	cmp	r3, #100	; 0x64
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e103      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296c:	4b75      	ldr	r3, [pc, #468]	; (8002b44 <HAL_RCC_OscConfig+0x4c8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x312>
 8002980:	4b6f      	ldr	r3, [pc, #444]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4a6e      	ldr	r2, [pc, #440]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6213      	str	r3, [r2, #32]
 800298c:	e02d      	b.n	80029ea <HAL_RCC_OscConfig+0x36e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x334>
 8002996:	4b6a      	ldr	r3, [pc, #424]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4a69      	ldr	r2, [pc, #420]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	6213      	str	r3, [r2, #32]
 80029a2:	4b67      	ldr	r3, [pc, #412]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a66      	ldr	r2, [pc, #408]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	f023 0304 	bic.w	r3, r3, #4
 80029ac:	6213      	str	r3, [r2, #32]
 80029ae:	e01c      	b.n	80029ea <HAL_RCC_OscConfig+0x36e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d10c      	bne.n	80029d2 <HAL_RCC_OscConfig+0x356>
 80029b8:	4b61      	ldr	r3, [pc, #388]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4a60      	ldr	r2, [pc, #384]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6213      	str	r3, [r2, #32]
 80029c4:	4b5e      	ldr	r3, [pc, #376]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	4a5d      	ldr	r2, [pc, #372]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6213      	str	r3, [r2, #32]
 80029d0:	e00b      	b.n	80029ea <HAL_RCC_OscConfig+0x36e>
 80029d2:	4b5b      	ldr	r3, [pc, #364]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4a5a      	ldr	r2, [pc, #360]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	6213      	str	r3, [r2, #32]
 80029de:	4b58      	ldr	r3, [pc, #352]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	4a57      	ldr	r2, [pc, #348]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	f023 0304 	bic.w	r3, r3, #4
 80029e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d015      	beq.n	8002a1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f2:	f7fe fcc7 	bl	8001384 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f8:	e00a      	b.n	8002a10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7fe fcc3 	bl	8001384 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e0b1      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a10:	4b4b      	ldr	r3, [pc, #300]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ee      	beq.n	80029fa <HAL_RCC_OscConfig+0x37e>
 8002a1c:	e014      	b.n	8002a48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fcb1 	bl	8001384 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a26:	f7fe fcad 	bl	8001384 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e09b      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3c:	4b40      	ldr	r3, [pc, #256]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ee      	bne.n	8002a26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d105      	bne.n	8002a5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4e:	4b3c      	ldr	r3, [pc, #240]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	4a3b      	ldr	r2, [pc, #236]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8087 	beq.w	8002b72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a64:	4b36      	ldr	r3, [pc, #216]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d061      	beq.n	8002b34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d146      	bne.n	8002b06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a78:	4b33      	ldr	r3, [pc, #204]	; (8002b48 <HAL_RCC_OscConfig+0x4cc>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fc81 	bl	8001384 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a86:	f7fe fc7d 	bl	8001384 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e06d      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a98:	4b29      	ldr	r3, [pc, #164]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d108      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	4921      	ldr	r1, [pc, #132]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a19      	ldr	r1, [r3, #32]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	491b      	ldr	r1, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCC_OscConfig+0x4cc>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7fe fc51 	bl	8001384 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7fe fc4d 	bl	8001384 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e03d      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af8:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x46a>
 8002b04:	e035      	b.n	8002b72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <HAL_RCC_OscConfig+0x4cc>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fc3a 	bl	8001384 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b14:	f7fe fc36 	bl	8001384 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e026      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x498>
 8002b32:	e01e      	b.n	8002b72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e019      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40007000 	.word	0x40007000
 8002b48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_OscConfig+0x500>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d001      	beq.n	8002b72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000

08002b80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0d0      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b94:	4b6a      	ldr	r3, [pc, #424]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d910      	bls.n	8002bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b67      	ldr	r3, [pc, #412]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 0207 	bic.w	r2, r3, #7
 8002baa:	4965      	ldr	r1, [pc, #404]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b63      	ldr	r3, [pc, #396]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0b8      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d020      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bdc:	4b59      	ldr	r3, [pc, #356]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4a58      	ldr	r2, [pc, #352]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002be6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bf4:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4a52      	ldr	r2, [pc, #328]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c00:	4b50      	ldr	r3, [pc, #320]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	494d      	ldr	r1, [pc, #308]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d040      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d115      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e07f      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3e:	4b41      	ldr	r3, [pc, #260]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e073      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4e:	4b3d      	ldr	r3, [pc, #244]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e06b      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5e:	4b39      	ldr	r3, [pc, #228]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f023 0203 	bic.w	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4936      	ldr	r1, [pc, #216]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c70:	f7fe fb88 	bl	8001384 <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c78:	f7fe fb84 	bl	8001384 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e053      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 020c 	and.w	r2, r3, #12
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d1eb      	bne.n	8002c78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d210      	bcs.n	8002cd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 0207 	bic.w	r2, r3, #7
 8002cb6:	4922      	ldr	r1, [pc, #136]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e032      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cdc:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4916      	ldr	r1, [pc, #88]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	490e      	ldr	r1, [pc, #56]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d0e:	f000 f821 	bl	8002d54 <HAL_RCC_GetSysClockFreq>
 8002d12:	4602      	mov	r2, r0
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	490a      	ldr	r1, [pc, #40]	; (8002d48 <HAL_RCC_ClockConfig+0x1c8>)
 8002d20:	5ccb      	ldrb	r3, [r1, r3]
 8002d22:	fa22 f303 	lsr.w	r3, r2, r3
 8002d26:	4a09      	ldr	r2, [pc, #36]	; (8002d4c <HAL_RCC_ClockConfig+0x1cc>)
 8002d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <HAL_RCC_ClockConfig+0x1d0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe fae6 	bl	8001300 <HAL_InitTick>

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40022000 	.word	0x40022000
 8002d44:	40021000 	.word	0x40021000
 8002d48:	08003d44 	.word	0x08003d44
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	2000001c 	.word	0x2000001c

08002d54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d002      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x30>
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d003      	beq.n	8002d8a <HAL_RCC_GetSysClockFreq+0x36>
 8002d82:	e027      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <HAL_RCC_GetSysClockFreq+0x98>)
 8002d86:	613b      	str	r3, [r7, #16]
      break;
 8002d88:	e027      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	0c9b      	lsrs	r3, r3, #18
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	4a17      	ldr	r2, [pc, #92]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d94:	5cd3      	ldrb	r3, [r2, r3]
 8002d96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d010      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	0c5b      	lsrs	r3, r3, #17
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	4a11      	ldr	r2, [pc, #68]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002dae:	5cd3      	ldrb	r3, [r2, r3]
 8002db0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <HAL_RCC_GetSysClockFreq+0x98>)
 8002db6:	fb03 f202 	mul.w	r2, r3, r2
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	e004      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	613b      	str	r3, [r7, #16]
      break;
 8002dd2:	e002      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetSysClockFreq+0x98>)
 8002dd6:	613b      	str	r3, [r7, #16]
      break;
 8002dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dda:	693b      	ldr	r3, [r7, #16]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	371c      	adds	r7, #28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	007a1200 	.word	0x007a1200
 8002df0:	08003d5c 	.word	0x08003d5c
 8002df4:	08003d6c 	.word	0x08003d6c
 8002df8:	003d0900 	.word	0x003d0900

08002dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e00:	4b02      	ldr	r3, [pc, #8]	; (8002e0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e02:	681b      	ldr	r3, [r3, #0]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	20000000 	.word	0x20000000

08002e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e14:	f7ff fff2 	bl	8002dfc <HAL_RCC_GetHCLKFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4903      	ldr	r1, [pc, #12]	; (8002e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000
 8002e34:	08003d54 	.word	0x08003d54

08002e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e3c:	f7ff ffde 	bl	8002dfc <HAL_RCC_GetHCLKFreq>
 8002e40:	4602      	mov	r2, r0
 8002e42:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	0adb      	lsrs	r3, r3, #11
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	4903      	ldr	r1, [pc, #12]	; (8002e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4e:	5ccb      	ldrb	r3, [r1, r3]
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	08003d54 	.word	0x08003d54

08002e60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <RCC_Delay+0x34>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <RCC_Delay+0x38>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	0a5b      	lsrs	r3, r3, #9
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e7c:	bf00      	nop
  }
  while (Delay --);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1e5a      	subs	r2, r3, #1
 8002e82:	60fa      	str	r2, [r7, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f9      	bne.n	8002e7c <RCC_Delay+0x1c>
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	20000000 	.word	0x20000000
 8002e98:	10624dd3 	.word	0x10624dd3

08002e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e041      	b.n	8002f32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fd fe1c 	bl	8000b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4610      	mov	r0, r2
 8002edc:	f000 fb16 	bl	800350c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e041      	b.n	8002fd0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d106      	bne.n	8002f66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f839 	bl	8002fd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3304      	adds	r3, #4
 8002f76:	4619      	mov	r1, r3
 8002f78:	4610      	mov	r0, r2
 8002f7a:	f000 fac7 	bl	800350c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr
	...

08002fec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <HAL_TIM_PWM_Start+0x24>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b01      	cmp	r3, #1
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e022      	b.n	8003056 <HAL_TIM_PWM_Start+0x6a>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b04      	cmp	r3, #4
 8003014:	d109      	bne.n	800302a <HAL_TIM_PWM_Start+0x3e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b01      	cmp	r3, #1
 8003020:	bf14      	ite	ne
 8003022:	2301      	movne	r3, #1
 8003024:	2300      	moveq	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	e015      	b.n	8003056 <HAL_TIM_PWM_Start+0x6a>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b08      	cmp	r3, #8
 800302e:	d109      	bne.n	8003044 <HAL_TIM_PWM_Start+0x58>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	bf14      	ite	ne
 800303c:	2301      	movne	r3, #1
 800303e:	2300      	moveq	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	e008      	b.n	8003056 <HAL_TIM_PWM_Start+0x6a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	bf14      	ite	ne
 8003050:	2301      	movne	r3, #1
 8003052:	2300      	moveq	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e05e      	b.n	800311c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d104      	bne.n	800306e <HAL_TIM_PWM_Start+0x82>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800306c:	e013      	b.n	8003096 <HAL_TIM_PWM_Start+0xaa>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b04      	cmp	r3, #4
 8003072:	d104      	bne.n	800307e <HAL_TIM_PWM_Start+0x92>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800307c:	e00b      	b.n	8003096 <HAL_TIM_PWM_Start+0xaa>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b08      	cmp	r3, #8
 8003082:	d104      	bne.n	800308e <HAL_TIM_PWM_Start+0xa2>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800308c:	e003      	b.n	8003096 <HAL_TIM_PWM_Start+0xaa>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2202      	movs	r2, #2
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2201      	movs	r2, #1
 800309c:	6839      	ldr	r1, [r7, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fcb4 	bl	8003a0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1e      	ldr	r2, [pc, #120]	; (8003124 <HAL_TIM_PWM_Start+0x138>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d107      	bne.n	80030be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a18      	ldr	r2, [pc, #96]	; (8003124 <HAL_TIM_PWM_Start+0x138>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00e      	beq.n	80030e6 <HAL_TIM_PWM_Start+0xfa>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d0:	d009      	beq.n	80030e6 <HAL_TIM_PWM_Start+0xfa>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a14      	ldr	r2, [pc, #80]	; (8003128 <HAL_TIM_PWM_Start+0x13c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_TIM_PWM_Start+0xfa>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a12      	ldr	r2, [pc, #72]	; (800312c <HAL_TIM_PWM_Start+0x140>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d111      	bne.n	800310a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b06      	cmp	r3, #6
 80030f6:	d010      	beq.n	800311a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003108:	e007      	b.n	800311a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0201 	orr.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40012c00 	.word	0x40012c00
 8003128:	40000400 	.word	0x40000400
 800312c:	40000800 	.word	0x40000800

08003130 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2200      	movs	r2, #0
 8003140:	6839      	ldr	r1, [r7, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fc62 	bl	8003a0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a29      	ldr	r2, [pc, #164]	; (80031f4 <HAL_TIM_PWM_Stop+0xc4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d117      	bne.n	8003182 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6a1a      	ldr	r2, [r3, #32]
 8003158:	f241 1311 	movw	r3, #4369	; 0x1111
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10f      	bne.n	8003182 <HAL_TIM_PWM_Stop+0x52>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6a1a      	ldr	r2, [r3, #32]
 8003168:	f240 4344 	movw	r3, #1092	; 0x444
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d107      	bne.n	8003182 <HAL_TIM_PWM_Stop+0x52>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003180:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6a1a      	ldr	r2, [r3, #32]
 8003188:	f241 1311 	movw	r3, #4369	; 0x1111
 800318c:	4013      	ands	r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10f      	bne.n	80031b2 <HAL_TIM_PWM_Stop+0x82>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6a1a      	ldr	r2, [r3, #32]
 8003198:	f240 4344 	movw	r3, #1092	; 0x444
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d107      	bne.n	80031b2 <HAL_TIM_PWM_Stop+0x82>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d104      	bne.n	80031c2 <HAL_TIM_PWM_Stop+0x92>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031c0:	e013      	b.n	80031ea <HAL_TIM_PWM_Stop+0xba>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d104      	bne.n	80031d2 <HAL_TIM_PWM_Stop+0xa2>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d0:	e00b      	b.n	80031ea <HAL_TIM_PWM_Stop+0xba>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d104      	bne.n	80031e2 <HAL_TIM_PWM_Stop+0xb2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e0:	e003      	b.n	80031ea <HAL_TIM_PWM_Stop+0xba>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40012c00 	.word	0x40012c00

080031f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003212:	2302      	movs	r3, #2
 8003214:	e0ae      	b.n	8003374 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b0c      	cmp	r3, #12
 8003222:	f200 809f 	bhi.w	8003364 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003226:	a201      	add	r2, pc, #4	; (adr r2, 800322c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	08003261 	.word	0x08003261
 8003230:	08003365 	.word	0x08003365
 8003234:	08003365 	.word	0x08003365
 8003238:	08003365 	.word	0x08003365
 800323c:	080032a1 	.word	0x080032a1
 8003240:	08003365 	.word	0x08003365
 8003244:	08003365 	.word	0x08003365
 8003248:	08003365 	.word	0x08003365
 800324c:	080032e3 	.word	0x080032e3
 8003250:	08003365 	.word	0x08003365
 8003254:	08003365 	.word	0x08003365
 8003258:	08003365 	.word	0x08003365
 800325c:	08003323 	.word	0x08003323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f9b2 	bl	80035d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0208 	orr.w	r2, r2, #8
 800327a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0204 	bic.w	r2, r2, #4
 800328a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6999      	ldr	r1, [r3, #24]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	619a      	str	r2, [r3, #24]
      break;
 800329e:	e064      	b.n	800336a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f9f8 	bl	800369c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6999      	ldr	r1, [r3, #24]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	021a      	lsls	r2, r3, #8
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	619a      	str	r2, [r3, #24]
      break;
 80032e0:	e043      	b.n	800336a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fa41 	bl	8003770 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0208 	orr.w	r2, r2, #8
 80032fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0204 	bic.w	r2, r2, #4
 800330c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69d9      	ldr	r1, [r3, #28]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	61da      	str	r2, [r3, #28]
      break;
 8003320:	e023      	b.n	800336a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fa8b 	bl	8003844 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800333c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69da      	ldr	r2, [r3, #28]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69d9      	ldr	r1, [r3, #28]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	021a      	lsls	r2, r3, #8
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	61da      	str	r2, [r3, #28]
      break;
 8003362:	e002      	b.n	800336a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	75fb      	strb	r3, [r7, #23]
      break;
 8003368:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003372:	7dfb      	ldrb	r3, [r7, #23]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_TIM_ConfigClockSource+0x1c>
 8003394:	2302      	movs	r3, #2
 8003396:	e0b4      	b.n	8003502 <HAL_TIM_ConfigClockSource+0x186>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d0:	d03e      	beq.n	8003450 <HAL_TIM_ConfigClockSource+0xd4>
 80033d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d6:	f200 8087 	bhi.w	80034e8 <HAL_TIM_ConfigClockSource+0x16c>
 80033da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033de:	f000 8086 	beq.w	80034ee <HAL_TIM_ConfigClockSource+0x172>
 80033e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e6:	d87f      	bhi.n	80034e8 <HAL_TIM_ConfigClockSource+0x16c>
 80033e8:	2b70      	cmp	r3, #112	; 0x70
 80033ea:	d01a      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0xa6>
 80033ec:	2b70      	cmp	r3, #112	; 0x70
 80033ee:	d87b      	bhi.n	80034e8 <HAL_TIM_ConfigClockSource+0x16c>
 80033f0:	2b60      	cmp	r3, #96	; 0x60
 80033f2:	d050      	beq.n	8003496 <HAL_TIM_ConfigClockSource+0x11a>
 80033f4:	2b60      	cmp	r3, #96	; 0x60
 80033f6:	d877      	bhi.n	80034e8 <HAL_TIM_ConfigClockSource+0x16c>
 80033f8:	2b50      	cmp	r3, #80	; 0x50
 80033fa:	d03c      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0xfa>
 80033fc:	2b50      	cmp	r3, #80	; 0x50
 80033fe:	d873      	bhi.n	80034e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d058      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x13a>
 8003404:	2b40      	cmp	r3, #64	; 0x40
 8003406:	d86f      	bhi.n	80034e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003408:	2b30      	cmp	r3, #48	; 0x30
 800340a:	d064      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0x15a>
 800340c:	2b30      	cmp	r3, #48	; 0x30
 800340e:	d86b      	bhi.n	80034e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003410:	2b20      	cmp	r3, #32
 8003412:	d060      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003414:	2b20      	cmp	r3, #32
 8003416:	d867      	bhi.n	80034e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003418:	2b00      	cmp	r3, #0
 800341a:	d05c      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0x15a>
 800341c:	2b10      	cmp	r3, #16
 800341e:	d05a      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003420:	e062      	b.n	80034e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003432:	f000 facc 	bl	80039ce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003444:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	609a      	str	r2, [r3, #8]
      break;
 800344e:	e04f      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003460:	f000 fab5 	bl	80039ce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003472:	609a      	str	r2, [r3, #8]
      break;
 8003474:	e03c      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003482:	461a      	mov	r2, r3
 8003484:	f000 fa2c 	bl	80038e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2150      	movs	r1, #80	; 0x50
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fa83 	bl	800399a <TIM_ITRx_SetConfig>
      break;
 8003494:	e02c      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034a2:	461a      	mov	r2, r3
 80034a4:	f000 fa4a 	bl	800393c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2160      	movs	r1, #96	; 0x60
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fa73 	bl	800399a <TIM_ITRx_SetConfig>
      break;
 80034b4:	e01c      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034c2:	461a      	mov	r2, r3
 80034c4:	f000 fa0c 	bl	80038e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2140      	movs	r1, #64	; 0x40
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 fa63 	bl	800399a <TIM_ITRx_SetConfig>
      break;
 80034d4:	e00c      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4619      	mov	r1, r3
 80034e0:	4610      	mov	r0, r2
 80034e2:	f000 fa5a 	bl	800399a <TIM_ITRx_SetConfig>
      break;
 80034e6:	e003      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
      break;
 80034ec:	e000      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a29      	ldr	r2, [pc, #164]	; (80035c4 <TIM_Base_SetConfig+0xb8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00b      	beq.n	800353c <TIM_Base_SetConfig+0x30>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352a:	d007      	beq.n	800353c <TIM_Base_SetConfig+0x30>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a26      	ldr	r2, [pc, #152]	; (80035c8 <TIM_Base_SetConfig+0xbc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d003      	beq.n	800353c <TIM_Base_SetConfig+0x30>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a25      	ldr	r2, [pc, #148]	; (80035cc <TIM_Base_SetConfig+0xc0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d108      	bne.n	800354e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <TIM_Base_SetConfig+0xb8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00b      	beq.n	800356e <TIM_Base_SetConfig+0x62>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355c:	d007      	beq.n	800356e <TIM_Base_SetConfig+0x62>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a19      	ldr	r2, [pc, #100]	; (80035c8 <TIM_Base_SetConfig+0xbc>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d003      	beq.n	800356e <TIM_Base_SetConfig+0x62>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a18      	ldr	r2, [pc, #96]	; (80035cc <TIM_Base_SetConfig+0xc0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d108      	bne.n	8003580 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a07      	ldr	r2, [pc, #28]	; (80035c4 <TIM_Base_SetConfig+0xb8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d103      	bne.n	80035b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	615a      	str	r2, [r3, #20]
}
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr
 80035c4:	40012c00 	.word	0x40012c00
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800

080035d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f023 0201 	bic.w	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f023 0302 	bic.w	r3, r3, #2
 8003618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a1c      	ldr	r2, [pc, #112]	; (8003698 <TIM_OC1_SetConfig+0xc8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d10c      	bne.n	8003646 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f023 0308 	bic.w	r3, r3, #8
 8003632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f023 0304 	bic.w	r3, r3, #4
 8003644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a13      	ldr	r2, [pc, #76]	; (8003698 <TIM_OC1_SetConfig+0xc8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d111      	bne.n	8003672 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800365c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	621a      	str	r2, [r3, #32]
}
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40012c00 	.word	0x40012c00

0800369c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f023 0210 	bic.w	r2, r3, #16
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f023 0320 	bic.w	r3, r3, #32
 80036e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a1d      	ldr	r2, [pc, #116]	; (800376c <TIM_OC2_SetConfig+0xd0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d10d      	bne.n	8003718 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003716:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a14      	ldr	r2, [pc, #80]	; (800376c <TIM_OC2_SetConfig+0xd0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d113      	bne.n	8003748 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800372e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	40012c00 	.word	0x40012c00

08003770 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0303 	bic.w	r3, r3, #3
 80037a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <TIM_OC3_SetConfig+0xd0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d10d      	bne.n	80037ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a14      	ldr	r2, [pc, #80]	; (8003840 <TIM_OC3_SetConfig+0xd0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d113      	bne.n	800381a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	621a      	str	r2, [r3, #32]
}
 8003834:	bf00      	nop
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40012c00 	.word	0x40012c00

08003844 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800388e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	031b      	lsls	r3, r3, #12
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a0f      	ldr	r2, [pc, #60]	; (80038dc <TIM_OC4_SetConfig+0x98>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d109      	bne.n	80038b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	019b      	lsls	r3, r3, #6
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	40012c00 	.word	0x40012c00

080038e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f023 0201 	bic.w	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800390a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f023 030a 	bic.w	r3, r3, #10
 800391c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	621a      	str	r2, [r3, #32]
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	f023 0210 	bic.w	r2, r3, #16
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	031b      	lsls	r3, r3, #12
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003978:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	621a      	str	r2, [r3, #32]
}
 8003990:	bf00      	nop
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr

0800399a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800399a:	b480      	push	{r7}
 800399c:	b085      	sub	sp, #20
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f043 0307 	orr.w	r3, r3, #7
 80039bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	609a      	str	r2, [r3, #8]
}
 80039c4:	bf00      	nop
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr

080039ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b087      	sub	sp, #28
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	021a      	lsls	r2, r3, #8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	609a      	str	r2, [r3, #8]
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	2201      	movs	r2, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a1a      	ldr	r2, [r3, #32]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	401a      	ands	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1a      	ldr	r2, [r3, #32]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	fa01 f303 	lsl.w	r3, r1, r3
 8003a44:	431a      	orrs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	621a      	str	r2, [r3, #32]
}
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr

08003a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e046      	b.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00e      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab8:	d009      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d004      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a10      	ldr	r2, [pc, #64]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d10c      	bne.n	8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	40012c00 	.word	0x40012c00
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40000800 	.word	0x40000800

08003b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e042      	b.n	8003ba8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd f87c 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2224      	movs	r2, #36	; 0x24
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f82b 	bl	8003bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695a      	ldr	r2, [r3, #20]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bea:	f023 030c 	bic.w	r3, r3, #12
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a2c      	ldr	r2, [pc, #176]	; (8003cc4 <UART_SetConfig+0x114>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d103      	bne.n	8003c20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c18:	f7ff f90e 	bl	8002e38 <HAL_RCC_GetPCLK2Freq>
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	e002      	b.n	8003c26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c20:	f7ff f8f6 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 8003c24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009a      	lsls	r2, r3, #2
 8003c30:	441a      	add	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3c:	4a22      	ldr	r2, [pc, #136]	; (8003cc8 <UART_SetConfig+0x118>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	0119      	lsls	r1, r3, #4
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009a      	lsls	r2, r3, #2
 8003c50:	441a      	add	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c5c:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <UART_SetConfig+0x118>)
 8003c5e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	2064      	movs	r0, #100	; 0x64
 8003c66:	fb00 f303 	mul.w	r3, r0, r3
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	3332      	adds	r3, #50	; 0x32
 8003c70:	4a15      	ldr	r2, [pc, #84]	; (8003cc8 <UART_SetConfig+0x118>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c7c:	4419      	add	r1, r3
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	009a      	lsls	r2, r3, #2
 8003c88:	441a      	add	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <UART_SetConfig+0x118>)
 8003c96:	fba3 0302 	umull	r0, r3, r3, r2
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	2064      	movs	r0, #100	; 0x64
 8003c9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	3332      	adds	r3, #50	; 0x32
 8003ca8:	4a07      	ldr	r2, [pc, #28]	; (8003cc8 <UART_SetConfig+0x118>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	f003 020f 	and.w	r2, r3, #15
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	440a      	add	r2, r1
 8003cba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cbc:	bf00      	nop
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40013800 	.word	0x40013800
 8003cc8:	51eb851f 	.word	0x51eb851f

08003ccc <memset>:
 8003ccc:	4603      	mov	r3, r0
 8003cce:	4402      	add	r2, r0
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d100      	bne.n	8003cd6 <memset+0xa>
 8003cd4:	4770      	bx	lr
 8003cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cda:	e7f9      	b.n	8003cd0 <memset+0x4>

08003cdc <__libc_init_array>:
 8003cdc:	b570      	push	{r4, r5, r6, lr}
 8003cde:	2600      	movs	r6, #0
 8003ce0:	4d0c      	ldr	r5, [pc, #48]	; (8003d14 <__libc_init_array+0x38>)
 8003ce2:	4c0d      	ldr	r4, [pc, #52]	; (8003d18 <__libc_init_array+0x3c>)
 8003ce4:	1b64      	subs	r4, r4, r5
 8003ce6:	10a4      	asrs	r4, r4, #2
 8003ce8:	42a6      	cmp	r6, r4
 8003cea:	d109      	bne.n	8003d00 <__libc_init_array+0x24>
 8003cec:	f000 f81a 	bl	8003d24 <_init>
 8003cf0:	2600      	movs	r6, #0
 8003cf2:	4d0a      	ldr	r5, [pc, #40]	; (8003d1c <__libc_init_array+0x40>)
 8003cf4:	4c0a      	ldr	r4, [pc, #40]	; (8003d20 <__libc_init_array+0x44>)
 8003cf6:	1b64      	subs	r4, r4, r5
 8003cf8:	10a4      	asrs	r4, r4, #2
 8003cfa:	42a6      	cmp	r6, r4
 8003cfc:	d105      	bne.n	8003d0a <__libc_init_array+0x2e>
 8003cfe:	bd70      	pop	{r4, r5, r6, pc}
 8003d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d04:	4798      	blx	r3
 8003d06:	3601      	adds	r6, #1
 8003d08:	e7ee      	b.n	8003ce8 <__libc_init_array+0xc>
 8003d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d0e:	4798      	blx	r3
 8003d10:	3601      	adds	r6, #1
 8003d12:	e7f2      	b.n	8003cfa <__libc_init_array+0x1e>
 8003d14:	08003d70 	.word	0x08003d70
 8003d18:	08003d70 	.word	0x08003d70
 8003d1c:	08003d70 	.word	0x08003d70
 8003d20:	08003d78 	.word	0x08003d78

08003d24 <_init>:
 8003d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d26:	bf00      	nop
 8003d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2a:	bc08      	pop	{r3}
 8003d2c:	469e      	mov	lr, r3
 8003d2e:	4770      	bx	lr

08003d30 <_fini>:
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	bf00      	nop
 8003d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d36:	bc08      	pop	{r3}
 8003d38:	469e      	mov	lr, r3
 8003d3a:	4770      	bx	lr
