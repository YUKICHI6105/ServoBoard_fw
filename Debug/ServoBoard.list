
ServoBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003718  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003824  08003824  00013824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003850  08003850  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08003850  08003850  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003850  08003850  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003850  08003850  00013850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003858  08003858  00013858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800385c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000028  08003884  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003884  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0f1  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002231  00000000  00000000  0002e185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  000303b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a71  00000000  00000000  00031118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019dd7  00000000  00000000  00031b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebd2  00000000  00000000  0004b960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e40c  00000000  00000000  0005a532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003828  00000000  00000000  000e8940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ec168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	0800380c 	.word	0x0800380c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	0800380c 	.word	0x0800380c

0800014c <_ZN9ServoCtrl11setTIM2DutyEPh>:

uint32_t ServoCtrl::getBaseID(){
	return baseID;
}

bool ServoCtrl::setTIM2Duty(uint8_t data[8]){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	std::memcpy(&duty[0],&data + 0,sizeof(uint16_t));
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	3304      	adds	r3, #4
 800015a:	883a      	ldrh	r2, [r7, #0]
 800015c:	801a      	strh	r2, [r3, #0]
	std::memcpy(&duty[1],&data + 2,sizeof(uint16_t));
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	1d9a      	adds	r2, r3, #6
 8000162:	463b      	mov	r3, r7
 8000164:	3308      	adds	r3, #8
 8000166:	881b      	ldrh	r3, [r3, #0]
 8000168:	b29b      	uxth	r3, r3
 800016a:	8013      	strh	r3, [r2, #0]
	std::memcpy(&duty[2],&data + 4,sizeof(uint16_t));
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	f103 0208 	add.w	r2, r3, #8
 8000172:	463b      	mov	r3, r7
 8000174:	3310      	adds	r3, #16
 8000176:	881b      	ldrh	r3, [r3, #0]
 8000178:	b29b      	uxth	r3, r3
 800017a:	8013      	strh	r3, [r2, #0]
	std::memcpy(&duty[3],&data + 6,sizeof(uint16_t));
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	f103 020a 	add.w	r2, r3, #10
 8000182:	463b      	mov	r3, r7
 8000184:	3318      	adds	r3, #24
 8000186:	881b      	ldrh	r3, [r3, #0]
 8000188:	b29b      	uxth	r3, r3
 800018a:	8013      	strh	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty[0]);
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	889a      	ldrh	r2, [r3, #4]
 8000190:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <_ZN9ServoCtrl11setTIM2DutyEPh+0x74>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty[1]);
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	88da      	ldrh	r2, [r3, #6]
 800019a:	4b09      	ldr	r3, [pc, #36]	; (80001c0 <_ZN9ServoCtrl11setTIM2DutyEPh+0x74>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty[2]);
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	891a      	ldrh	r2, [r3, #8]
 80001a4:	4b06      	ldr	r3, [pc, #24]	; (80001c0 <_ZN9ServoCtrl11setTIM2DutyEPh+0x74>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty[3]);
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	895a      	ldrh	r2, [r3, #10]
 80001ae:	4b04      	ldr	r3, [pc, #16]	; (80001c0 <_ZN9ServoCtrl11setTIM2DutyEPh+0x74>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	641a      	str	r2, [r3, #64]	; 0x40
	return true;
 80001b4:	2301      	movs	r3, #1
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	370c      	adds	r7, #12
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	2000006c 	.word	0x2000006c

080001c4 <_ZN9ServoCtrl11setTIM3DutyEPh>:

bool ServoCtrl::setTIM3Duty(uint8_t data[8]){
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
 80001cc:	6039      	str	r1, [r7, #0]
	std::memcpy(&duty[4],&data + 0,sizeof(uint16_t));
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	330c      	adds	r3, #12
 80001d2:	883a      	ldrh	r2, [r7, #0]
 80001d4:	801a      	strh	r2, [r3, #0]
	std::memcpy(&duty[5],&data + 2,sizeof(uint16_t));
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f103 020e 	add.w	r2, r3, #14
 80001dc:	463b      	mov	r3, r7
 80001de:	3308      	adds	r3, #8
 80001e0:	881b      	ldrh	r3, [r3, #0]
 80001e2:	b29b      	uxth	r3, r3
 80001e4:	8013      	strh	r3, [r2, #0]
	std::memcpy(&duty[6],&data + 4,sizeof(uint16_t));
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f103 0210 	add.w	r2, r3, #16
 80001ec:	463b      	mov	r3, r7
 80001ee:	3310      	adds	r3, #16
 80001f0:	881b      	ldrh	r3, [r3, #0]
 80001f2:	b29b      	uxth	r3, r3
 80001f4:	8013      	strh	r3, [r2, #0]
	std::memcpy(&duty[7],&data + 6,sizeof(uint16_t));
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f103 0212 	add.w	r2, r3, #18
 80001fc:	463b      	mov	r3, r7
 80001fe:	3318      	adds	r3, #24
 8000200:	881b      	ldrh	r3, [r3, #0]
 8000202:	b29b      	uxth	r3, r3
 8000204:	8013      	strh	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty[4]);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	899a      	ldrh	r2, [r3, #12]
 800020a:	4b0c      	ldr	r3, [pc, #48]	; (800023c <_ZN9ServoCtrl11setTIM3DutyEPh+0x78>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty[5]);
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	89da      	ldrh	r2, [r3, #14]
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <_ZN9ServoCtrl11setTIM3DutyEPh+0x78>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty[6]);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	8a1a      	ldrh	r2, [r3, #16]
 800021e:	4b07      	ldr	r3, [pc, #28]	; (800023c <_ZN9ServoCtrl11setTIM3DutyEPh+0x78>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty[7]);
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	8a5a      	ldrh	r2, [r3, #18]
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <_ZN9ServoCtrl11setTIM3DutyEPh+0x78>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	641a      	str	r2, [r3, #64]	; 0x40
	return true;
 800022e:	2301      	movs	r3, #1
}
 8000230:	4618      	mov	r0, r3
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	200000b4 	.word	0x200000b4

08000240 <_ZN9ServoCtrl7setModeEh>:

bool ServoCtrl::setMode(uint8_t mode){
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	460b      	mov	r3, r1
 800024a:	70fb      	strb	r3, [r7, #3]
	switch(mode){
 800024c:	78fb      	ldrb	r3, [r7, #3]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d002      	beq.n	8000258 <_ZN9ServoCtrl7setModeEh+0x18>
 8000252:	2b01      	cmp	r3, #1
 8000254:	d003      	beq.n	800025e <_ZN9ServoCtrl7setModeEh+0x1e>
 8000256:	e005      	b.n	8000264 <_ZN9ServoCtrl7setModeEh+0x24>
	case 0:
		ServoCtrl::mode = Mode::dis;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2200      	movs	r2, #0
 800025c:	615a      	str	r2, [r3, #20]
	case 1:
		ServoCtrl::mode = Mode::pos;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2201      	movs	r2, #1
 8000262:	615a      	str	r2, [r3, #20]
	}
	return true;
 8000264:	2301      	movs	r3, #1
}
 8000266:	4618      	mov	r0, r3
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr

08000270 <_ZN9ServoCtrl5resetEv>:

Mode ServoCtrl::getMode(){
	return mode;
}

bool ServoCtrl::reset(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000278:	2100      	movs	r1, #0
 800027a:	4813      	ldr	r0, [pc, #76]	; (80002c8 <_ZN9ServoCtrl5resetEv+0x58>)
 800027c:	f002 fccc 	bl	8002c18 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000280:	2104      	movs	r1, #4
 8000282:	4811      	ldr	r0, [pc, #68]	; (80002c8 <_ZN9ServoCtrl5resetEv+0x58>)
 8000284:	f002 fcc8 	bl	8002c18 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000288:	2108      	movs	r1, #8
 800028a:	480f      	ldr	r0, [pc, #60]	; (80002c8 <_ZN9ServoCtrl5resetEv+0x58>)
 800028c:	f002 fcc4 	bl	8002c18 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8000290:	210c      	movs	r1, #12
 8000292:	480d      	ldr	r0, [pc, #52]	; (80002c8 <_ZN9ServoCtrl5resetEv+0x58>)
 8000294:	f002 fcc0 	bl	8002c18 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000298:	2100      	movs	r1, #0
 800029a:	480c      	ldr	r0, [pc, #48]	; (80002cc <_ZN9ServoCtrl5resetEv+0x5c>)
 800029c:	f002 fcbc 	bl	8002c18 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80002a0:	2104      	movs	r1, #4
 80002a2:	480a      	ldr	r0, [pc, #40]	; (80002cc <_ZN9ServoCtrl5resetEv+0x5c>)
 80002a4:	f002 fcb8 	bl	8002c18 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80002a8:	2108      	movs	r1, #8
 80002aa:	4808      	ldr	r0, [pc, #32]	; (80002cc <_ZN9ServoCtrl5resetEv+0x5c>)
 80002ac:	f002 fcb4 	bl	8002c18 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80002b0:	210c      	movs	r1, #12
 80002b2:	4806      	ldr	r0, [pc, #24]	; (80002cc <_ZN9ServoCtrl5resetEv+0x5c>)
 80002b4:	f002 fcb0 	bl	8002c18 <HAL_TIM_PWM_Stop>
	preMode = Mode::dis;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2200      	movs	r2, #0
 80002bc:	619a      	str	r2, [r3, #24]
	return true;
 80002be:	2301      	movs	r3, #1
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	2000006c 	.word	0x2000006c
 80002cc:	200000b4 	.word	0x200000b4

080002d0 <_ZN9ServoCtrl8startPWMEv>:

void ServoCtrl::startPWM(){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	if((mode == Mode::pos)&&(preMode == Mode::dis)){
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d126      	bne.n	800032e <_ZN9ServoCtrl8startPWMEv+0x5e>
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d122      	bne.n	800032e <_ZN9ServoCtrl8startPWMEv+0x5e>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002e8:	2100      	movs	r1, #0
 80002ea:	4813      	ldr	r0, [pc, #76]	; (8000338 <_ZN9ServoCtrl8startPWMEv+0x68>)
 80002ec:	f002 fbf2 	bl	8002ad4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80002f0:	2104      	movs	r1, #4
 80002f2:	4811      	ldr	r0, [pc, #68]	; (8000338 <_ZN9ServoCtrl8startPWMEv+0x68>)
 80002f4:	f002 fbee 	bl	8002ad4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80002f8:	2108      	movs	r1, #8
 80002fa:	480f      	ldr	r0, [pc, #60]	; (8000338 <_ZN9ServoCtrl8startPWMEv+0x68>)
 80002fc:	f002 fbea 	bl	8002ad4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000300:	210c      	movs	r1, #12
 8000302:	480d      	ldr	r0, [pc, #52]	; (8000338 <_ZN9ServoCtrl8startPWMEv+0x68>)
 8000304:	f002 fbe6 	bl	8002ad4 <HAL_TIM_PWM_Start>

		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000308:	2100      	movs	r1, #0
 800030a:	480c      	ldr	r0, [pc, #48]	; (800033c <_ZN9ServoCtrl8startPWMEv+0x6c>)
 800030c:	f002 fbe2 	bl	8002ad4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000310:	2104      	movs	r1, #4
 8000312:	480a      	ldr	r0, [pc, #40]	; (800033c <_ZN9ServoCtrl8startPWMEv+0x6c>)
 8000314:	f002 fbde 	bl	8002ad4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000318:	2108      	movs	r1, #8
 800031a:	4808      	ldr	r0, [pc, #32]	; (800033c <_ZN9ServoCtrl8startPWMEv+0x6c>)
 800031c:	f002 fbda 	bl	8002ad4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000320:	210c      	movs	r1, #12
 8000322:	4806      	ldr	r0, [pc, #24]	; (800033c <_ZN9ServoCtrl8startPWMEv+0x6c>)
 8000324:	f002 fbd6 	bl	8002ad4 <HAL_TIM_PWM_Start>
		preMode = Mode::pos;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2201      	movs	r2, #1
 800032c:	619a      	str	r2, [r3, #24]
	}
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	2000006c 	.word	0x2000006c
 800033c:	200000b4 	.word	0x200000b4

08000340 <_ZN9ServoCtrl7stopPWMEv>:

void ServoCtrl::stopPWM(){
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(EMS_GPIO_Port,EMS_Pin) == GPIO_PIN_RESET){
 8000348:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800034c:	4818      	ldr	r0, [pc, #96]	; (80003b0 <_ZN9ServoCtrl7stopPWMEv+0x70>)
 800034e:	f001 fec1 	bl	80020d4 <HAL_GPIO_ReadPin>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	bf0c      	ite	eq
 8000358:	2301      	moveq	r3, #1
 800035a:	2300      	movne	r3, #0
 800035c:	b2db      	uxtb	r3, r3
 800035e:	2b00      	cmp	r3, #0
 8000360:	d022      	beq.n	80003a8 <_ZN9ServoCtrl7stopPWMEv+0x68>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000362:	2100      	movs	r1, #0
 8000364:	4813      	ldr	r0, [pc, #76]	; (80003b4 <_ZN9ServoCtrl7stopPWMEv+0x74>)
 8000366:	f002 fc57 	bl	8002c18 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800036a:	2104      	movs	r1, #4
 800036c:	4811      	ldr	r0, [pc, #68]	; (80003b4 <_ZN9ServoCtrl7stopPWMEv+0x74>)
 800036e:	f002 fc53 	bl	8002c18 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000372:	2108      	movs	r1, #8
 8000374:	480f      	ldr	r0, [pc, #60]	; (80003b4 <_ZN9ServoCtrl7stopPWMEv+0x74>)
 8000376:	f002 fc4f 	bl	8002c18 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 800037a:	210c      	movs	r1, #12
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <_ZN9ServoCtrl7stopPWMEv+0x74>)
 800037e:	f002 fc4b 	bl	8002c18 <HAL_TIM_PWM_Stop>

		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000382:	2100      	movs	r1, #0
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <_ZN9ServoCtrl7stopPWMEv+0x78>)
 8000386:	f002 fc47 	bl	8002c18 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800038a:	2104      	movs	r1, #4
 800038c:	480a      	ldr	r0, [pc, #40]	; (80003b8 <_ZN9ServoCtrl7stopPWMEv+0x78>)
 800038e:	f002 fc43 	bl	8002c18 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000392:	2108      	movs	r1, #8
 8000394:	4808      	ldr	r0, [pc, #32]	; (80003b8 <_ZN9ServoCtrl7stopPWMEv+0x78>)
 8000396:	f002 fc3f 	bl	8002c18 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 800039a:	210c      	movs	r1, #12
 800039c:	4806      	ldr	r0, [pc, #24]	; (80003b8 <_ZN9ServoCtrl7stopPWMEv+0x78>)
 800039e:	f002 fc3b 	bl	8002c18 <HAL_TIM_PWM_Stop>
		preMode = Mode::dis;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
	}
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40010c00 	.word	0x40010c00
 80003b4:	2000006c 	.word	0x2000006c
 80003b8:	200000b4 	.word	0x200000b4

080003bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c0:	f000 fdfe 	bl	8000fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c4:	f000 f80f 	bl	80003e6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c8:	f000 f9e2 	bl	8000790 <MX_GPIO_Init>
  MX_CAN_Init();
 80003cc:	f000 f850 	bl	8000470 <MX_CAN_Init>
  MX_TIM2_Init();
 80003d0:	f000 f884 	bl	80004dc <MX_TIM2_Init>
  MX_TIM3_Init();
 80003d4:	f000 f91a 	bl	800060c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80003d8:	f000 f9b0 	bl	800073c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
main_cpp();
 80003dc:	f000 fd34 	bl	8000e48 <main_cpp>
 80003e0:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  }
  /* USER CODE END 3 */
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b090      	sub	sp, #64	; 0x40
 80003ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ec:	f107 0318 	add.w	r3, r7, #24
 80003f0:	2228      	movs	r2, #40	; 0x28
 80003f2:	2100      	movs	r1, #0
 80003f4:	4618      	mov	r0, r3
 80003f6:	f003 f9dd 	bl	80037b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000408:	2301      	movs	r3, #1
 800040a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000410:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000416:	2301      	movs	r3, #1
 8000418:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041a:	2302      	movs	r3, #2
 800041c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000422:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000424:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000428:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042a:	f107 0318 	add.w	r3, r7, #24
 800042e:	4618      	mov	r0, r3
 8000430:	f001 fe98 	bl	8002164 <HAL_RCC_OscConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800043a:	f000 fa23 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043e:	230f      	movs	r3, #15
 8000440:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000442:	2302      	movs	r3, #2
 8000444:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800044a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2102      	movs	r1, #2
 8000458:	4618      	mov	r0, r3
 800045a:	f002 f905 	bl	8002668 <HAL_RCC_ClockConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000464:	f000 fa0e 	bl	8000884 <Error_Handler>
  }
}
 8000468:	bf00      	nop
 800046a:	3740      	adds	r7, #64	; 0x40
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000474:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <MX_CAN_Init+0x64>)
 8000476:	4a18      	ldr	r2, [pc, #96]	; (80004d8 <MX_CAN_Init+0x68>)
 8000478:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800047a:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <MX_CAN_Init+0x64>)
 800047c:	2202      	movs	r2, #2
 800047e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000480:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <MX_CAN_Init+0x64>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000486:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <MX_CAN_Init+0x64>)
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800048c:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <MX_CAN_Init+0x64>)
 800048e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000492:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <MX_CAN_Init+0x64>)
 8000496:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800049a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800049c:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <MX_CAN_Init+0x64>)
 800049e:	2200      	movs	r2, #0
 80004a0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <MX_CAN_Init+0x64>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <MX_CAN_Init+0x64>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004ae:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <MX_CAN_Init+0x64>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004b4:	4b07      	ldr	r3, [pc, #28]	; (80004d4 <MX_CAN_Init+0x64>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <MX_CAN_Init+0x64>)
 80004bc:	2200      	movs	r2, #0
 80004be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004c0:	4804      	ldr	r0, [pc, #16]	; (80004d4 <MX_CAN_Init+0x64>)
 80004c2:	f000 fe03 	bl	80010cc <HAL_CAN_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80004cc:	f000 f9da 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000044 	.word	0x20000044
 80004d8:	40006400 	.word	0x40006400

080004dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08e      	sub	sp, #56	; 0x38
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f0:	f107 0320 	add.w	r3, r7, #32
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]
 8000508:	615a      	str	r2, [r3, #20]
 800050a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800050c:	4b3e      	ldr	r3, [pc, #248]	; (8000608 <MX_TIM2_Init+0x12c>)
 800050e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000512:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8000514:	4b3c      	ldr	r3, [pc, #240]	; (8000608 <MX_TIM2_Init+0x12c>)
 8000516:	2202      	movs	r2, #2
 8000518:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051a:	4b3b      	ldr	r3, [pc, #236]	; (8000608 <MX_TIM2_Init+0x12c>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999;
 8000520:	4b39      	ldr	r3, [pc, #228]	; (8000608 <MX_TIM2_Init+0x12c>)
 8000522:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000526:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000528:	4b37      	ldr	r3, [pc, #220]	; (8000608 <MX_TIM2_Init+0x12c>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052e:	4b36      	ldr	r3, [pc, #216]	; (8000608 <MX_TIM2_Init+0x12c>)
 8000530:	2200      	movs	r2, #0
 8000532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000534:	4834      	ldr	r0, [pc, #208]	; (8000608 <MX_TIM2_Init+0x12c>)
 8000536:	f002 fa25 	bl	8002984 <HAL_TIM_Base_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000540:	f000 f9a0 	bl	8000884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000548:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800054a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800054e:	4619      	mov	r1, r3
 8000550:	482d      	ldr	r0, [pc, #180]	; (8000608 <MX_TIM2_Init+0x12c>)
 8000552:	f002 fc87 	bl	8002e64 <HAL_TIM_ConfigClockSource>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800055c:	f000 f992 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000560:	4829      	ldr	r0, [pc, #164]	; (8000608 <MX_TIM2_Init+0x12c>)
 8000562:	f002 fa5e 	bl	8002a22 <HAL_TIM_PWM_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800056c:	f000 f98a 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4619      	mov	r1, r3
 800057e:	4822      	ldr	r0, [pc, #136]	; (8000608 <MX_TIM2_Init+0x12c>)
 8000580:	f002 ffdc 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800058a:	f000 f97b 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800058e:	2360      	movs	r3, #96	; 0x60
 8000590:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 19999;
 8000592:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000596:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	4619      	mov	r1, r3
 80005a6:	4818      	ldr	r0, [pc, #96]	; (8000608 <MX_TIM2_Init+0x12c>)
 80005a8:	f002 fb9a 	bl	8002ce0 <HAL_TIM_PWM_ConfigChannel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80005b2:	f000 f967 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2204      	movs	r2, #4
 80005ba:	4619      	mov	r1, r3
 80005bc:	4812      	ldr	r0, [pc, #72]	; (8000608 <MX_TIM2_Init+0x12c>)
 80005be:	f002 fb8f 	bl	8002ce0 <HAL_TIM_PWM_ConfigChannel>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80005c8:	f000 f95c 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2208      	movs	r2, #8
 80005d0:	4619      	mov	r1, r3
 80005d2:	480d      	ldr	r0, [pc, #52]	; (8000608 <MX_TIM2_Init+0x12c>)
 80005d4:	f002 fb84 	bl	8002ce0 <HAL_TIM_PWM_ConfigChannel>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80005de:	f000 f951 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	220c      	movs	r2, #12
 80005e6:	4619      	mov	r1, r3
 80005e8:	4807      	ldr	r0, [pc, #28]	; (8000608 <MX_TIM2_Init+0x12c>)
 80005ea:	f002 fb79 	bl	8002ce0 <HAL_TIM_PWM_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 80005f4:	f000 f946 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <MX_TIM2_Init+0x12c>)
 80005fa:	f000 fa13 	bl	8000a24 <HAL_TIM_MspPostInit>

}
 80005fe:	bf00      	nop
 8000600:	3738      	adds	r7, #56	; 0x38
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000006c 	.word	0x2000006c

0800060c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08e      	sub	sp, #56	; 0x38
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
 8000638:	615a      	str	r2, [r3, #20]
 800063a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800063c:	4b3d      	ldr	r3, [pc, #244]	; (8000734 <MX_TIM3_Init+0x128>)
 800063e:	4a3e      	ldr	r2, [pc, #248]	; (8000738 <MX_TIM3_Init+0x12c>)
 8000640:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000642:	4b3c      	ldr	r3, [pc, #240]	; (8000734 <MX_TIM3_Init+0x128>)
 8000644:	2200      	movs	r2, #0
 8000646:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000648:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <MX_TIM3_Init+0x128>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800064e:	4b39      	ldr	r3, [pc, #228]	; (8000734 <MX_TIM3_Init+0x128>)
 8000650:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000654:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000656:	4b37      	ldr	r3, [pc, #220]	; (8000734 <MX_TIM3_Init+0x128>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065c:	4b35      	ldr	r3, [pc, #212]	; (8000734 <MX_TIM3_Init+0x128>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000662:	4834      	ldr	r0, [pc, #208]	; (8000734 <MX_TIM3_Init+0x128>)
 8000664:	f002 f98e 	bl	8002984 <HAL_TIM_Base_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800066e:	f000 f909 	bl	8000884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800067c:	4619      	mov	r1, r3
 800067e:	482d      	ldr	r0, [pc, #180]	; (8000734 <MX_TIM3_Init+0x128>)
 8000680:	f002 fbf0 	bl	8002e64 <HAL_TIM_ConfigClockSource>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800068a:	f000 f8fb 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800068e:	4829      	ldr	r0, [pc, #164]	; (8000734 <MX_TIM3_Init+0x128>)
 8000690:	f002 f9c7 	bl	8002a22 <HAL_TIM_PWM_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800069a:	f000 f8f3 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	4619      	mov	r1, r3
 80006ac:	4821      	ldr	r0, [pc, #132]	; (8000734 <MX_TIM3_Init+0x128>)
 80006ae:	f002 ff45 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80006b8:	f000 f8e4 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006bc:	2360      	movs	r3, #96	; 0x60
 80006be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	4619      	mov	r1, r3
 80006d2:	4818      	ldr	r0, [pc, #96]	; (8000734 <MX_TIM3_Init+0x128>)
 80006d4:	f002 fb04 	bl	8002ce0 <HAL_TIM_PWM_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80006de:	f000 f8d1 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2204      	movs	r2, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	4812      	ldr	r0, [pc, #72]	; (8000734 <MX_TIM3_Init+0x128>)
 80006ea:	f002 faf9 	bl	8002ce0 <HAL_TIM_PWM_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80006f4:	f000 f8c6 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2208      	movs	r2, #8
 80006fc:	4619      	mov	r1, r3
 80006fe:	480d      	ldr	r0, [pc, #52]	; (8000734 <MX_TIM3_Init+0x128>)
 8000700:	f002 faee 	bl	8002ce0 <HAL_TIM_PWM_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800070a:	f000 f8bb 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	220c      	movs	r2, #12
 8000712:	4619      	mov	r1, r3
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <MX_TIM3_Init+0x128>)
 8000716:	f002 fae3 	bl	8002ce0 <HAL_TIM_PWM_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000720:	f000 f8b0 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000724:	4803      	ldr	r0, [pc, #12]	; (8000734 <MX_TIM3_Init+0x128>)
 8000726:	f000 f97d 	bl	8000a24 <HAL_TIM_MspPostInit>

}
 800072a:	bf00      	nop
 800072c:	3738      	adds	r7, #56	; 0x38
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000b4 	.word	0x200000b4
 8000738:	40000400 	.word	0x40000400

0800073c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART1_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000774:	f002 ff40 	bl	80035f8 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f881 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000fc 	.word	0x200000fc
 800078c:	40013800 	.word	0x40013800

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a4:	4b33      	ldr	r3, [pc, #204]	; (8000874 <MX_GPIO_Init+0xe4>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a32      	ldr	r2, [pc, #200]	; (8000874 <MX_GPIO_Init+0xe4>)
 80007aa:	f043 0320 	orr.w	r3, r3, #32
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b30      	ldr	r3, [pc, #192]	; (8000874 <MX_GPIO_Init+0xe4>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0320 	and.w	r3, r3, #32
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <MX_GPIO_Init+0xe4>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a2c      	ldr	r2, [pc, #176]	; (8000874 <MX_GPIO_Init+0xe4>)
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <MX_GPIO_Init+0xe4>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <MX_GPIO_Init+0xe4>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a26      	ldr	r2, [pc, #152]	; (8000874 <MX_GPIO_Init+0xe4>)
 80007da:	f043 0308 	orr.w	r3, r3, #8
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <MX_GPIO_Init+0xe4>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80007f2:	4821      	ldr	r0, [pc, #132]	; (8000878 <MX_GPIO_Init+0xe8>)
 80007f4:	f001 fc85 	bl	8002102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fe:	481f      	ldr	r0, [pc, #124]	; (800087c <MX_GPIO_Init+0xec>)
 8000800:	f001 fc7f 	bl	8002102 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 8000804:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000808:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2302      	movs	r3, #2
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	4619      	mov	r1, r3
 800081c:	4816      	ldr	r0, [pc, #88]	; (8000878 <MX_GPIO_Init+0xe8>)
 800081e:	f001 fad5 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : EMS_Pin */
  GPIO_InitStruct.Pin = EMS_Pin;
 8000822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_GPIO_Init+0xf0>)
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4619      	mov	r1, r3
 8000836:	4810      	ldr	r0, [pc, #64]	; (8000878 <MX_GPIO_Init+0xe8>)
 8000838:	f001 fac8 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_CAN_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin;
 800083c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2302      	movs	r3, #2
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_CAN_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 0310 	add.w	r3, r7, #16
 8000852:	4619      	mov	r1, r3
 8000854:	4809      	ldr	r0, [pc, #36]	; (800087c <MX_GPIO_Init+0xec>)
 8000856:	f001 fab9 	bl	8001dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	2028      	movs	r0, #40	; 0x28
 8000860:	f001 fa7d 	bl	8001d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000864:	2028      	movs	r0, #40	; 0x28
 8000866:	f001 fa96 	bl	8001d96 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086a:	bf00      	nop
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000
 8000878:	40010c00 	.word	0x40010c00
 800087c:	40010800 	.word	0x40010800
 8000880:	10110000 	.word	0x10110000

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_MspInit+0x5c>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	4a14      	ldr	r2, [pc, #80]	; (80008ec <HAL_MspInit+0x5c>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6193      	str	r3, [r2, #24]
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_MspInit+0x5c>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_MspInit+0x5c>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <HAL_MspInit+0x5c>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	61d3      	str	r3, [r2, #28]
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_MspInit+0x5c>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_MspInit+0x60>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <HAL_MspInit+0x60>)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010000 	.word	0x40010000

080008f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a29      	ldr	r2, [pc, #164]	; (80009b4 <HAL_CAN_MspInit+0xc0>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d14b      	bne.n	80009ac <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000914:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <HAL_CAN_MspInit+0xc4>)
 8000916:	69db      	ldr	r3, [r3, #28]
 8000918:	4a27      	ldr	r2, [pc, #156]	; (80009b8 <HAL_CAN_MspInit+0xc4>)
 800091a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800091e:	61d3      	str	r3, [r2, #28]
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <HAL_CAN_MspInit+0xc4>)
 8000922:	69db      	ldr	r3, [r3, #28]
 8000924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <HAL_CAN_MspInit+0xc4>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a21      	ldr	r2, [pc, #132]	; (80009b8 <HAL_CAN_MspInit+0xc4>)
 8000932:	f043 0308 	orr.w	r3, r3, #8
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <HAL_CAN_MspInit+0xc4>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0308 	and.w	r3, r3, #8
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4818      	ldr	r0, [pc, #96]	; (80009bc <HAL_CAN_MspInit+0xc8>)
 800095a:	f001 fa37 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800095e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	4812      	ldr	r0, [pc, #72]	; (80009bc <HAL_CAN_MspInit+0xc8>)
 8000974:	f001 fa2a 	bl	8001dcc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <HAL_CAN_MspInit+0xcc>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
 800097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000980:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_CAN_MspInit+0xcc>)
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	2014      	movs	r0, #20
 80009a2:	f001 f9dc 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80009a6:	2014      	movs	r0, #20
 80009a8:	f001 f9f5 	bl	8001d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40006400 	.word	0x40006400
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40010c00 	.word	0x40010c00
 80009c0:	40010000 	.word	0x40010000

080009c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009d4:	d10c      	bne.n	80009f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_TIM_Base_MspInit+0x58>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_TIM_Base_MspInit+0x58>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	61d3      	str	r3, [r2, #28]
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_TIM_Base_MspInit+0x58>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009ee:	e010      	b.n	8000a12 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_TIM_Base_MspInit+0x5c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d10b      	bne.n	8000a12 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_TIM_Base_MspInit+0x58>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_TIM_Base_MspInit+0x58>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	61d3      	str	r3, [r2, #28]
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_TIM_Base_MspInit+0x58>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40000400 	.word	0x40000400

08000a24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0318 	add.w	r3, r7, #24
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a42:	d118      	bne.n	8000a76 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <HAL_TIM_MspPostInit+0xc4>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a27      	ldr	r2, [pc, #156]	; (8000ae8 <HAL_TIM_MspPostInit+0xc4>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <HAL_TIM_MspPostInit+0xc4>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	697b      	ldr	r3, [r7, #20]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2302      	movs	r3, #2
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0318 	add.w	r3, r7, #24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	481f      	ldr	r0, [pc, #124]	; (8000aec <HAL_TIM_MspPostInit+0xc8>)
 8000a70:	f001 f9ac 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a74:	e034      	b.n	8000ae0 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <HAL_TIM_MspPostInit+0xcc>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d12f      	bne.n	8000ae0 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_TIM_MspPostInit+0xc4>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a18      	ldr	r2, [pc, #96]	; (8000ae8 <HAL_TIM_MspPostInit+0xc4>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <HAL_TIM_MspPostInit+0xc4>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <HAL_TIM_MspPostInit+0xc4>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <HAL_TIM_MspPostInit+0xc4>)
 8000a9e:	f043 0308 	orr.w	r3, r3, #8
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <HAL_TIM_MspPostInit+0xc4>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0308 	and.w	r3, r3, #8
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ab0:	23c0      	movs	r3, #192	; 0xc0
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 0318 	add.w	r3, r7, #24
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480a      	ldr	r0, [pc, #40]	; (8000aec <HAL_TIM_MspPostInit+0xc8>)
 8000ac4:	f001 f982 	bl	8001dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 0318 	add.w	r3, r7, #24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4806      	ldr	r0, [pc, #24]	; (8000af4 <HAL_TIM_MspPostInit+0xd0>)
 8000adc:	f001 f976 	bl	8001dcc <HAL_GPIO_Init>
}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	; 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010800 	.word	0x40010800
 8000af0:	40000400 	.word	0x40000400
 8000af4:	40010c00 	.word	0x40010c00

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <HAL_UART_MspInit+0xa4>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d13d      	bne.n	8000b94 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <HAL_UART_MspInit+0xa8>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a20      	ldr	r2, [pc, #128]	; (8000ba0 <HAL_UART_MspInit+0xa8>)
 8000b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <HAL_UART_MspInit+0xa8>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <HAL_UART_MspInit+0xa8>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a1a      	ldr	r2, [pc, #104]	; (8000ba0 <HAL_UART_MspInit+0xa8>)
 8000b36:	f043 0308 	orr.w	r3, r3, #8
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_UART_MspInit+0xa8>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0308 	and.w	r3, r3, #8
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b48:	2340      	movs	r3, #64	; 0x40
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4812      	ldr	r0, [pc, #72]	; (8000ba4 <HAL_UART_MspInit+0xac>)
 8000b5c:	f001 f936 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <HAL_UART_MspInit+0xac>)
 8000b74:	f001 f92a 	bl	8001dcc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_UART_MspInit+0xb0>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b8e:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_UART_MspInit+0xb0>)
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40013800 	.word	0x40013800
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	40010000 	.word	0x40010000

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf2:	f000 fa2b 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c02:	f000 fdb1 	bl	8001768 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000044 	.word	0x20000044

08000c10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMS_Pin);
 8000c14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c18:	f001 fa8c 	bl	8002134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <_ZN7CanCtrlC1Ev>:
	CanCtrl();
	bool receive(uint32_t& RID,uint8_t data[8]);//受信関数(エラー判定のみ)内容は引数に入れ込む。
	void ledCan();
};

inline CanCtrl::CanCtrl(){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	649a      	str	r2, [r3, #72]	; 0x48
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	64da      	str	r2, [r3, #76]	; 0x4c
	filter.FilterIdHigh         = 0x300 << 5;               // フィルターIDの上位16ビット
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000c46:	621a      	str	r2, [r3, #32]
	filter.FilterIdLow          = 0;                        // フィルターIDの下位16ビット
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
	filter.FilterMaskIdHigh     = 0x7f8 << 5;               // フィルターマスクの上位16ビット
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
	filter.FilterMaskIdLow      = 0b110;                    // フィルターマスクの下位16ビット
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2206      	movs	r2, #6
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
	//フィルターマスクは1が確定させたいところで0が無視したいところ
	filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	63da      	str	r2, [r3, #60]	; 0x3c
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	631a      	str	r2, [r3, #48]	; 0x30
	filter.FilterBank           = 0;                        // フィルターバンクNo
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	635a      	str	r2, [r3, #52]	; 0x34
	filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモード
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	639a      	str	r2, [r3, #56]	; 0x38
	filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	220e      	movs	r2, #14
 8000c78:	645a      	str	r2, [r3, #68]	; 0x44
	filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_CAN_ConfigFilter(&hcan, &filter);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3320      	adds	r3, #32
 8000c84:	4619      	mov	r1, r3
 8000c86:	4804      	ldr	r0, [pc, #16]	; (8000c98 <_ZN7CanCtrlC1Ev+0x6c>)
 8000c88:	f000 fb1b 	bl	80012c2 <HAL_CAN_ConfigFilter>
}
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000044 	.word	0x20000044

08000c9c <_ZN7CanCtrl7receiveERmPh>:

inline bool CanCtrl::receive(uint32_t& RID,uint8_t data[8]){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rxHeader, data) == HAL_OK){
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	1d1a      	adds	r2, r3, #4
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2100      	movs	r1, #0
 8000cb0:	480e      	ldr	r0, [pc, #56]	; (8000cec <_ZN7CanCtrl7receiveERmPh+0x50>)
 8000cb2:	f000 fc13 	bl	80014dc <HAL_CAN_GetRxMessage>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	bf0c      	ite	eq
 8000cbc:	2301      	moveq	r3, #1
 8000cbe:	2300      	movne	r3, #0
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d00c      	beq.n	8000ce0 <_ZN7CanCtrl7receiveERmPh+0x44>
		RID = rxHeader.StdId;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	601a      	str	r2, [r3, #0]
		rxData=data[0];
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	701a      	strb	r2, [r3, #0]
		canFlug =1;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	649a      	str	r2, [r3, #72]	; 0x48
		return true;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <_ZN7CanCtrl7receiveERmPh+0x46>
	}
	else{
		return false;
 8000ce0:	2300      	movs	r3, #0
	}
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000044 	.word	0x20000044

08000cf0 <_ZN7CanCtrl6ledCanEv>:

inline void CanCtrl::ledCan(){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	if(canFlug == 1){
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10e      	bne.n	8000d1e <_ZN7CanCtrl6ledCanEv+0x2e>
	HAL_GPIO_WritePin(LED_CAN_GPIO_Port,LED_CAN_Pin,GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d06:	4816      	ldr	r0, [pc, #88]	; (8000d60 <_ZN7CanCtrl6ledCanEv+0x70>)
 8000d08:	f001 f9fb 	bl	8002102 <HAL_GPIO_WritePin>
	canTick = HAL_GetTick();
 8000d0c:	f000 f9b0 	bl	8001070 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	64da      	str	r2, [r3, #76]	; 0x4c
	canFlug = 0;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	649a      	str	r2, [r3, #72]	; 0x48
	else if(HAL_GetTick() > canTick+150){
		if(GPIOC->ODR == GPIO_ODR_ODR8_Msk){
			HAL_GPIO_WritePin(LED_CAN_GPIO_Port,LED_CAN_Pin,GPIO_PIN_RESET);
		}
	}
}
 8000d1c:	e01c      	b.n	8000d58 <_ZN7CanCtrl6ledCanEv+0x68>
	else if(HAL_GetTick() > canTick+150){
 8000d1e:	f000 f9a7 	bl	8001070 <HAL_GetTick>
 8000d22:	4602      	mov	r2, r0
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d28:	3396      	adds	r3, #150	; 0x96
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	bf8c      	ite	hi
 8000d2e:	2301      	movhi	r3, #1
 8000d30:	2300      	movls	r3, #0
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d00f      	beq.n	8000d58 <_ZN7CanCtrl6ledCanEv+0x68>
		if(GPIOC->ODR == GPIO_ODR_ODR8_Msk){
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <_ZN7CanCtrl6ledCanEv+0x74>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d40:	bf0c      	ite	eq
 8000d42:	2301      	moveq	r3, #1
 8000d44:	2300      	movne	r3, #0
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d005      	beq.n	8000d58 <_ZN7CanCtrl6ledCanEv+0x68>
			HAL_GPIO_WritePin(LED_CAN_GPIO_Port,LED_CAN_Pin,GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d52:	4803      	ldr	r0, [pc, #12]	; (8000d60 <_ZN7CanCtrl6ledCanEv+0x70>)
 8000d54:	f001 f9d5 	bl	8002102 <HAL_GPIO_WritePin>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40010800 	.word	0x40010800
 8000d64:	40011000 	.word	0x40011000

08000d68 <HAL_CAN_RxFifo0MsgPendingCallback>:

extern"C"{
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;

	void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
		uint32_t receiveID = 0x110;
 8000d70:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000d74:	617b      	str	r3, [r7, #20]
		uint8_t receiveData[8];
		if (can.receive(receiveID,receiveData) == false)return;
 8000d76:	f107 020c 	add.w	r2, r7, #12
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	481a      	ldr	r0, [pc, #104]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000d82:	f7ff ff8b 	bl	8000c9c <_ZN7CanCtrl7receiveERmPh>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bf0c      	ite	eq
 8000d8c:	2301      	moveq	r3, #1
 8000d8e:	2300      	movne	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d124      	bne.n	8000de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
		switch(receiveID){
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f240 3202 	movw	r2, #770	; 0x302
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d018      	beq.n	8000dd2 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
 8000da0:	f240 3202 	movw	r2, #770	; 0x302
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d81d      	bhi.n	8000de4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
 8000da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000dac:	d004      	beq.n	8000db8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
 8000dae:	f240 3201 	movw	r2, #769	; 0x301
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d006      	beq.n	8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
				break;
			case 0x302:
				servo.setTIM3Duty(receiveData);
				break;
			default:
				break;
 8000db6:	e015      	b.n	8000de4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
				servo.setMode(receiveData[0]);
 8000db8:	7b3b      	ldrb	r3, [r7, #12]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000dbe:	f7ff fa3f 	bl	8000240 <_ZN9ServoCtrl7setModeEh>
				break;
 8000dc2:	e010      	b.n	8000de6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
				servo.setTIM2Duty(receiveData);
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4809      	ldr	r0, [pc, #36]	; (8000df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000dcc:	f7ff f9be 	bl	800014c <_ZN9ServoCtrl11setTIM2DutyEPh>
				break;
 8000dd0:	e009      	b.n	8000de6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
				servo.setTIM3Duty(receiveData);
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000dda:	f7ff f9f3 	bl	80001c4 <_ZN9ServoCtrl11setTIM3DutyEPh>
				break;
 8000dde:	e002      	b.n	8000de6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
		if (can.receive(receiveID,receiveData) == false)return;
 8000de0:	bf00      	nop
 8000de2:	e000      	b.n	8000de6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
				break;
 8000de4:	bf00      	nop
			}
//		if (solenoid.update(receiveID,receiveData) == false)return;
	}
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000144 	.word	0x20000144
 8000df0:	20000004 	.word	0x20000004

08000df4 <HAL_GPIO_EXTI_Callback>:

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	80fb      	strh	r3, [r7, #6]
		if (!(GPIO_Pin == EMS_Pin))return;
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e04:	d118      	bne.n	8000e38 <HAL_GPIO_EXTI_Callback+0x44>
		if (servo.reset() == true){
 8000e06:	480e      	ldr	r0, [pc, #56]	; (8000e40 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000e08:	f7ff fa32 	bl	8000270 <_ZN9ServoCtrl5resetEv>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	bf0c      	ite	eq
 8000e12:	2301      	moveq	r3, #1
 8000e14:	2300      	movne	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d006      	beq.n	8000e2a <HAL_GPIO_EXTI_Callback+0x36>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e22:	4808      	ldr	r0, [pc, #32]	; (8000e44 <HAL_GPIO_EXTI_Callback+0x50>)
 8000e24:	f001 f96d 	bl	8002102 <HAL_GPIO_WritePin>
 8000e28:	e007      	b.n	8000e3a <HAL_GPIO_EXTI_Callback+0x46>
		}
		else{
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <HAL_GPIO_EXTI_Callback+0x50>)
 8000e32:	f001 f966 	bl	8002102 <HAL_GPIO_WritePin>
 8000e36:	e000      	b.n	8000e3a <HAL_GPIO_EXTI_Callback+0x46>
		if (!(GPIO_Pin == EMS_Pin))return;
 8000e38:	bf00      	nop
		}
	}
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000004 	.word	0x20000004
 8000e44:	40010c00 	.word	0x40010c00

08000e48 <main_cpp>:

	void main_cpp(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
		for(uint8_t i=0;i<3;i++){
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	e02f      	b.n	8000eb4 <main_cpp+0x6c>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e5a:	4832      	ldr	r0, [pc, #200]	; (8000f24 <main_cpp+0xdc>)
 8000e5c:	f001 f951 	bl	8002102 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e66:	482f      	ldr	r0, [pc, #188]	; (8000f24 <main_cpp+0xdc>)
 8000e68:	f001 f94b 	bl	8002102 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000e6c:	2064      	movs	r0, #100	; 0x64
 8000e6e:	f000 f909 	bl	8001084 <HAL_Delay>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e78:	482a      	ldr	r0, [pc, #168]	; (8000f24 <main_cpp+0xdc>)
 8000e7a:	f001 f942 	bl	8002102 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e84:	4827      	ldr	r0, [pc, #156]	; (8000f24 <main_cpp+0xdc>)
 8000e86:	f001 f93c 	bl	8002102 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000e8a:	2064      	movs	r0, #100	; 0x64
 8000e8c:	f000 f8fa 	bl	8001084 <HAL_Delay>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e96:	4823      	ldr	r0, [pc, #140]	; (8000f24 <main_cpp+0xdc>)
 8000e98:	f001 f933 	bl	8002102 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea2:	4820      	ldr	r0, [pc, #128]	; (8000f24 <main_cpp+0xdc>)
 8000ea4:	f001 f92d 	bl	8002102 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000ea8:	2064      	movs	r0, #100	; 0x64
 8000eaa:	f000 f8eb 	bl	8001084 <HAL_Delay>
		for(uint8_t i=0;i<3;i++){
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d9cc      	bls.n	8000e54 <main_cpp+0xc>
		}
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec0:	4818      	ldr	r0, [pc, #96]	; (8000f24 <main_cpp+0xdc>)
 8000ec2:	f001 f91e 	bl	8002102 <HAL_GPIO_WritePin>

		HAL_CAN_Start(&hcan);
 8000ec6:	4818      	ldr	r0, [pc, #96]	; (8000f28 <main_cpp+0xe0>)
 8000ec8:	f000 fac4 	bl	8001454 <HAL_CAN_Start>
		HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ecc:	2102      	movs	r1, #2
 8000ece:	4816      	ldr	r0, [pc, #88]	; (8000f28 <main_cpp+0xe0>)
 8000ed0:	f000 fc25 	bl	800171e <HAL_CAN_ActivateNotification>

		while(true){
			servo.startPWM();
 8000ed4:	4815      	ldr	r0, [pc, #84]	; (8000f2c <main_cpp+0xe4>)
 8000ed6:	f7ff f9fb 	bl	80002d0 <_ZN9ServoCtrl8startPWMEv>
			servo.stopPWM();
 8000eda:	4814      	ldr	r0, [pc, #80]	; (8000f2c <main_cpp+0xe4>)
 8000edc:	f7ff fa30 	bl	8000340 <_ZN9ServoCtrl7stopPWMEv>
			can.ledCan();
 8000ee0:	4813      	ldr	r0, [pc, #76]	; (8000f30 <main_cpp+0xe8>)
 8000ee2:	f7ff ff05 	bl	8000cf0 <_ZN7CanCtrl6ledCanEv>
			uint16_t tick = HAL_GetTick()%2000;
 8000ee6:	f000 f8c3 	bl	8001070 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <main_cpp+0xec>)
 8000eee:	fba3 1302 	umull	r1, r3, r3, r2
 8000ef2:	09db      	lsrs	r3, r3, #7
 8000ef4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000ef8:	fb01 f303 	mul.w	r3, r1, r3
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	80bb      	strh	r3, [r7, #4]
			if(tick < 100) HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000f00:	88bb      	ldrh	r3, [r7, #4]
 8000f02:	2b63      	cmp	r3, #99	; 0x63
 8000f04:	d806      	bhi.n	8000f14 <main_cpp+0xcc>
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <main_cpp+0xdc>)
 8000f0e:	f001 f8f8 	bl	8002102 <HAL_GPIO_WritePin>
 8000f12:	e7df      	b.n	8000ed4 <main_cpp+0x8c>
			else HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1a:	4802      	ldr	r0, [pc, #8]	; (8000f24 <main_cpp+0xdc>)
 8000f1c:	f001 f8f1 	bl	8002102 <HAL_GPIO_WritePin>
		}
 8000f20:	e7d8      	b.n	8000ed4 <main_cpp+0x8c>
 8000f22:	bf00      	nop
 8000f24:	40010c00 	.word	0x40010c00
 8000f28:	20000044 	.word	0x20000044
 8000f2c:	20000004 	.word	0x20000004
 8000f30:	20000144 	.word	0x20000144
 8000f34:	10624dd3 	.word	0x10624dd3

08000f38 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d107      	bne.n	8000f58 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d102      	bne.n	8000f58 <_Z41__static_initialization_and_destruction_0ii+0x20>
CanCtrl can;
 8000f52:	4803      	ldr	r0, [pc, #12]	; (8000f60 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000f54:	f7ff fe6a 	bl	8000c2c <_ZN7CanCtrlC1Ev>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000144 	.word	0x20000144

08000f64 <_GLOBAL__sub_I_can>:
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff ffe3 	bl	8000f38 <_Z41__static_initialization_and_destruction_0ii>
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f74:	f7ff fe54 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f7a:	490c      	ldr	r1, [pc, #48]	; (8000fac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a09      	ldr	r2, [pc, #36]	; (8000fb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f90:	4c09      	ldr	r4, [pc, #36]	; (8000fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f002 fc11 	bl	80037c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fa2:	f7ff fa0b 	bl	80003bc <main>
  bx lr
 8000fa6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000fb0:	0800385c 	.word	0x0800385c
  ldr r2, =_sbss
 8000fb4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000fb8:	20000198 	.word	0x20000198

08000fbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC1_2_IRQHandler>
	...

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x28>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x28>)
 8000fca:	f043 0310 	orr.w	r3, r3, #16
 8000fce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 feb9 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	f000 f808 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff fc58 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40022000 	.word	0x40022000

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x58>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fed1 	bl	8001db2 <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 fe99 	bl	8001d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_InitTick+0x5c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000000 	.word	0x20000000
 8001044:	20000024 	.word	0x20000024
 8001048:	20000020 	.word	0x20000020

0800104c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_IncTick+0x1c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_IncTick+0x20>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a03      	ldr	r2, [pc, #12]	; (800106c <HAL_IncTick+0x20>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	20000024 	.word	0x20000024
 800106c:	20000194 	.word	0x20000194

08001070 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b02      	ldr	r3, [pc, #8]	; (8001080 <HAL_GetTick+0x10>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	20000194 	.word	0x20000194

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff fff0 	bl	8001070 <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_Delay+0x44>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffe0 	bl	8001070 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000024 	.word	0x20000024

080010cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e0ed      	b.n	80012ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d102      	bne.n	80010f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fc02 	bl	80008f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0201 	orr.w	r2, r2, #1
 80010fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001100:	f7ff ffb6 	bl	8001070 <HAL_GetTick>
 8001104:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001106:	e012      	b.n	800112e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001108:	f7ff ffb2 	bl	8001070 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b0a      	cmp	r3, #10
 8001114:	d90b      	bls.n	800112e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2205      	movs	r2, #5
 8001126:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e0c5      	b.n	80012ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0e5      	beq.n	8001108 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0202 	bic.w	r2, r2, #2
 800114a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800114c:	f7ff ff90 	bl	8001070 <HAL_GetTick>
 8001150:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001152:	e012      	b.n	800117a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001154:	f7ff ff8c 	bl	8001070 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b0a      	cmp	r3, #10
 8001160:	d90b      	bls.n	800117a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2205      	movs	r2, #5
 8001172:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e09f      	b.n	80012ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1e5      	bne.n	8001154 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7e1b      	ldrb	r3, [r3, #24]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d108      	bne.n	80011a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e007      	b.n	80011b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7e5b      	ldrb	r3, [r3, #25]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d108      	bne.n	80011cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	e007      	b.n	80011dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7e9b      	ldrb	r3, [r3, #26]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d108      	bne.n	80011f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0220 	orr.w	r2, r2, #32
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e007      	b.n	8001206 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0220 	bic.w	r2, r2, #32
 8001204:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7edb      	ldrb	r3, [r3, #27]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d108      	bne.n	8001220 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0210 	bic.w	r2, r2, #16
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e007      	b.n	8001230 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0210 	orr.w	r2, r2, #16
 800122e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7f1b      	ldrb	r3, [r3, #28]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d108      	bne.n	800124a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0208 	orr.w	r2, r2, #8
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e007      	b.n	800125a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0208 	bic.w	r2, r2, #8
 8001258:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7f5b      	ldrb	r3, [r3, #29]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d108      	bne.n	8001274 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f042 0204 	orr.w	r2, r2, #4
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	e007      	b.n	8001284 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0204 	bic.w	r2, r2, #4
 8001282:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	ea42 0103 	orr.w	r1, r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	1e5a      	subs	r2, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b087      	sub	sp, #28
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80012da:	7cfb      	ldrb	r3, [r7, #19]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d003      	beq.n	80012e8 <HAL_CAN_ConfigFilter+0x26>
 80012e0:	7cfb      	ldrb	r3, [r7, #19]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	f040 80aa 	bne.w	800143c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012ee:	f043 0201 	orr.w	r2, r3, #1
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	f003 031f 	and.w	r3, r3, #31
 8001300:	2201      	movs	r2, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d123      	bne.n	800136a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43db      	mvns	r3, r3
 800132c:	401a      	ands	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001344:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3248      	adds	r2, #72	; 0x48
 800134a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800135e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001360:	6979      	ldr	r1, [r7, #20]
 8001362:	3348      	adds	r3, #72	; 0x48
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	440b      	add	r3, r1
 8001368:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d122      	bne.n	80013b8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	431a      	orrs	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001392:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	3248      	adds	r2, #72	; 0x48
 8001398:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013ae:	6979      	ldr	r1, [r7, #20]
 80013b0:	3348      	adds	r3, #72	; 0x48
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d109      	bne.n	80013d4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013d2:	e007      	b.n	80013e4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	431a      	orrs	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d109      	bne.n	8001400 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013fe:	e007      	b.n	8001410 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	431a      	orrs	r2, r3
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d107      	bne.n	8001428 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	431a      	orrs	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800142e:	f023 0201 	bic.w	r2, r3, #1
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	e006      	b.n	800144a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
  }
}
 800144a:	4618      	mov	r0, r3
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b01      	cmp	r3, #1
 8001466:	d12e      	bne.n	80014c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2202      	movs	r2, #2
 800146c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0201 	bic.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001480:	f7ff fdf6 	bl	8001070 <HAL_GetTick>
 8001484:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001486:	e012      	b.n	80014ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001488:	f7ff fdf2 	bl	8001070 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b0a      	cmp	r3, #10
 8001494:	d90b      	bls.n	80014ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2205      	movs	r2, #5
 80014a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e012      	b.n	80014d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1e5      	bne.n	8001488 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e006      	b.n	80014d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
  }
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014dc:	b480      	push	{r7}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d003      	beq.n	8001500 <HAL_CAN_GetRxMessage+0x24>
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	f040 8103 	bne.w	8001706 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10e      	bne.n	8001524 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d116      	bne.n	8001542 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0f7      	b.n	8001714 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d107      	bne.n	8001542 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0e8      	b.n	8001714 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	331b      	adds	r3, #27
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	4413      	add	r3, r2
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0204 	and.w	r2, r3, #4
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10c      	bne.n	800157a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	331b      	adds	r3, #27
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	4413      	add	r3, r2
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	0d5b      	lsrs	r3, r3, #21
 8001570:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e00b      	b.n	8001592 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	331b      	adds	r3, #27
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	4413      	add	r3, r2
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	331b      	adds	r3, #27
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	4413      	add	r3, r2
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0202 	and.w	r2, r3, #2
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	331b      	adds	r3, #27
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	4413      	add	r3, r2
 80015b4:	3304      	adds	r3, #4
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2208      	movs	r2, #8
 80015c4:	611a      	str	r2, [r3, #16]
 80015c6:	e00b      	b.n	80015e0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	331b      	adds	r3, #27
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	4413      	add	r3, r2
 80015d4:	3304      	adds	r3, #4
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 020f 	and.w	r2, r3, #15
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	331b      	adds	r3, #27
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	4413      	add	r3, r2
 80015ec:	3304      	adds	r3, #4
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	331b      	adds	r3, #27
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	4413      	add	r3, r2
 8001604:	3304      	adds	r3, #4
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	0c1b      	lsrs	r3, r3, #16
 800160a:	b29a      	uxth	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	4413      	add	r3, r2
 800161a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	4413      	add	r3, r2
 8001630:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	0a1a      	lsrs	r2, r3, #8
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	4413      	add	r3, r2
 800164a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	0c1a      	lsrs	r2, r3, #16
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	3302      	adds	r3, #2
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	4413      	add	r3, r2
 8001664:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	0e1a      	lsrs	r2, r3, #24
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	3303      	adds	r3, #3
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	4413      	add	r3, r2
 800167e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	3304      	adds	r3, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	4413      	add	r3, r2
 8001696:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	0a1a      	lsrs	r2, r3, #8
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	3305      	adds	r3, #5
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	0c1a      	lsrs	r2, r3, #16
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	3306      	adds	r3, #6
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	4413      	add	r3, r2
 80016ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0e1a      	lsrs	r2, r3, #24
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	3307      	adds	r3, #7
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d108      	bne.n	80016f2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0220 	orr.w	r2, r2, #32
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	e007      	b.n	8001702 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 0220 	orr.w	r2, r2, #32
 8001700:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e006      	b.n	8001714 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
  }
}
 8001714:	4618      	mov	r0, r3
 8001716:	371c      	adds	r7, #28
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800171e:	b480      	push	{r7}
 8001720:	b085      	sub	sp, #20
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d002      	beq.n	800173c <HAL_CAN_ActivateNotification+0x1e>
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d109      	bne.n	8001750 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6959      	ldr	r1, [r3, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	e006      	b.n	800175e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
  }
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d07c      	beq.n	80018a8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d023      	beq.n	8001800 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2201      	movs	r2, #1
 80017be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f983 	bl	8001ad6 <HAL_CAN_TxMailbox0CompleteCallback>
 80017d0:	e016      	b.n	8001800 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d004      	beq.n	80017e6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
 80017e4:	e00c      	b.n	8001800 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
 80017f8:	e002      	b.n	8001800 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f986 	bl	8001b0c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d024      	beq.n	8001854 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001812:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f962 	bl	8001ae8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001824:	e016      	b.n	8001854 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182c:	2b00      	cmp	r3, #0
 800182e:	d004      	beq.n	800183a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
 8001838:	e00c      	b.n	8001854 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
 800184c:	e002      	b.n	8001854 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f965 	bl	8001b1e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d024      	beq.n	80018a8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001866:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f941 	bl	8001afa <HAL_CAN_TxMailbox2CompleteCallback>
 8001878:	e016      	b.n	80018a8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d004      	beq.n	800188e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
 800188c:	e00c      	b.n	80018a8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
 80018a0:	e002      	b.n	80018a8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f944 	bl	8001b30 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00c      	beq.n	80018cc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f003 0310 	and.w	r3, r3, #16
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d007      	beq.n	80018cc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2210      	movs	r2, #16
 80018ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00b      	beq.n	80018ee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2208      	movs	r2, #8
 80018e6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f92a 	bl	8001b42 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d009      	beq.n	800190c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fa2e 	bl	8000d68 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00c      	beq.n	8001930 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	2b00      	cmp	r3, #0
 800191e:	d007      	beq.n	8001930 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001926:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2210      	movs	r2, #16
 800192e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	f003 0320 	and.w	r3, r3, #32
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00b      	beq.n	8001952 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2208      	movs	r2, #8
 800194a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f90a 	bl	8001b66 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	2b00      	cmp	r3, #0
 800195a:	d009      	beq.n	8001970 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f8f2 	bl	8001b54 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00b      	beq.n	8001992 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2210      	movs	r2, #16
 800198a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f8f3 	bl	8001b78 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00b      	beq.n	80019b4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2208      	movs	r2, #8
 80019ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f8eb 	bl	8001b8a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d07b      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d072      	beq.n	8001aae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d008      	beq.n	80019e4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019e4:	6a3b      	ldr	r3, [r7, #32]
 80019e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d008      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	f043 0302 	orr.w	r3, r3, #2
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d008      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d043      	beq.n	8001aae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d03e      	beq.n	8001aae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a36:	2b60      	cmp	r3, #96	; 0x60
 8001a38:	d02b      	beq.n	8001a92 <HAL_CAN_IRQHandler+0x32a>
 8001a3a:	2b60      	cmp	r3, #96	; 0x60
 8001a3c:	d82e      	bhi.n	8001a9c <HAL_CAN_IRQHandler+0x334>
 8001a3e:	2b50      	cmp	r3, #80	; 0x50
 8001a40:	d022      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x320>
 8001a42:	2b50      	cmp	r3, #80	; 0x50
 8001a44:	d82a      	bhi.n	8001a9c <HAL_CAN_IRQHandler+0x334>
 8001a46:	2b40      	cmp	r3, #64	; 0x40
 8001a48:	d019      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x316>
 8001a4a:	2b40      	cmp	r3, #64	; 0x40
 8001a4c:	d826      	bhi.n	8001a9c <HAL_CAN_IRQHandler+0x334>
 8001a4e:	2b30      	cmp	r3, #48	; 0x30
 8001a50:	d010      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x30c>
 8001a52:	2b30      	cmp	r3, #48	; 0x30
 8001a54:	d822      	bhi.n	8001a9c <HAL_CAN_IRQHandler+0x334>
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d002      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x2f8>
 8001a5a:	2b20      	cmp	r3, #32
 8001a5c:	d005      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a5e:	e01d      	b.n	8001a9c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	f043 0308 	orr.w	r3, r3, #8
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a68:	e019      	b.n	8001a9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	f043 0310 	orr.w	r3, r3, #16
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a72:	e014      	b.n	8001a9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	f043 0320 	orr.w	r3, r3, #32
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a7c:	e00f      	b.n	8001a9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a86:	e00a      	b.n	8001a9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a90:	e005      	b.n	8001a9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a9a:	e000      	b.n	8001a9e <HAL_CAN_IRQHandler+0x336>
            break;
 8001a9c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001aac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f867 	bl	8001b9c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ace:	bf00      	nop
 8001ad0:	3728      	adds	r7, #40	; 0x28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
	...

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4906      	ldr	r1, [pc, #24]	; (8001c48 <__NVIC_EnableIRQ+0x34>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	; (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	; (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	bf28      	it	cs
 8001cbe:	2304      	movcs	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d902      	bls.n	8001cd0 <NVIC_EncodePriority+0x30>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b03      	subs	r3, #3
 8001cce:	e000      	b.n	8001cd2 <NVIC_EncodePriority+0x32>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	4313      	orrs	r3, r2
         );
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d14:	d301      	bcc.n	8001d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00f      	b.n	8001d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <SysTick_Config+0x40>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d22:	210f      	movs	r1, #15
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f7ff ff90 	bl	8001c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <SysTick_Config+0x40>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <SysTick_Config+0x40>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff2d 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d70:	f7ff ff42 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	6978      	ldr	r0, [r7, #20]
 8001d7c:	f7ff ff90 	bl	8001ca0 <NVIC_EncodePriority>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff5f 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff35 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ffa2 	bl	8001d04 <SysTick_Config>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b08b      	sub	sp, #44	; 0x2c
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dde:	e169      	b.n	80020b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001de0:	2201      	movs	r2, #1
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	f040 8158 	bne.w	80020ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4a9a      	ldr	r2, [pc, #616]	; (800206c <HAL_GPIO_Init+0x2a0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d05e      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e08:	4a98      	ldr	r2, [pc, #608]	; (800206c <HAL_GPIO_Init+0x2a0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d875      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e0e:	4a98      	ldr	r2, [pc, #608]	; (8002070 <HAL_GPIO_Init+0x2a4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d058      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e14:	4a96      	ldr	r2, [pc, #600]	; (8002070 <HAL_GPIO_Init+0x2a4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d86f      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e1a:	4a96      	ldr	r2, [pc, #600]	; (8002074 <HAL_GPIO_Init+0x2a8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d052      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e20:	4a94      	ldr	r2, [pc, #592]	; (8002074 <HAL_GPIO_Init+0x2a8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d869      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e26:	4a94      	ldr	r2, [pc, #592]	; (8002078 <HAL_GPIO_Init+0x2ac>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d04c      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e2c:	4a92      	ldr	r2, [pc, #584]	; (8002078 <HAL_GPIO_Init+0x2ac>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d863      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e32:	4a92      	ldr	r2, [pc, #584]	; (800207c <HAL_GPIO_Init+0x2b0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d046      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
 8001e38:	4a90      	ldr	r2, [pc, #576]	; (800207c <HAL_GPIO_Init+0x2b0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d85d      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e3e:	2b12      	cmp	r3, #18
 8001e40:	d82a      	bhi.n	8001e98 <HAL_GPIO_Init+0xcc>
 8001e42:	2b12      	cmp	r3, #18
 8001e44:	d859      	bhi.n	8001efa <HAL_GPIO_Init+0x12e>
 8001e46:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <HAL_GPIO_Init+0x80>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001ec7 	.word	0x08001ec7
 8001e50:	08001ea1 	.word	0x08001ea1
 8001e54:	08001eb3 	.word	0x08001eb3
 8001e58:	08001ef5 	.word	0x08001ef5
 8001e5c:	08001efb 	.word	0x08001efb
 8001e60:	08001efb 	.word	0x08001efb
 8001e64:	08001efb 	.word	0x08001efb
 8001e68:	08001efb 	.word	0x08001efb
 8001e6c:	08001efb 	.word	0x08001efb
 8001e70:	08001efb 	.word	0x08001efb
 8001e74:	08001efb 	.word	0x08001efb
 8001e78:	08001efb 	.word	0x08001efb
 8001e7c:	08001efb 	.word	0x08001efb
 8001e80:	08001efb 	.word	0x08001efb
 8001e84:	08001efb 	.word	0x08001efb
 8001e88:	08001efb 	.word	0x08001efb
 8001e8c:	08001efb 	.word	0x08001efb
 8001e90:	08001ea9 	.word	0x08001ea9
 8001e94:	08001ebd 	.word	0x08001ebd
 8001e98:	4a79      	ldr	r2, [pc, #484]	; (8002080 <HAL_GPIO_Init+0x2b4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e9e:	e02c      	b.n	8001efa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	623b      	str	r3, [r7, #32]
          break;
 8001ea6:	e029      	b.n	8001efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	3304      	adds	r3, #4
 8001eae:	623b      	str	r3, [r7, #32]
          break;
 8001eb0:	e024      	b.n	8001efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	3308      	adds	r3, #8
 8001eb8:	623b      	str	r3, [r7, #32]
          break;
 8001eba:	e01f      	b.n	8001efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	330c      	adds	r3, #12
 8001ec2:	623b      	str	r3, [r7, #32]
          break;
 8001ec4:	e01a      	b.n	8001efc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	623b      	str	r3, [r7, #32]
          break;
 8001ed2:	e013      	b.n	8001efc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d105      	bne.n	8001ee8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001edc:	2308      	movs	r3, #8
 8001ede:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	611a      	str	r2, [r3, #16]
          break;
 8001ee6:	e009      	b.n	8001efc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	615a      	str	r2, [r3, #20]
          break;
 8001ef2:	e003      	b.n	8001efc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e000      	b.n	8001efc <HAL_GPIO_Init+0x130>
          break;
 8001efa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2bff      	cmp	r3, #255	; 0xff
 8001f00:	d801      	bhi.n	8001f06 <HAL_GPIO_Init+0x13a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	e001      	b.n	8001f0a <HAL_GPIO_Init+0x13e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2bff      	cmp	r3, #255	; 0xff
 8001f10:	d802      	bhi.n	8001f18 <HAL_GPIO_Init+0x14c>
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	e002      	b.n	8001f1e <HAL_GPIO_Init+0x152>
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	3b08      	subs	r3, #8
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	210f      	movs	r1, #15
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	401a      	ands	r2, r3
 8001f30:	6a39      	ldr	r1, [r7, #32]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80b1 	beq.w	80020ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f4c:	4b4d      	ldr	r3, [pc, #308]	; (8002084 <HAL_GPIO_Init+0x2b8>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a4c      	ldr	r2, [pc, #304]	; (8002084 <HAL_GPIO_Init+0x2b8>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <HAL_GPIO_Init+0x2b8>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f64:	4a48      	ldr	r2, [pc, #288]	; (8002088 <HAL_GPIO_Init+0x2bc>)
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	220f      	movs	r2, #15
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a40      	ldr	r2, [pc, #256]	; (800208c <HAL_GPIO_Init+0x2c0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d013      	beq.n	8001fb8 <HAL_GPIO_Init+0x1ec>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a3f      	ldr	r2, [pc, #252]	; (8002090 <HAL_GPIO_Init+0x2c4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d00d      	beq.n	8001fb4 <HAL_GPIO_Init+0x1e8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a3e      	ldr	r2, [pc, #248]	; (8002094 <HAL_GPIO_Init+0x2c8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d007      	beq.n	8001fb0 <HAL_GPIO_Init+0x1e4>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a3d      	ldr	r2, [pc, #244]	; (8002098 <HAL_GPIO_Init+0x2cc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d101      	bne.n	8001fac <HAL_GPIO_Init+0x1e0>
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e006      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fac:	2304      	movs	r3, #4
 8001fae:	e004      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e002      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fbc:	f002 0203 	and.w	r2, r2, #3
 8001fc0:	0092      	lsls	r2, r2, #2
 8001fc2:	4093      	lsls	r3, r2
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fca:	492f      	ldr	r1, [pc, #188]	; (8002088 <HAL_GPIO_Init+0x2bc>)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	492c      	ldr	r1, [pc, #176]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	608b      	str	r3, [r1, #8]
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ff2:	4b2a      	ldr	r3, [pc, #168]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	4928      	ldr	r1, [pc, #160]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800200c:	4b23      	ldr	r3, [pc, #140]	; (800209c <HAL_GPIO_Init+0x2d0>)
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	4922      	ldr	r1, [pc, #136]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	60cb      	str	r3, [r1, #12]
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_GPIO_Init+0x2d0>)
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	43db      	mvns	r3, r3
 8002022:	491e      	ldr	r1, [pc, #120]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8002024:	4013      	ands	r3, r2
 8002026:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002034:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4918      	ldr	r1, [pc, #96]	; (800209c <HAL_GPIO_Init+0x2d0>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002042:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	43db      	mvns	r3, r3
 800204a:	4914      	ldr	r1, [pc, #80]	; (800209c <HAL_GPIO_Init+0x2d0>)
 800204c:	4013      	ands	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d021      	beq.n	80020a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_GPIO_Init+0x2d0>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	490e      	ldr	r1, [pc, #56]	; (800209c <HAL_GPIO_Init+0x2d0>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
 8002068:	e021      	b.n	80020ae <HAL_GPIO_Init+0x2e2>
 800206a:	bf00      	nop
 800206c:	10320000 	.word	0x10320000
 8002070:	10310000 	.word	0x10310000
 8002074:	10220000 	.word	0x10220000
 8002078:	10210000 	.word	0x10210000
 800207c:	10120000 	.word	0x10120000
 8002080:	10110000 	.word	0x10110000
 8002084:	40021000 	.word	0x40021000
 8002088:	40010000 	.word	0x40010000
 800208c:	40010800 	.word	0x40010800
 8002090:	40010c00 	.word	0x40010c00
 8002094:	40011000 	.word	0x40011000
 8002098:	40011400 	.word	0x40011400
 800209c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_GPIO_Init+0x304>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	4909      	ldr	r1, [pc, #36]	; (80020d0 <HAL_GPIO_Init+0x304>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	3301      	adds	r3, #1
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	fa22 f303 	lsr.w	r3, r2, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f47f ae8e 	bne.w	8001de0 <HAL_GPIO_Init+0x14>
  }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	372c      	adds	r7, #44	; 0x2c
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	40010400 	.word	0x40010400

080020d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	887b      	ldrh	r3, [r7, #2]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	e001      	b.n	80020f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	807b      	strh	r3, [r7, #2]
 800210e:	4613      	mov	r3, r2
 8002110:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002112:	787b      	ldrb	r3, [r7, #1]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002118:	887a      	ldrh	r2, [r7, #2]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800211e:	e003      	b.n	8002128 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	041a      	lsls	r2, r3, #16
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	611a      	str	r2, [r3, #16]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
	...

08002134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	4013      	ands	r3, r2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d006      	beq.n	8002158 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fe4e 	bl	8000df4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40010400 	.word	0x40010400

08002164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e272      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8087 	beq.w	8002292 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002184:	4b92      	ldr	r3, [pc, #584]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b04      	cmp	r3, #4
 800218e:	d00c      	beq.n	80021aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002190:	4b8f      	ldr	r3, [pc, #572]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b08      	cmp	r3, #8
 800219a:	d112      	bne.n	80021c2 <HAL_RCC_OscConfig+0x5e>
 800219c:	4b8c      	ldr	r3, [pc, #560]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a8:	d10b      	bne.n	80021c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021aa:	4b89      	ldr	r3, [pc, #548]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d06c      	beq.n	8002290 <HAL_RCC_OscConfig+0x12c>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d168      	bne.n	8002290 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e24c      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x76>
 80021cc:	4b80      	ldr	r3, [pc, #512]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a7f      	ldr	r2, [pc, #508]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	e02e      	b.n	8002238 <HAL_RCC_OscConfig+0xd4>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0x98>
 80021e2:	4b7b      	ldr	r3, [pc, #492]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a7a      	ldr	r2, [pc, #488]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b78      	ldr	r3, [pc, #480]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a77      	ldr	r2, [pc, #476]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e01d      	b.n	8002238 <HAL_RCC_OscConfig+0xd4>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0xbc>
 8002206:	4b72      	ldr	r3, [pc, #456]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a71      	ldr	r2, [pc, #452]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800220c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	4b6f      	ldr	r3, [pc, #444]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a6e      	ldr	r2, [pc, #440]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e00b      	b.n	8002238 <HAL_RCC_OscConfig+0xd4>
 8002220:	4b6b      	ldr	r3, [pc, #428]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a6a      	ldr	r2, [pc, #424]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b68      	ldr	r3, [pc, #416]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a67      	ldr	r2, [pc, #412]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002236:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d013      	beq.n	8002268 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe ff16 	bl	8001070 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7fe ff12 	bl	8001070 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e200      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	4b5d      	ldr	r3, [pc, #372]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0xe4>
 8002266:	e014      	b.n	8002292 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe ff02 	bl	8001070 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002270:	f7fe fefe 	bl	8001070 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	; 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e1ec      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	4b53      	ldr	r3, [pc, #332]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x10c>
 800228e:	e000      	b.n	8002292 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d063      	beq.n	8002366 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800229e:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022aa:	4b49      	ldr	r3, [pc, #292]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d11c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x18c>
 80022b6:	4b46      	ldr	r3, [pc, #280]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d116      	bne.n	80022f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c2:	4b43      	ldr	r3, [pc, #268]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_RCC_OscConfig+0x176>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e1c0      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022da:	4b3d      	ldr	r3, [pc, #244]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4939      	ldr	r1, [pc, #228]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	e03a      	b.n	8002366 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d020      	beq.n	800233a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f8:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7fe feb7 	bl	8001070 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002306:	f7fe feb3 	bl	8001070 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e1a1      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002318:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002324:	4b2a      	ldr	r3, [pc, #168]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4927      	ldr	r1, [pc, #156]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]
 8002338:	e015      	b.n	8002366 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <HAL_RCC_OscConfig+0x270>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7fe fe96 	bl	8001070 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002348:	f7fe fe92 	bl	8001070 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e180      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d03a      	beq.n	80023e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d019      	beq.n	80023ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237a:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <HAL_RCC_OscConfig+0x274>)
 800237c:	2201      	movs	r2, #1
 800237e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7fe fe76 	bl	8001070 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002388:	f7fe fe72 	bl	8001070 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e160      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f000 face 	bl	8002948 <RCC_Delay>
 80023ac:	e01c      	b.n	80023e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_RCC_OscConfig+0x274>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b4:	f7fe fe5c 	bl	8001070 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ba:	e00f      	b.n	80023dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023bc:	f7fe fe58 	bl	8001070 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d908      	bls.n	80023dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e146      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	42420000 	.word	0x42420000
 80023d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023dc:	4b92      	ldr	r3, [pc, #584]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1e9      	bne.n	80023bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80a6 	beq.w	8002542 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fa:	4b8b      	ldr	r3, [pc, #556]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10d      	bne.n	8002422 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	4b88      	ldr	r3, [pc, #544]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	4a87      	ldr	r2, [pc, #540]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002410:	61d3      	str	r3, [r2, #28]
 8002412:	4b85      	ldr	r3, [pc, #532]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241e:	2301      	movs	r3, #1
 8002420:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002422:	4b82      	ldr	r3, [pc, #520]	; (800262c <HAL_RCC_OscConfig+0x4c8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d118      	bne.n	8002460 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800242e:	4b7f      	ldr	r3, [pc, #508]	; (800262c <HAL_RCC_OscConfig+0x4c8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a7e      	ldr	r2, [pc, #504]	; (800262c <HAL_RCC_OscConfig+0x4c8>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243a:	f7fe fe19 	bl	8001070 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002442:	f7fe fe15 	bl	8001070 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b64      	cmp	r3, #100	; 0x64
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e103      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	4b75      	ldr	r3, [pc, #468]	; (800262c <HAL_RCC_OscConfig+0x4c8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x312>
 8002468:	4b6f      	ldr	r3, [pc, #444]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4a6e      	ldr	r2, [pc, #440]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6213      	str	r3, [r2, #32]
 8002474:	e02d      	b.n	80024d2 <HAL_RCC_OscConfig+0x36e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x334>
 800247e:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a69      	ldr	r2, [pc, #420]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	6213      	str	r3, [r2, #32]
 800248a:	4b67      	ldr	r3, [pc, #412]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a66      	ldr	r2, [pc, #408]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	6213      	str	r3, [r2, #32]
 8002496:	e01c      	b.n	80024d2 <HAL_RCC_OscConfig+0x36e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b05      	cmp	r3, #5
 800249e:	d10c      	bne.n	80024ba <HAL_RCC_OscConfig+0x356>
 80024a0:	4b61      	ldr	r3, [pc, #388]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4a60      	ldr	r2, [pc, #384]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	6213      	str	r3, [r2, #32]
 80024ac:	4b5e      	ldr	r3, [pc, #376]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4a5d      	ldr	r2, [pc, #372]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6213      	str	r3, [r2, #32]
 80024b8:	e00b      	b.n	80024d2 <HAL_RCC_OscConfig+0x36e>
 80024ba:	4b5b      	ldr	r3, [pc, #364]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4a5a      	ldr	r2, [pc, #360]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	6213      	str	r3, [r2, #32]
 80024c6:	4b58      	ldr	r3, [pc, #352]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a57      	ldr	r2, [pc, #348]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d015      	beq.n	8002506 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024da:	f7fe fdc9 	bl	8001070 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7fe fdc5 	bl	8001070 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e0b1      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0ee      	beq.n	80024e2 <HAL_RCC_OscConfig+0x37e>
 8002504:	e014      	b.n	8002530 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7fe fdb3 	bl	8001070 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fe fdaf 	bl	8001070 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	; 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e09b      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	4b40      	ldr	r3, [pc, #256]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ee      	bne.n	800250e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002530:	7dfb      	ldrb	r3, [r7, #23]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d105      	bne.n	8002542 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002536:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	4a3b      	ldr	r2, [pc, #236]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002540:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8087 	beq.w	800265a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800254c:	4b36      	ldr	r3, [pc, #216]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b08      	cmp	r3, #8
 8002556:	d061      	beq.n	800261c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d146      	bne.n	80025ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002560:	4b33      	ldr	r3, [pc, #204]	; (8002630 <HAL_RCC_OscConfig+0x4cc>)
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7fe fd83 	bl	8001070 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256e:	f7fe fd7f 	bl	8001070 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e06d      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f0      	bne.n	800256e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002594:	d108      	bne.n	80025a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002596:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4921      	ldr	r1, [pc, #132]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a8:	4b1f      	ldr	r3, [pc, #124]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a19      	ldr	r1, [r3, #32]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	430b      	orrs	r3, r1
 80025ba:	491b      	ldr	r1, [pc, #108]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_RCC_OscConfig+0x4cc>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c6:	f7fe fd53 	bl	8001070 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ce:	f7fe fd4f 	bl	8001070 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e03d      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x46a>
 80025ec:	e035      	b.n	800265a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <HAL_RCC_OscConfig+0x4cc>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7fe fd3c 	bl	8001070 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe fd38 	bl	8001070 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e026      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x498>
 800261a:	e01e      	b.n	800265a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d107      	bne.n	8002634 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e019      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
 8002628:	40021000 	.word	0x40021000
 800262c:	40007000 	.word	0x40007000
 8002630:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_OscConfig+0x500>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	429a      	cmp	r2, r3
 8002646:	d106      	bne.n	8002656 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d001      	beq.n	800265a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000

08002668 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0d0      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b6a      	ldr	r3, [pc, #424]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d910      	bls.n	80026ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b67      	ldr	r3, [pc, #412]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 0207 	bic.w	r2, r3, #7
 8002692:	4965      	ldr	r1, [pc, #404]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b63      	ldr	r3, [pc, #396]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0b8      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d020      	beq.n	80026fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c4:	4b59      	ldr	r3, [pc, #356]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a58      	ldr	r2, [pc, #352]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026dc:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a52      	ldr	r2, [pc, #328]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e8:	4b50      	ldr	r3, [pc, #320]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	494d      	ldr	r1, [pc, #308]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d040      	beq.n	8002788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d115      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e07f      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	4b41      	ldr	r3, [pc, #260]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e073      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e06b      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002746:	4b39      	ldr	r3, [pc, #228]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4936      	ldr	r1, [pc, #216]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002758:	f7fe fc8a 	bl	8001070 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	e00a      	b.n	8002776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002760:	f7fe fc86 	bl	8001070 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e053      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 020c 	and.w	r2, r3, #12
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	429a      	cmp	r2, r3
 8002786:	d1eb      	bne.n	8002760 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002788:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d210      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b24      	ldr	r3, [pc, #144]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 0207 	bic.w	r2, r3, #7
 800279e:	4922      	ldr	r1, [pc, #136]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b20      	ldr	r3, [pc, #128]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e032      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4916      	ldr	r1, [pc, #88]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027e2:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	490e      	ldr	r1, [pc, #56]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027f6:	f000 f821 	bl	800283c <HAL_RCC_GetSysClockFreq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	490a      	ldr	r1, [pc, #40]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 8002808:	5ccb      	ldrb	r3, [r1, r3]
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	4a09      	ldr	r2, [pc, #36]	; (8002834 <HAL_RCC_ClockConfig+0x1cc>)
 8002810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <HAL_RCC_ClockConfig+0x1d0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fbe8 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40022000 	.word	0x40022000
 800282c:	40021000 	.word	0x40021000
 8002830:	08003824 	.word	0x08003824
 8002834:	20000000 	.word	0x20000000
 8002838:	20000020 	.word	0x20000020

0800283c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002856:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b04      	cmp	r3, #4
 8002864:	d002      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x30>
 8002866:	2b08      	cmp	r3, #8
 8002868:	d003      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x36>
 800286a:	e027      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800286e:	613b      	str	r3, [r7, #16]
      break;
 8002870:	e027      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	0c9b      	lsrs	r3, r3, #18
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	4a17      	ldr	r2, [pc, #92]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800287c:	5cd3      	ldrb	r3, [r2, r3]
 800287e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d010      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800288a:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	0c5b      	lsrs	r3, r3, #17
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	4a11      	ldr	r2, [pc, #68]	; (80028dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002896:	5cd3      	ldrb	r3, [r2, r3]
 8002898:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800289e:	fb03 f202 	mul.w	r2, r3, r2
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e004      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a0c      	ldr	r2, [pc, #48]	; (80028e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028b0:	fb02 f303 	mul.w	r3, r2, r3
 80028b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	613b      	str	r3, [r7, #16]
      break;
 80028ba:	e002      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80028be:	613b      	str	r3, [r7, #16]
      break;
 80028c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c2:	693b      	ldr	r3, [r7, #16]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	007a1200 	.word	0x007a1200
 80028d8:	0800383c 	.word	0x0800383c
 80028dc:	0800384c 	.word	0x0800384c
 80028e0:	003d0900 	.word	0x003d0900

080028e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e8:	4b02      	ldr	r3, [pc, #8]	; (80028f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	20000000 	.word	0x20000000

080028f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028fc:	f7ff fff2 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4903      	ldr	r1, [pc, #12]	; (800291c <HAL_RCC_GetPCLK1Freq+0x24>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	08003834 	.word	0x08003834

08002920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002924:	f7ff ffde 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	0adb      	lsrs	r3, r3, #11
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4903      	ldr	r1, [pc, #12]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	08003834 	.word	0x08003834

08002948 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002950:	4b0a      	ldr	r3, [pc, #40]	; (800297c <RCC_Delay+0x34>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <RCC_Delay+0x38>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0a5b      	lsrs	r3, r3, #9
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	fb02 f303 	mul.w	r3, r2, r3
 8002962:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002964:	bf00      	nop
  }
  while (Delay --);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1e5a      	subs	r2, r3, #1
 800296a:	60fa      	str	r2, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f9      	bne.n	8002964 <RCC_Delay+0x1c>
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	20000000 	.word	0x20000000
 8002980:	10624dd3 	.word	0x10624dd3

08002984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e041      	b.n	8002a1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe f80a 	bl	80009c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3304      	adds	r3, #4
 80029c0:	4619      	mov	r1, r3
 80029c2:	4610      	mov	r0, r2
 80029c4:	f000 fb16 	bl	8002ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e041      	b.n	8002ab8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d106      	bne.n	8002a4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f839 	bl	8002ac0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4610      	mov	r0, r2
 8002a62:	f000 fac7 	bl	8002ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
	...

08002ad4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <HAL_TIM_PWM_Start+0x24>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	bf14      	ite	ne
 8002af0:	2301      	movne	r3, #1
 8002af2:	2300      	moveq	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	e022      	b.n	8002b3e <HAL_TIM_PWM_Start+0x6a>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d109      	bne.n	8002b12 <HAL_TIM_PWM_Start+0x3e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	bf14      	ite	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	2300      	moveq	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	e015      	b.n	8002b3e <HAL_TIM_PWM_Start+0x6a>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d109      	bne.n	8002b2c <HAL_TIM_PWM_Start+0x58>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	bf14      	ite	ne
 8002b24:	2301      	movne	r3, #1
 8002b26:	2300      	moveq	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e008      	b.n	8002b3e <HAL_TIM_PWM_Start+0x6a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	bf14      	ite	ne
 8002b38:	2301      	movne	r3, #1
 8002b3a:	2300      	moveq	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e05e      	b.n	8002c04 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d104      	bne.n	8002b56 <HAL_TIM_PWM_Start+0x82>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b54:	e013      	b.n	8002b7e <HAL_TIM_PWM_Start+0xaa>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d104      	bne.n	8002b66 <HAL_TIM_PWM_Start+0x92>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b64:	e00b      	b.n	8002b7e <HAL_TIM_PWM_Start+0xaa>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d104      	bne.n	8002b76 <HAL_TIM_PWM_Start+0xa2>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b74:	e003      	b.n	8002b7e <HAL_TIM_PWM_Start+0xaa>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2201      	movs	r2, #1
 8002b84:	6839      	ldr	r1, [r7, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fcb4 	bl	80034f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <HAL_TIM_PWM_Start+0x138>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d107      	bne.n	8002ba6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ba4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <HAL_TIM_PWM_Start+0x138>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00e      	beq.n	8002bce <HAL_TIM_PWM_Start+0xfa>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb8:	d009      	beq.n	8002bce <HAL_TIM_PWM_Start+0xfa>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a14      	ldr	r2, [pc, #80]	; (8002c10 <HAL_TIM_PWM_Start+0x13c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d004      	beq.n	8002bce <HAL_TIM_PWM_Start+0xfa>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <HAL_TIM_PWM_Start+0x140>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d111      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b06      	cmp	r3, #6
 8002bde:	d010      	beq.n	8002c02 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf0:	e007      	b.n	8002c02 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0201 	orr.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40012c00 	.word	0x40012c00
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800

08002c18 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2200      	movs	r2, #0
 8002c28:	6839      	ldr	r1, [r7, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 fc62 	bl	80034f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a29      	ldr	r2, [pc, #164]	; (8002cdc <HAL_TIM_PWM_Stop+0xc4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d117      	bne.n	8002c6a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6a1a      	ldr	r2, [r3, #32]
 8002c40:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10f      	bne.n	8002c6a <HAL_TIM_PWM_Stop+0x52>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6a1a      	ldr	r2, [r3, #32]
 8002c50:	f240 4344 	movw	r3, #1092	; 0x444
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d107      	bne.n	8002c6a <HAL_TIM_PWM_Stop+0x52>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6a1a      	ldr	r2, [r3, #32]
 8002c70:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10f      	bne.n	8002c9a <HAL_TIM_PWM_Stop+0x82>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6a1a      	ldr	r2, [r3, #32]
 8002c80:	f240 4344 	movw	r3, #1092	; 0x444
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d107      	bne.n	8002c9a <HAL_TIM_PWM_Stop+0x82>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0201 	bic.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d104      	bne.n	8002caa <HAL_TIM_PWM_Stop+0x92>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ca8:	e013      	b.n	8002cd2 <HAL_TIM_PWM_Stop+0xba>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d104      	bne.n	8002cba <HAL_TIM_PWM_Stop+0xa2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb8:	e00b      	b.n	8002cd2 <HAL_TIM_PWM_Stop+0xba>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d104      	bne.n	8002cca <HAL_TIM_PWM_Stop+0xb2>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc8:	e003      	b.n	8002cd2 <HAL_TIM_PWM_Stop+0xba>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40012c00 	.word	0x40012c00

08002ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e0ae      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b0c      	cmp	r3, #12
 8002d0a:	f200 809f 	bhi.w	8002e4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d0e:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d14:	08002d49 	.word	0x08002d49
 8002d18:	08002e4d 	.word	0x08002e4d
 8002d1c:	08002e4d 	.word	0x08002e4d
 8002d20:	08002e4d 	.word	0x08002e4d
 8002d24:	08002d89 	.word	0x08002d89
 8002d28:	08002e4d 	.word	0x08002e4d
 8002d2c:	08002e4d 	.word	0x08002e4d
 8002d30:	08002e4d 	.word	0x08002e4d
 8002d34:	08002dcb 	.word	0x08002dcb
 8002d38:	08002e4d 	.word	0x08002e4d
 8002d3c:	08002e4d 	.word	0x08002e4d
 8002d40:	08002e4d 	.word	0x08002e4d
 8002d44:	08002e0b 	.word	0x08002e0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f9b2 	bl	80030b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0208 	orr.w	r2, r2, #8
 8002d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0204 	bic.w	r2, r2, #4
 8002d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6999      	ldr	r1, [r3, #24]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	619a      	str	r2, [r3, #24]
      break;
 8002d86:	e064      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f9f8 	bl	8003184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6999      	ldr	r1, [r3, #24]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	021a      	lsls	r2, r3, #8
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	619a      	str	r2, [r3, #24]
      break;
 8002dc8:	e043      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fa41 	bl	8003258 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69da      	ldr	r2, [r3, #28]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0208 	orr.w	r2, r2, #8
 8002de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0204 	bic.w	r2, r2, #4
 8002df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69d9      	ldr	r1, [r3, #28]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	61da      	str	r2, [r3, #28]
      break;
 8002e08:	e023      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fa8b 	bl	800332c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69d9      	ldr	r1, [r3, #28]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	021a      	lsls	r2, r3, #8
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	61da      	str	r2, [r3, #28]
      break;
 8002e4a:	e002      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_TIM_ConfigClockSource+0x1c>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e0b4      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x186>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ea6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb8:	d03e      	beq.n	8002f38 <HAL_TIM_ConfigClockSource+0xd4>
 8002eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ebe:	f200 8087 	bhi.w	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec6:	f000 8086 	beq.w	8002fd6 <HAL_TIM_ConfigClockSource+0x172>
 8002eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ece:	d87f      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed0:	2b70      	cmp	r3, #112	; 0x70
 8002ed2:	d01a      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0xa6>
 8002ed4:	2b70      	cmp	r3, #112	; 0x70
 8002ed6:	d87b      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed8:	2b60      	cmp	r3, #96	; 0x60
 8002eda:	d050      	beq.n	8002f7e <HAL_TIM_ConfigClockSource+0x11a>
 8002edc:	2b60      	cmp	r3, #96	; 0x60
 8002ede:	d877      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee0:	2b50      	cmp	r3, #80	; 0x50
 8002ee2:	d03c      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0xfa>
 8002ee4:	2b50      	cmp	r3, #80	; 0x50
 8002ee6:	d873      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee8:	2b40      	cmp	r3, #64	; 0x40
 8002eea:	d058      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0x13a>
 8002eec:	2b40      	cmp	r3, #64	; 0x40
 8002eee:	d86f      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef0:	2b30      	cmp	r3, #48	; 0x30
 8002ef2:	d064      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x15a>
 8002ef4:	2b30      	cmp	r3, #48	; 0x30
 8002ef6:	d86b      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d060      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x15a>
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d867      	bhi.n	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d05c      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x15a>
 8002f04:	2b10      	cmp	r3, #16
 8002f06:	d05a      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x15a>
 8002f08:	e062      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f1a:	f000 facc 	bl	80034b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	609a      	str	r2, [r3, #8]
      break;
 8002f36:	e04f      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f48:	f000 fab5 	bl	80034b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f5a:	609a      	str	r2, [r3, #8]
      break;
 8002f5c:	e03c      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f000 fa2c 	bl	80033c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2150      	movs	r1, #80	; 0x50
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fa83 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 8002f7c:	e02c      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f000 fa4a 	bl	8003424 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2160      	movs	r1, #96	; 0x60
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fa73 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 8002f9c:	e01c      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002faa:	461a      	mov	r2, r3
 8002fac:	f000 fa0c 	bl	80033c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2140      	movs	r1, #64	; 0x40
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fa63 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 8002fbc:	e00c      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f000 fa5a 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 8002fce:	e003      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd4:	e000      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a29      	ldr	r2, [pc, #164]	; (80030ac <TIM_Base_SetConfig+0xb8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00b      	beq.n	8003024 <TIM_Base_SetConfig+0x30>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003012:	d007      	beq.n	8003024 <TIM_Base_SetConfig+0x30>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a26      	ldr	r2, [pc, #152]	; (80030b0 <TIM_Base_SetConfig+0xbc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d003      	beq.n	8003024 <TIM_Base_SetConfig+0x30>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a25      	ldr	r2, [pc, #148]	; (80030b4 <TIM_Base_SetConfig+0xc0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d108      	bne.n	8003036 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a1c      	ldr	r2, [pc, #112]	; (80030ac <TIM_Base_SetConfig+0xb8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00b      	beq.n	8003056 <TIM_Base_SetConfig+0x62>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003044:	d007      	beq.n	8003056 <TIM_Base_SetConfig+0x62>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <TIM_Base_SetConfig+0xbc>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d003      	beq.n	8003056 <TIM_Base_SetConfig+0x62>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <TIM_Base_SetConfig+0xc0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d108      	bne.n	8003068 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a07      	ldr	r2, [pc, #28]	; (80030ac <TIM_Base_SetConfig+0xb8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d103      	bne.n	800309c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	615a      	str	r2, [r3, #20]
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	40012c00 	.word	0x40012c00
 80030b0:	40000400 	.word	0x40000400
 80030b4:	40000800 	.word	0x40000800

080030b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f023 0201 	bic.w	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0303 	bic.w	r3, r3, #3
 80030ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f023 0302 	bic.w	r3, r3, #2
 8003100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <TIM_OC1_SetConfig+0xc8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d10c      	bne.n	800312e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f023 0308 	bic.w	r3, r3, #8
 800311a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f023 0304 	bic.w	r3, r3, #4
 800312c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a13      	ldr	r2, [pc, #76]	; (8003180 <TIM_OC1_SetConfig+0xc8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d111      	bne.n	800315a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800313c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	621a      	str	r2, [r3, #32]
}
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40012c00 	.word	0x40012c00

08003184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f023 0210 	bic.w	r2, r3, #16
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f023 0320 	bic.w	r3, r3, #32
 80031ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a1d      	ldr	r2, [pc, #116]	; (8003254 <TIM_OC2_SetConfig+0xd0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d10d      	bne.n	8003200 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a14      	ldr	r2, [pc, #80]	; (8003254 <TIM_OC2_SetConfig+0xd0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d113      	bne.n	8003230 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800320e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	40012c00 	.word	0x40012c00

08003258 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <TIM_OC3_SetConfig+0xd0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d10d      	bne.n	80032d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a14      	ldr	r2, [pc, #80]	; (8003328 <TIM_OC3_SetConfig+0xd0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d113      	bne.n	8003302 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	621a      	str	r2, [r3, #32]
}
 800331c:	bf00      	nop
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40012c00 	.word	0x40012c00

0800332c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	031b      	lsls	r3, r3, #12
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a0f      	ldr	r2, [pc, #60]	; (80033c4 <TIM_OC4_SetConfig+0x98>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d109      	bne.n	80033a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003392:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	019b      	lsls	r3, r3, #6
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	621a      	str	r2, [r3, #32]
}
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	40012c00 	.word	0x40012c00

080033c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f023 0201 	bic.w	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f023 030a 	bic.w	r3, r3, #10
 8003404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	621a      	str	r2, [r3, #32]
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f023 0210 	bic.w	r2, r3, #16
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800344e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	031b      	lsls	r3, r3, #12
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003460:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	621a      	str	r2, [r3, #32]
}
 8003478:	bf00      	nop
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	f043 0307 	orr.w	r3, r3, #7
 80034a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	609a      	str	r2, [r3, #8]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b087      	sub	sp, #28
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	021a      	lsls	r2, r3, #8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	431a      	orrs	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4313      	orrs	r3, r2
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	609a      	str	r2, [r3, #8]
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	2201      	movs	r2, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a1a      	ldr	r2, [r3, #32]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	43db      	mvns	r3, r3
 8003516:	401a      	ands	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1a      	ldr	r2, [r3, #32]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	431a      	orrs	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	621a      	str	r2, [r3, #32]
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003550:	2302      	movs	r3, #2
 8003552:	e046      	b.n	80035e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a16      	ldr	r2, [pc, #88]	; (80035ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00e      	beq.n	80035b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a0:	d009      	beq.n	80035b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d004      	beq.n	80035b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a10      	ldr	r2, [pc, #64]	; (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d10c      	bne.n	80035d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40000400 	.word	0x40000400
 80035f4:	40000800 	.word	0x40000800

080035f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e042      	b.n	8003690 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fd fa6a 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2224      	movs	r2, #36	; 0x24
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800363a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f82b 	bl	8003698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003650:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003660:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003670:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036d2:	f023 030c 	bic.w	r3, r3, #12
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	430b      	orrs	r3, r1
 80036de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a2c      	ldr	r2, [pc, #176]	; (80037ac <UART_SetConfig+0x114>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d103      	bne.n	8003708 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003700:	f7ff f90e 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	e002      	b.n	800370e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003708:	f7ff f8f6 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 800370c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009a      	lsls	r2, r3, #2
 8003718:	441a      	add	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	fbb2 f3f3 	udiv	r3, r2, r3
 8003724:	4a22      	ldr	r2, [pc, #136]	; (80037b0 <UART_SetConfig+0x118>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	0119      	lsls	r1, r3, #4
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	009a      	lsls	r2, r3, #2
 8003738:	441a      	add	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	fbb2 f2f3 	udiv	r2, r2, r3
 8003744:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <UART_SetConfig+0x118>)
 8003746:	fba3 0302 	umull	r0, r3, r3, r2
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	2064      	movs	r0, #100	; 0x64
 800374e:	fb00 f303 	mul.w	r3, r0, r3
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	3332      	adds	r3, #50	; 0x32
 8003758:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <UART_SetConfig+0x118>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003764:	4419      	add	r1, r3
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	009a      	lsls	r2, r3, #2
 8003770:	441a      	add	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	fbb2 f2f3 	udiv	r2, r2, r3
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <UART_SetConfig+0x118>)
 800377e:	fba3 0302 	umull	r0, r3, r3, r2
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	2064      	movs	r0, #100	; 0x64
 8003786:	fb00 f303 	mul.w	r3, r0, r3
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	3332      	adds	r3, #50	; 0x32
 8003790:	4a07      	ldr	r2, [pc, #28]	; (80037b0 <UART_SetConfig+0x118>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	f003 020f 	and.w	r2, r3, #15
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	440a      	add	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40013800 	.word	0x40013800
 80037b0:	51eb851f 	.word	0x51eb851f

080037b4 <memset>:
 80037b4:	4603      	mov	r3, r0
 80037b6:	4402      	add	r2, r0
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d100      	bne.n	80037be <memset+0xa>
 80037bc:	4770      	bx	lr
 80037be:	f803 1b01 	strb.w	r1, [r3], #1
 80037c2:	e7f9      	b.n	80037b8 <memset+0x4>

080037c4 <__libc_init_array>:
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	2600      	movs	r6, #0
 80037c8:	4d0c      	ldr	r5, [pc, #48]	; (80037fc <__libc_init_array+0x38>)
 80037ca:	4c0d      	ldr	r4, [pc, #52]	; (8003800 <__libc_init_array+0x3c>)
 80037cc:	1b64      	subs	r4, r4, r5
 80037ce:	10a4      	asrs	r4, r4, #2
 80037d0:	42a6      	cmp	r6, r4
 80037d2:	d109      	bne.n	80037e8 <__libc_init_array+0x24>
 80037d4:	f000 f81a 	bl	800380c <_init>
 80037d8:	2600      	movs	r6, #0
 80037da:	4d0a      	ldr	r5, [pc, #40]	; (8003804 <__libc_init_array+0x40>)
 80037dc:	4c0a      	ldr	r4, [pc, #40]	; (8003808 <__libc_init_array+0x44>)
 80037de:	1b64      	subs	r4, r4, r5
 80037e0:	10a4      	asrs	r4, r4, #2
 80037e2:	42a6      	cmp	r6, r4
 80037e4:	d105      	bne.n	80037f2 <__libc_init_array+0x2e>
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ec:	4798      	blx	r3
 80037ee:	3601      	adds	r6, #1
 80037f0:	e7ee      	b.n	80037d0 <__libc_init_array+0xc>
 80037f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f6:	4798      	blx	r3
 80037f8:	3601      	adds	r6, #1
 80037fa:	e7f2      	b.n	80037e2 <__libc_init_array+0x1e>
 80037fc:	08003850 	.word	0x08003850
 8003800:	08003850 	.word	0x08003850
 8003804:	08003850 	.word	0x08003850
 8003808:	08003858 	.word	0x08003858

0800380c <_init>:
 800380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380e:	bf00      	nop
 8003810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003812:	bc08      	pop	{r3}
 8003814:	469e      	mov	lr, r3
 8003816:	4770      	bx	lr

08003818 <_fini>:
 8003818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381a:	bf00      	nop
 800381c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381e:	bc08      	pop	{r3}
 8003820:	469e      	mov	lr, r3
 8003822:	4770      	bx	lr
